
embarque_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f4c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080060fc  080060fc  000160fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800621c  0800621c  0001621c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006224  08006224  00016224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006228  08006228  00016228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  0800622c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  8 .bss          00004fb0  20000010  20000010  00020010  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20004fc0  20004fc0  00020010  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 11 .debug_info   00019d9e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002f10  00000000  00000000  00039dde  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001448  00000000  00000000  0003ccf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000012f0  00000000  00000000  0003e138  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009e0b  00000000  00000000  0003f428  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000076af  00000000  00000000  00049233  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000508e2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005530  00000000  00000000  00050960  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080060e4 	.word	0x080060e4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	080060e4 	.word	0x080060e4

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b97a 	b.w	80004fc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	468c      	mov	ip, r1
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	9e08      	ldr	r6, [sp, #32]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d151      	bne.n	80002d4 <__udivmoddi4+0xb4>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d96d      	bls.n	8000312 <__udivmoddi4+0xf2>
 8000236:	fab2 fe82 	clz	lr, r2
 800023a:	f1be 0f00 	cmp.w	lr, #0
 800023e:	d00b      	beq.n	8000258 <__udivmoddi4+0x38>
 8000240:	f1ce 0c20 	rsb	ip, lr, #32
 8000244:	fa01 f50e 	lsl.w	r5, r1, lr
 8000248:	fa20 fc0c 	lsr.w	ip, r0, ip
 800024c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000250:	ea4c 0c05 	orr.w	ip, ip, r5
 8000254:	fa00 f40e 	lsl.w	r4, r0, lr
 8000258:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800025c:	0c25      	lsrs	r5, r4, #16
 800025e:	fbbc f8fa 	udiv	r8, ip, sl
 8000262:	fa1f f987 	uxth.w	r9, r7
 8000266:	fb0a cc18 	mls	ip, sl, r8, ip
 800026a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026e:	fb08 f309 	mul.w	r3, r8, r9
 8000272:	42ab      	cmp	r3, r5
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x6c>
 8000276:	19ed      	adds	r5, r5, r7
 8000278:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800027c:	f080 8123 	bcs.w	80004c6 <__udivmoddi4+0x2a6>
 8000280:	42ab      	cmp	r3, r5
 8000282:	f240 8120 	bls.w	80004c6 <__udivmoddi4+0x2a6>
 8000286:	f1a8 0802 	sub.w	r8, r8, #2
 800028a:	443d      	add	r5, r7
 800028c:	1aed      	subs	r5, r5, r3
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb5 f0fa 	udiv	r0, r5, sl
 8000294:	fb0a 5510 	mls	r5, sl, r0, r5
 8000298:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800029c:	fb00 f909 	mul.w	r9, r0, r9
 80002a0:	45a1      	cmp	r9, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x98>
 80002a4:	19e4      	adds	r4, r4, r7
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002aa:	f080 810a 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80002ae:	45a1      	cmp	r9, r4
 80002b0:	f240 8107 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	eba4 0409 	sub.w	r4, r4, r9
 80002bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c0:	2100      	movs	r1, #0
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d061      	beq.n	800038a <__udivmoddi4+0x16a>
 80002c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ca:	2300      	movs	r3, #0
 80002cc:	6034      	str	r4, [r6, #0]
 80002ce:	6073      	str	r3, [r6, #4]
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xc8>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d054      	beq.n	8000386 <__udivmoddi4+0x166>
 80002dc:	2100      	movs	r1, #0
 80002de:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	f040 808e 	bne.w	800040e <__udivmoddi4+0x1ee>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xdc>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2d0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	46ac      	mov	ip, r5
 8000306:	2e00      	cmp	r6, #0
 8000308:	d03f      	beq.n	800038a <__udivmoddi4+0x16a>
 800030a:	e886 1010 	stmia.w	r6, {r4, ip}
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	b912      	cbnz	r2, 800031a <__udivmoddi4+0xfa>
 8000314:	2701      	movs	r7, #1
 8000316:	fbb7 f7f2 	udiv	r7, r7, r2
 800031a:	fab7 fe87 	clz	lr, r7
 800031e:	f1be 0f00 	cmp.w	lr, #0
 8000322:	d134      	bne.n	800038e <__udivmoddi4+0x16e>
 8000324:	1beb      	subs	r3, r5, r7
 8000326:	0c3a      	lsrs	r2, r7, #16
 8000328:	fa1f fc87 	uxth.w	ip, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000332:	0c25      	lsrs	r5, r4, #16
 8000334:	fb02 3318 	mls	r3, r2, r8, r3
 8000338:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800033c:	fb0c f308 	mul.w	r3, ip, r8
 8000340:	42ab      	cmp	r3, r5
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x134>
 8000344:	19ed      	adds	r5, r5, r7
 8000346:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x132>
 800034c:	42ab      	cmp	r3, r5
 800034e:	f200 80d1 	bhi.w	80004f4 <__udivmoddi4+0x2d4>
 8000352:	4680      	mov	r8, r0
 8000354:	1aed      	subs	r5, r5, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb5 f0f2 	udiv	r0, r5, r2
 800035c:	fb02 5510 	mls	r5, r2, r0, r5
 8000360:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000364:	fb0c fc00 	mul.w	ip, ip, r0
 8000368:	45a4      	cmp	ip, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x15c>
 800036c:	19e4      	adds	r4, r4, r7
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x15a>
 8000374:	45a4      	cmp	ip, r4
 8000376:	f200 80b8 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 040c 	sub.w	r4, r4, ip
 8000380:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000384:	e79d      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000386:	4631      	mov	r1, r6
 8000388:	4630      	mov	r0, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	f1ce 0420 	rsb	r4, lr, #32
 8000392:	fa05 f30e 	lsl.w	r3, r5, lr
 8000396:	fa07 f70e 	lsl.w	r7, r7, lr
 800039a:	fa20 f804 	lsr.w	r8, r0, r4
 800039e:	0c3a      	lsrs	r2, r7, #16
 80003a0:	fa25 f404 	lsr.w	r4, r5, r4
 80003a4:	ea48 0803 	orr.w	r8, r8, r3
 80003a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b0:	fb02 4411 	mls	r4, r2, r1, r4
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003bc:	fb01 f30c 	mul.w	r3, r1, ip
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x1bc>
 80003c8:	19ed      	adds	r5, r5, r7
 80003ca:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ce:	f080 808a 	bcs.w	80004e6 <__udivmoddi4+0x2c6>
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	f240 8087 	bls.w	80004e6 <__udivmoddi4+0x2c6>
 80003d8:	3902      	subs	r1, #2
 80003da:	443d      	add	r5, r7
 80003dc:	1aeb      	subs	r3, r5, r3
 80003de:	fa1f f588 	uxth.w	r5, r8
 80003e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ee:	fb00 f30c 	mul.w	r3, r0, ip
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1e6>
 80003f6:	19ed      	adds	r5, r5, r7
 80003f8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003fc:	d26f      	bcs.n	80004de <__udivmoddi4+0x2be>
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d96d      	bls.n	80004de <__udivmoddi4+0x2be>
 8000402:	3802      	subs	r0, #2
 8000404:	443d      	add	r5, r7
 8000406:	1aeb      	subs	r3, r5, r3
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	e78f      	b.n	800032e <__udivmoddi4+0x10e>
 800040e:	f1c1 0720 	rsb	r7, r1, #32
 8000412:	fa22 f807 	lsr.w	r8, r2, r7
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 f401 	lsl.w	r4, r5, r1
 800041c:	ea48 0303 	orr.w	r3, r8, r3
 8000420:	fa20 fe07 	lsr.w	lr, r0, r7
 8000424:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4e 0e04 	orr.w	lr, lr, r4
 800042e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000432:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000436:	fb0c 5519 	mls	r5, ip, r9, r5
 800043a:	fa1f f883 	uxth.w	r8, r3
 800043e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000442:	fb09 f408 	mul.w	r4, r9, r8
 8000446:	42ac      	cmp	r4, r5
 8000448:	fa02 f201 	lsl.w	r2, r2, r1
 800044c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x244>
 8000452:	18ed      	adds	r5, r5, r3
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000458:	d243      	bcs.n	80004e2 <__udivmoddi4+0x2c2>
 800045a:	42ac      	cmp	r4, r5
 800045c:	d941      	bls.n	80004e2 <__udivmoddi4+0x2c2>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	441d      	add	r5, r3
 8000464:	1b2d      	subs	r5, r5, r4
 8000466:	fa1f fe8e 	uxth.w	lr, lr
 800046a:	fbb5 f0fc 	udiv	r0, r5, ip
 800046e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000472:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45a0      	cmp	r8, r4
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x26e>
 800047e:	18e4      	adds	r4, r4, r3
 8000480:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000484:	d229      	bcs.n	80004da <__udivmoddi4+0x2ba>
 8000486:	45a0      	cmp	r8, r4
 8000488:	d927      	bls.n	80004da <__udivmoddi4+0x2ba>
 800048a:	3802      	subs	r0, #2
 800048c:	441c      	add	r4, r3
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba4 0408 	sub.w	r4, r4, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454c      	cmp	r4, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	464d      	mov	r5, r9
 80004a0:	d315      	bcc.n	80004ce <__udivmoddi4+0x2ae>
 80004a2:	d012      	beq.n	80004ca <__udivmoddi4+0x2aa>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x29c>
 80004a6:	ebba 030e 	subs.w	r3, sl, lr
 80004aa:	eb64 0405 	sbc.w	r4, r4, r5
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40cb      	lsrs	r3, r1
 80004b4:	431f      	orrs	r7, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	6037      	str	r7, [r6, #0]
 80004ba:	6074      	str	r4, [r6, #4]
 80004bc:	2100      	movs	r1, #0
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	4618      	mov	r0, r3
 80004c4:	e6f8      	b.n	80002b8 <__udivmoddi4+0x98>
 80004c6:	4690      	mov	r8, r2
 80004c8:	e6e0      	b.n	800028c <__udivmoddi4+0x6c>
 80004ca:	45c2      	cmp	sl, r8
 80004cc:	d2ea      	bcs.n	80004a4 <__udivmoddi4+0x284>
 80004ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d2:	eb69 0503 	sbc.w	r5, r9, r3
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7e4      	b.n	80004a4 <__udivmoddi4+0x284>
 80004da:	4628      	mov	r0, r5
 80004dc:	e7d7      	b.n	800048e <__udivmoddi4+0x26e>
 80004de:	4640      	mov	r0, r8
 80004e0:	e791      	b.n	8000406 <__udivmoddi4+0x1e6>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e7be      	b.n	8000464 <__udivmoddi4+0x244>
 80004e6:	4601      	mov	r1, r0
 80004e8:	e778      	b.n	80003dc <__udivmoddi4+0x1bc>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	e745      	b.n	800037c <__udivmoddi4+0x15c>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xe6>
 80004f4:	f1a8 0802 	sub.w	r8, r8, #2
 80004f8:	443d      	add	r5, r7
 80004fa:	e72b      	b.n	8000354 <__udivmoddi4+0x134>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000504:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <HAL_Init+0x40>)
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <HAL_Init+0x40>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000510:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <HAL_Init+0x40>)
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <HAL_Init+0x40>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800051c:	4a08      	ldr	r2, [pc, #32]	; (8000540 <HAL_Init+0x40>)
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <HAL_Init+0x40>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000526:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000528:	2003      	movs	r0, #3
 800052a:	f000 f8d6 	bl	80006da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052e:	2000      	movs	r0, #0
 8000530:	f005 fcce 	bl	8005ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000534:	f005 fbdc 	bl	8005cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000538:	2300      	movs	r3, #0
}
 800053a:	4618      	mov	r0, r3
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40023c00 	.word	0x40023c00

08000544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <HAL_IncTick+0x20>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	461a      	mov	r2, r3
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <HAL_IncTick+0x24>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4413      	add	r3, r2
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <HAL_IncTick+0x24>)
 8000556:	6013      	str	r3, [r2, #0]
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000004 	.word	0x20000004
 8000568:	20004a34 	.word	0x20004a34

0800056c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  return uwTick;
 8000570:	4b03      	ldr	r3, [pc, #12]	; (8000580 <HAL_GetTick+0x14>)
 8000572:	681b      	ldr	r3, [r3, #0]
}
 8000574:	4618      	mov	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	20004a34 	.word	0x20004a34

08000584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f003 0307 	and.w	r3, r3, #7
 8000592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000596:	68db      	ldr	r3, [r3, #12]
 8000598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800059a:	68ba      	ldr	r2, [r7, #8]
 800059c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005a0:	4013      	ands	r3, r2
 80005a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005b6:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <__NVIC_SetPriorityGrouping+0x44>)
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	60d3      	str	r3, [r2, #12]
}
 80005bc:	bf00      	nop
 80005be:	3714      	adds	r7, #20
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	e000ed00 	.word	0xe000ed00

080005cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <__NVIC_GetPriorityGrouping+0x18>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	0a1b      	lsrs	r3, r3, #8
 80005d6:	f003 0307 	and.w	r3, r3, #7
}
 80005da:	4618      	mov	r0, r3
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	e000ed00 	.word	0xe000ed00

080005e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	db0b      	blt.n	8000612 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005fa:	4909      	ldr	r1, [pc, #36]	; (8000620 <__NVIC_EnableIRQ+0x38>)
 80005fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000600:	095b      	lsrs	r3, r3, #5
 8000602:	79fa      	ldrb	r2, [r7, #7]
 8000604:	f002 021f 	and.w	r2, r2, #31
 8000608:	2001      	movs	r0, #1
 800060a:	fa00 f202 	lsl.w	r2, r0, r2
 800060e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000e100 	.word	0xe000e100

08000624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	6039      	str	r1, [r7, #0]
 800062e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000634:	2b00      	cmp	r3, #0
 8000636:	db0a      	blt.n	800064e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000638:	490d      	ldr	r1, [pc, #52]	; (8000670 <__NVIC_SetPriority+0x4c>)
 800063a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063e:	683a      	ldr	r2, [r7, #0]
 8000640:	b2d2      	uxtb	r2, r2
 8000642:	0112      	lsls	r2, r2, #4
 8000644:	b2d2      	uxtb	r2, r2
 8000646:	440b      	add	r3, r1
 8000648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800064c:	e00a      	b.n	8000664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064e:	4909      	ldr	r1, [pc, #36]	; (8000674 <__NVIC_SetPriority+0x50>)
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	f003 030f 	and.w	r3, r3, #15
 8000656:	3b04      	subs	r3, #4
 8000658:	683a      	ldr	r2, [r7, #0]
 800065a:	b2d2      	uxtb	r2, r2
 800065c:	0112      	lsls	r2, r2, #4
 800065e:	b2d2      	uxtb	r2, r2
 8000660:	440b      	add	r3, r1
 8000662:	761a      	strb	r2, [r3, #24]
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000e100 	.word	0xe000e100
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000678:	b480      	push	{r7}
 800067a:	b089      	sub	sp, #36	; 0x24
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f003 0307 	and.w	r3, r3, #7
 800068a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	f1c3 0307 	rsb	r3, r3, #7
 8000692:	2b04      	cmp	r3, #4
 8000694:	bf28      	it	cs
 8000696:	2304      	movcs	r3, #4
 8000698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069a:	69fb      	ldr	r3, [r7, #28]
 800069c:	3304      	adds	r3, #4
 800069e:	2b06      	cmp	r3, #6
 80006a0:	d902      	bls.n	80006a8 <NVIC_EncodePriority+0x30>
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	3b03      	subs	r3, #3
 80006a6:	e000      	b.n	80006aa <NVIC_EncodePriority+0x32>
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ac:	2201      	movs	r2, #1
 80006ae:	69bb      	ldr	r3, [r7, #24]
 80006b0:	fa02 f303 	lsl.w	r3, r2, r3
 80006b4:	1e5a      	subs	r2, r3, #1
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	401a      	ands	r2, r3
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006be:	2101      	movs	r1, #1
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	fa01 f303 	lsl.w	r3, r1, r3
 80006c6:	1e59      	subs	r1, r3, #1
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006cc:	4313      	orrs	r3, r2
         );
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3724      	adds	r7, #36	; 0x24
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b082      	sub	sp, #8
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff ff4e 	bl	8000584 <__NVIC_SetPriorityGrouping>
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
 80006fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000702:	f7ff ff63 	bl	80005cc <__NVIC_GetPriorityGrouping>
 8000706:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	68b9      	ldr	r1, [r7, #8]
 800070c:	6978      	ldr	r0, [r7, #20]
 800070e:	f7ff ffb3 	bl	8000678 <NVIC_EncodePriority>
 8000712:	4602      	mov	r2, r0
 8000714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000718:	4611      	mov	r1, r2
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff82 	bl	8000624 <__NVIC_SetPriority>
}
 8000720:	bf00      	nop
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff56 	bl	80005e8 <__NVIC_EnableIRQ>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d101      	bne.n	8000756 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000752:	2301      	movs	r3, #1
 8000754:	e014      	b.n	8000780 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	791b      	ldrb	r3, [r3, #4]
 800075a:	b2db      	uxtb	r3, r3
 800075c:	2b00      	cmp	r3, #0
 800075e:	d105      	bne.n	800076c <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2200      	movs	r2, #0
 8000764:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f005 faee 	bl	8005d48 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2202      	movs	r2, #2
 8000770:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800077e:	2300      	movs	r3, #0
}
 8000780:	4618      	mov	r0, r3
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8000788:	b480      	push	{r7}
 800078a:	b087      	sub	sp, #28
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	2300      	movs	r3, #0
 800079a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	795b      	ldrb	r3, [r3, #5]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d101      	bne.n	80007a8 <HAL_DAC_ConfigChannel+0x20>
 80007a4:	2302      	movs	r3, #2
 80007a6:	e036      	b.n	8000816 <HAL_DAC_ConfigChannel+0x8e>
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	2201      	movs	r2, #1
 80007ac:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	2202      	movs	r2, #2
 80007b2:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80007bc:	f640 72fe 	movw	r2, #4094	; 0xffe
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	43db      	mvns	r3, r3
 80007c8:	697a      	ldr	r2, [r7, #20]
 80007ca:	4013      	ands	r3, r2
 80007cc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	4313      	orrs	r3, r2
 80007d8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80007da:	693a      	ldr	r2, [r7, #16]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	697a      	ldr	r2, [r7, #20]
 80007e4:	4313      	orrs	r3, r2
 80007e6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	697a      	ldr	r2, [r7, #20]
 80007ee:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	68fa      	ldr	r2, [r7, #12]
 80007f6:	6812      	ldr	r2, [r2, #0]
 80007f8:	6811      	ldr	r1, [r2, #0]
 80007fa:	20c0      	movs	r0, #192	; 0xc0
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000802:	43d2      	mvns	r2, r2
 8000804:	400a      	ands	r2, r1
 8000806:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	2201      	movs	r2, #1
 800080c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	2200      	movs	r2, #0
 8000812:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	371c      	adds	r7, #28
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000824:	b480      	push	{r7}
 8000826:	b089      	sub	sp, #36	; 0x24
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
 800083e:	e177      	b.n	8000b30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000840:	2201      	movs	r2, #1
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	fa02 f303 	lsl.w	r3, r2, r3
 8000848:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	4013      	ands	r3, r2
 8000852:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000854:	693a      	ldr	r2, [r7, #16]
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	429a      	cmp	r2, r3
 800085a:	f040 8166 	bne.w	8000b2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d00b      	beq.n	800087e <HAL_GPIO_Init+0x5a>
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b02      	cmp	r3, #2
 800086c:	d007      	beq.n	800087e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000872:	2b11      	cmp	r3, #17
 8000874:	d003      	beq.n	800087e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	2b12      	cmp	r3, #18
 800087c:	d130      	bne.n	80008e0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	2203      	movs	r2, #3
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	43db      	mvns	r3, r3
 8000890:	69ba      	ldr	r2, [r7, #24]
 8000892:	4013      	ands	r3, r2
 8000894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	68da      	ldr	r2, [r3, #12]
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	69ba      	ldr	r2, [r7, #24]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	69ba      	ldr	r2, [r7, #24]
 80008ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008b4:	2201      	movs	r2, #1
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	43db      	mvns	r3, r3
 80008be:	69ba      	ldr	r2, [r7, #24]
 80008c0:	4013      	ands	r3, r2
 80008c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	091b      	lsrs	r3, r3, #4
 80008ca:	f003 0201 	and.w	r2, r3, #1
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	69ba      	ldr	r2, [r7, #24]
 80008de:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	2203      	movs	r2, #3
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	43db      	mvns	r3, r3
 80008f2:	69ba      	ldr	r2, [r7, #24]
 80008f4:	4013      	ands	r3, r2
 80008f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	689a      	ldr	r2, [r3, #8]
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	69ba      	ldr	r2, [r7, #24]
 8000906:	4313      	orrs	r3, r2
 8000908:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	2b02      	cmp	r3, #2
 8000916:	d003      	beq.n	8000920 <HAL_GPIO_Init+0xfc>
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	2b12      	cmp	r3, #18
 800091e:	d123      	bne.n	8000968 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	08da      	lsrs	r2, r3, #3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3208      	adds	r2, #8
 8000928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800092c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	f003 0307 	and.w	r3, r3, #7
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	220f      	movs	r2, #15
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	43db      	mvns	r3, r3
 800093e:	69ba      	ldr	r2, [r7, #24]
 8000940:	4013      	ands	r3, r2
 8000942:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	691a      	ldr	r2, [r3, #16]
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	4313      	orrs	r3, r2
 8000958:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	08da      	lsrs	r2, r3, #3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3208      	adds	r2, #8
 8000962:	69b9      	ldr	r1, [r7, #24]
 8000964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	2203      	movs	r2, #3
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	43db      	mvns	r3, r3
 800097a:	69ba      	ldr	r2, [r7, #24]
 800097c:	4013      	ands	r3, r2
 800097e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f003 0203 	and.w	r2, r3, #3
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	4313      	orrs	r3, r2
 8000994:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	f000 80c0 	beq.w	8000b2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4a65      	ldr	r2, [pc, #404]	; (8000b44 <HAL_GPIO_Init+0x320>)
 80009b0:	4b64      	ldr	r3, [pc, #400]	; (8000b44 <HAL_GPIO_Init+0x320>)
 80009b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ba:	4b62      	ldr	r3, [pc, #392]	; (8000b44 <HAL_GPIO_Init+0x320>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009c6:	4a60      	ldr	r2, [pc, #384]	; (8000b48 <HAL_GPIO_Init+0x324>)
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	089b      	lsrs	r3, r3, #2
 80009cc:	3302      	adds	r3, #2
 80009ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	f003 0303 	and.w	r3, r3, #3
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	220f      	movs	r2, #15
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43db      	mvns	r3, r3
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	4013      	ands	r3, r2
 80009e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a57      	ldr	r2, [pc, #348]	; (8000b4c <HAL_GPIO_Init+0x328>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d037      	beq.n	8000a62 <HAL_GPIO_Init+0x23e>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a56      	ldr	r2, [pc, #344]	; (8000b50 <HAL_GPIO_Init+0x32c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d031      	beq.n	8000a5e <HAL_GPIO_Init+0x23a>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a55      	ldr	r2, [pc, #340]	; (8000b54 <HAL_GPIO_Init+0x330>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d02b      	beq.n	8000a5a <HAL_GPIO_Init+0x236>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a54      	ldr	r2, [pc, #336]	; (8000b58 <HAL_GPIO_Init+0x334>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d025      	beq.n	8000a56 <HAL_GPIO_Init+0x232>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a53      	ldr	r2, [pc, #332]	; (8000b5c <HAL_GPIO_Init+0x338>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d01f      	beq.n	8000a52 <HAL_GPIO_Init+0x22e>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a52      	ldr	r2, [pc, #328]	; (8000b60 <HAL_GPIO_Init+0x33c>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d019      	beq.n	8000a4e <HAL_GPIO_Init+0x22a>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a51      	ldr	r2, [pc, #324]	; (8000b64 <HAL_GPIO_Init+0x340>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d013      	beq.n	8000a4a <HAL_GPIO_Init+0x226>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a50      	ldr	r2, [pc, #320]	; (8000b68 <HAL_GPIO_Init+0x344>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d00d      	beq.n	8000a46 <HAL_GPIO_Init+0x222>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a4f      	ldr	r2, [pc, #316]	; (8000b6c <HAL_GPIO_Init+0x348>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d007      	beq.n	8000a42 <HAL_GPIO_Init+0x21e>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a4e      	ldr	r2, [pc, #312]	; (8000b70 <HAL_GPIO_Init+0x34c>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d101      	bne.n	8000a3e <HAL_GPIO_Init+0x21a>
 8000a3a:	2309      	movs	r3, #9
 8000a3c:	e012      	b.n	8000a64 <HAL_GPIO_Init+0x240>
 8000a3e:	230a      	movs	r3, #10
 8000a40:	e010      	b.n	8000a64 <HAL_GPIO_Init+0x240>
 8000a42:	2308      	movs	r3, #8
 8000a44:	e00e      	b.n	8000a64 <HAL_GPIO_Init+0x240>
 8000a46:	2307      	movs	r3, #7
 8000a48:	e00c      	b.n	8000a64 <HAL_GPIO_Init+0x240>
 8000a4a:	2306      	movs	r3, #6
 8000a4c:	e00a      	b.n	8000a64 <HAL_GPIO_Init+0x240>
 8000a4e:	2305      	movs	r3, #5
 8000a50:	e008      	b.n	8000a64 <HAL_GPIO_Init+0x240>
 8000a52:	2304      	movs	r3, #4
 8000a54:	e006      	b.n	8000a64 <HAL_GPIO_Init+0x240>
 8000a56:	2303      	movs	r3, #3
 8000a58:	e004      	b.n	8000a64 <HAL_GPIO_Init+0x240>
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	e002      	b.n	8000a64 <HAL_GPIO_Init+0x240>
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e000      	b.n	8000a64 <HAL_GPIO_Init+0x240>
 8000a62:	2300      	movs	r3, #0
 8000a64:	69fa      	ldr	r2, [r7, #28]
 8000a66:	f002 0203 	and.w	r2, r2, #3
 8000a6a:	0092      	lsls	r2, r2, #2
 8000a6c:	4093      	lsls	r3, r2
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a74:	4934      	ldr	r1, [pc, #208]	; (8000b48 <HAL_GPIO_Init+0x324>)
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	089b      	lsrs	r3, r3, #2
 8000a7a:	3302      	adds	r3, #2
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a82:	4b3c      	ldr	r3, [pc, #240]	; (8000b74 <HAL_GPIO_Init+0x350>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d003      	beq.n	8000aa6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000a9e:	69ba      	ldr	r2, [r7, #24]
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000aa6:	4a33      	ldr	r2, [pc, #204]	; (8000b74 <HAL_GPIO_Init+0x350>)
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000aac:	4b31      	ldr	r3, [pc, #196]	; (8000b74 <HAL_GPIO_Init+0x350>)
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d003      	beq.n	8000ad0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ad0:	4a28      	ldr	r2, [pc, #160]	; (8000b74 <HAL_GPIO_Init+0x350>)
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ad6:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <HAL_GPIO_Init+0x350>)
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	69ba      	ldr	r2, [r7, #24]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d003      	beq.n	8000afa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000afa:	4a1e      	ldr	r2, [pc, #120]	; (8000b74 <HAL_GPIO_Init+0x350>)
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b00:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <HAL_GPIO_Init+0x350>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	69ba      	ldr	r2, [r7, #24]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d003      	beq.n	8000b24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000b1c:	69ba      	ldr	r2, [r7, #24]
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b24:	4a13      	ldr	r2, [pc, #76]	; (8000b74 <HAL_GPIO_Init+0x350>)
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	61fb      	str	r3, [r7, #28]
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	2b0f      	cmp	r3, #15
 8000b34:	f67f ae84 	bls.w	8000840 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b38:	bf00      	nop
 8000b3a:	3724      	adds	r7, #36	; 0x24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40013800 	.word	0x40013800
 8000b4c:	40020000 	.word	0x40020000
 8000b50:	40020400 	.word	0x40020400
 8000b54:	40020800 	.word	0x40020800
 8000b58:	40020c00 	.word	0x40020c00
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40021400 	.word	0x40021400
 8000b64:	40021800 	.word	0x40021800
 8000b68:	40021c00 	.word	0x40021c00
 8000b6c:	40022000 	.word	0x40022000
 8000b70:	40022400 	.word	0x40022400
 8000b74:	40013c00 	.word	0x40013c00

08000b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	807b      	strh	r3, [r7, #2]
 8000b84:	4613      	mov	r3, r2
 8000b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b88:	787b      	ldrb	r3, [r7, #1]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b8e:	887a      	ldrh	r2, [r7, #2]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b94:	e003      	b.n	8000b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b96:	887b      	ldrh	r3, [r7, #2]
 8000b98:	041a      	lsls	r2, r3, #16
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	619a      	str	r2, [r3, #24]
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bb8:	695a      	ldr	r2, [r3, #20]
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d006      	beq.n	8000bd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bc8:	88fb      	ldrh	r3, [r7, #6]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f004 ffb6 	bl	8005b3c <HAL_GPIO_EXTI_Callback>
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40013c00 	.word	0x40013c00

08000bdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d101      	bne.n	8000bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e25b      	b.n	80010a6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d075      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bfa:	4ba3      	ldr	r3, [pc, #652]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	f003 030c 	and.w	r3, r3, #12
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	d00c      	beq.n	8000c20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c06:	4ba0      	ldr	r3, [pc, #640]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c0e:	2b08      	cmp	r3, #8
 8000c10:	d112      	bne.n	8000c38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c12:	4b9d      	ldr	r3, [pc, #628]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c1e:	d10b      	bne.n	8000c38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c20:	4b99      	ldr	r3, [pc, #612]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d05b      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x108>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d157      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e236      	b.n	80010a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c40:	d106      	bne.n	8000c50 <HAL_RCC_OscConfig+0x74>
 8000c42:	4a91      	ldr	r2, [pc, #580]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000c44:	4b90      	ldr	r3, [pc, #576]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	e01d      	b.n	8000c8c <HAL_RCC_OscConfig+0xb0>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c58:	d10c      	bne.n	8000c74 <HAL_RCC_OscConfig+0x98>
 8000c5a:	4a8b      	ldr	r2, [pc, #556]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000c5c:	4b8a      	ldr	r3, [pc, #552]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	4a88      	ldr	r2, [pc, #544]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000c68:	4b87      	ldr	r3, [pc, #540]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	e00b      	b.n	8000c8c <HAL_RCC_OscConfig+0xb0>
 8000c74:	4a84      	ldr	r2, [pc, #528]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000c76:	4b84      	ldr	r3, [pc, #528]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4a81      	ldr	r2, [pc, #516]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000c82:	4b81      	ldr	r3, [pc, #516]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d013      	beq.n	8000cbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c94:	f7ff fc6a 	bl	800056c <HAL_GetTick>
 8000c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c9a:	e008      	b.n	8000cae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c9c:	f7ff fc66 	bl	800056c <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b64      	cmp	r3, #100	; 0x64
 8000ca8:	d901      	bls.n	8000cae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e1fb      	b.n	80010a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cae:	4b76      	ldr	r3, [pc, #472]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0f0      	beq.n	8000c9c <HAL_RCC_OscConfig+0xc0>
 8000cba:	e014      	b.n	8000ce6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cbc:	f7ff fc56 	bl	800056c <HAL_GetTick>
 8000cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cc2:	e008      	b.n	8000cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cc4:	f7ff fc52 	bl	800056c <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	2b64      	cmp	r3, #100	; 0x64
 8000cd0:	d901      	bls.n	8000cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	e1e7      	b.n	80010a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cd6:	4b6c      	ldr	r3, [pc, #432]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1f0      	bne.n	8000cc4 <HAL_RCC_OscConfig+0xe8>
 8000ce2:	e000      	b.n	8000ce6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d063      	beq.n	8000dba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cf2:	4b65      	ldr	r3, [pc, #404]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	f003 030c 	and.w	r3, r3, #12
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d00b      	beq.n	8000d16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cfe:	4b62      	ldr	r3, [pc, #392]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d06:	2b08      	cmp	r3, #8
 8000d08:	d11c      	bne.n	8000d44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d0a:	4b5f      	ldr	r3, [pc, #380]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d116      	bne.n	8000d44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d16:	4b5c      	ldr	r3, [pc, #368]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d005      	beq.n	8000d2e <HAL_RCC_OscConfig+0x152>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d001      	beq.n	8000d2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e1bb      	b.n	80010a6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d2e:	4956      	ldr	r1, [pc, #344]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000d30:	4b55      	ldr	r3, [pc, #340]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	691b      	ldr	r3, [r3, #16]
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d42:	e03a      	b.n	8000dba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d020      	beq.n	8000d8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d4c:	4b4f      	ldr	r3, [pc, #316]	; (8000e8c <HAL_RCC_OscConfig+0x2b0>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d52:	f7ff fc0b 	bl	800056c <HAL_GetTick>
 8000d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d58:	e008      	b.n	8000d6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d5a:	f7ff fc07 	bl	800056c <HAL_GetTick>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d901      	bls.n	8000d6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	e19c      	b.n	80010a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d6c:	4b46      	ldr	r3, [pc, #280]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d0f0      	beq.n	8000d5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d78:	4943      	ldr	r1, [pc, #268]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000d7a:	4b43      	ldr	r3, [pc, #268]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	691b      	ldr	r3, [r3, #16]
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	600b      	str	r3, [r1, #0]
 8000d8c:	e015      	b.n	8000dba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d8e:	4b3f      	ldr	r3, [pc, #252]	; (8000e8c <HAL_RCC_OscConfig+0x2b0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d94:	f7ff fbea 	bl	800056c <HAL_GetTick>
 8000d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d9a:	e008      	b.n	8000dae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d9c:	f7ff fbe6 	bl	800056c <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d901      	bls.n	8000dae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e17b      	b.n	80010a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dae:	4b36      	ldr	r3, [pc, #216]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1f0      	bne.n	8000d9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0308 	and.w	r3, r3, #8
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d030      	beq.n	8000e28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d016      	beq.n	8000dfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dce:	4b30      	ldr	r3, [pc, #192]	; (8000e90 <HAL_RCC_OscConfig+0x2b4>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dd4:	f7ff fbca 	bl	800056c <HAL_GetTick>
 8000dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dda:	e008      	b.n	8000dee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ddc:	f7ff fbc6 	bl	800056c <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d901      	bls.n	8000dee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e15b      	b.n	80010a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dee:	4b26      	ldr	r3, [pc, #152]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d0f0      	beq.n	8000ddc <HAL_RCC_OscConfig+0x200>
 8000dfa:	e015      	b.n	8000e28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dfc:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <HAL_RCC_OscConfig+0x2b4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e02:	f7ff fbb3 	bl	800056c <HAL_GetTick>
 8000e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e08:	e008      	b.n	8000e1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e0a:	f7ff fbaf 	bl	800056c <HAL_GetTick>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d901      	bls.n	8000e1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e144      	b.n	80010a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1f0      	bne.n	8000e0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f000 80a0 	beq.w	8000f76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e36:	2300      	movs	r3, #0
 8000e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d10f      	bne.n	8000e66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	4a0f      	ldr	r2, [pc, #60]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e54:	6413      	str	r3, [r2, #64]	; 0x40
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e62:	2301      	movs	r3, #1
 8000e64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <HAL_RCC_OscConfig+0x2b8>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d121      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e72:	4a08      	ldr	r2, [pc, #32]	; (8000e94 <HAL_RCC_OscConfig+0x2b8>)
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <HAL_RCC_OscConfig+0x2b8>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e7e:	f7ff fb75 	bl	800056c <HAL_GetTick>
 8000e82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e84:	e011      	b.n	8000eaa <HAL_RCC_OscConfig+0x2ce>
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	42470000 	.word	0x42470000
 8000e90:	42470e80 	.word	0x42470e80
 8000e94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e98:	f7ff fb68 	bl	800056c <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d901      	bls.n	8000eaa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e0fd      	b.n	80010a6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eaa:	4b81      	ldr	r3, [pc, #516]	; (80010b0 <HAL_RCC_OscConfig+0x4d4>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0f0      	beq.n	8000e98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d106      	bne.n	8000ecc <HAL_RCC_OscConfig+0x2f0>
 8000ebe:	4a7d      	ldr	r2, [pc, #500]	; (80010b4 <HAL_RCC_OscConfig+0x4d8>)
 8000ec0:	4b7c      	ldr	r3, [pc, #496]	; (80010b4 <HAL_RCC_OscConfig+0x4d8>)
 8000ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8000eca:	e01c      	b.n	8000f06 <HAL_RCC_OscConfig+0x32a>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	2b05      	cmp	r3, #5
 8000ed2:	d10c      	bne.n	8000eee <HAL_RCC_OscConfig+0x312>
 8000ed4:	4a77      	ldr	r2, [pc, #476]	; (80010b4 <HAL_RCC_OscConfig+0x4d8>)
 8000ed6:	4b77      	ldr	r3, [pc, #476]	; (80010b4 <HAL_RCC_OscConfig+0x4d8>)
 8000ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eda:	f043 0304 	orr.w	r3, r3, #4
 8000ede:	6713      	str	r3, [r2, #112]	; 0x70
 8000ee0:	4a74      	ldr	r2, [pc, #464]	; (80010b4 <HAL_RCC_OscConfig+0x4d8>)
 8000ee2:	4b74      	ldr	r3, [pc, #464]	; (80010b4 <HAL_RCC_OscConfig+0x4d8>)
 8000ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	6713      	str	r3, [r2, #112]	; 0x70
 8000eec:	e00b      	b.n	8000f06 <HAL_RCC_OscConfig+0x32a>
 8000eee:	4a71      	ldr	r2, [pc, #452]	; (80010b4 <HAL_RCC_OscConfig+0x4d8>)
 8000ef0:	4b70      	ldr	r3, [pc, #448]	; (80010b4 <HAL_RCC_OscConfig+0x4d8>)
 8000ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ef4:	f023 0301 	bic.w	r3, r3, #1
 8000ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8000efa:	4a6e      	ldr	r2, [pc, #440]	; (80010b4 <HAL_RCC_OscConfig+0x4d8>)
 8000efc:	4b6d      	ldr	r3, [pc, #436]	; (80010b4 <HAL_RCC_OscConfig+0x4d8>)
 8000efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f00:	f023 0304 	bic.w	r3, r3, #4
 8000f04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d015      	beq.n	8000f3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f0e:	f7ff fb2d 	bl	800056c <HAL_GetTick>
 8000f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f14:	e00a      	b.n	8000f2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f16:	f7ff fb29 	bl	800056c <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d901      	bls.n	8000f2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e0bc      	b.n	80010a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f2c:	4b61      	ldr	r3, [pc, #388]	; (80010b4 <HAL_RCC_OscConfig+0x4d8>)
 8000f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d0ee      	beq.n	8000f16 <HAL_RCC_OscConfig+0x33a>
 8000f38:	e014      	b.n	8000f64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f3a:	f7ff fb17 	bl	800056c <HAL_GetTick>
 8000f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f40:	e00a      	b.n	8000f58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f42:	f7ff fb13 	bl	800056c <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d901      	bls.n	8000f58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000f54:	2303      	movs	r3, #3
 8000f56:	e0a6      	b.n	80010a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f58:	4b56      	ldr	r3, [pc, #344]	; (80010b4 <HAL_RCC_OscConfig+0x4d8>)
 8000f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1ee      	bne.n	8000f42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f64:	7dfb      	ldrb	r3, [r7, #23]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d105      	bne.n	8000f76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f6a:	4a52      	ldr	r2, [pc, #328]	; (80010b4 <HAL_RCC_OscConfig+0x4d8>)
 8000f6c:	4b51      	ldr	r3, [pc, #324]	; (80010b4 <HAL_RCC_OscConfig+0x4d8>)
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 8092 	beq.w	80010a4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f80:	4b4c      	ldr	r3, [pc, #304]	; (80010b4 <HAL_RCC_OscConfig+0x4d8>)
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f003 030c 	and.w	r3, r3, #12
 8000f88:	2b08      	cmp	r3, #8
 8000f8a:	d05c      	beq.n	8001046 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d141      	bne.n	8001018 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f94:	4b48      	ldr	r3, [pc, #288]	; (80010b8 <HAL_RCC_OscConfig+0x4dc>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9a:	f7ff fae7 	bl	800056c <HAL_GetTick>
 8000f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fa2:	f7ff fae3 	bl	800056c <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e078      	b.n	80010a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fb4:	4b3f      	ldr	r3, [pc, #252]	; (80010b4 <HAL_RCC_OscConfig+0x4d8>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1f0      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000fc0:	493c      	ldr	r1, [pc, #240]	; (80010b4 <HAL_RCC_OscConfig+0x4d8>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69da      	ldr	r2, [r3, #28]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a1b      	ldr	r3, [r3, #32]
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd0:	019b      	lsls	r3, r3, #6
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd8:	085b      	lsrs	r3, r3, #1
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	041b      	lsls	r3, r3, #16
 8000fde:	431a      	orrs	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe4:	061b      	lsls	r3, r3, #24
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fea:	4b33      	ldr	r3, [pc, #204]	; (80010b8 <HAL_RCC_OscConfig+0x4dc>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fabc 	bl	800056c <HAL_GetTick>
 8000ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ff8:	f7ff fab8 	bl	800056c <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e04d      	b.n	80010a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800100a:	4b2a      	ldr	r3, [pc, #168]	; (80010b4 <HAL_RCC_OscConfig+0x4d8>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0f0      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x41c>
 8001016:	e045      	b.n	80010a4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001018:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <HAL_RCC_OscConfig+0x4dc>)
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101e:	f7ff faa5 	bl	800056c <HAL_GetTick>
 8001022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001024:	e008      	b.n	8001038 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001026:	f7ff faa1 	bl	800056c <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d901      	bls.n	8001038 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e036      	b.n	80010a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001038:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <HAL_RCC_OscConfig+0x4d8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1f0      	bne.n	8001026 <HAL_RCC_OscConfig+0x44a>
 8001044:	e02e      	b.n	80010a4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d101      	bne.n	8001052 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e029      	b.n	80010a6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <HAL_RCC_OscConfig+0x4d8>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	429a      	cmp	r2, r3
 8001064:	d11c      	bne.n	80010a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001070:	429a      	cmp	r2, r3
 8001072:	d115      	bne.n	80010a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001074:	68fa      	ldr	r2, [r7, #12]
 8001076:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800107a:	4013      	ands	r3, r2
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001080:	4293      	cmp	r3, r2
 8001082:	d10d      	bne.n	80010a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800108e:	429a      	cmp	r2, r3
 8001090:	d106      	bne.n	80010a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800109c:	429a      	cmp	r2, r3
 800109e:	d001      	beq.n	80010a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e000      	b.n	80010a6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40007000 	.word	0x40007000
 80010b4:	40023800 	.word	0x40023800
 80010b8:	42470060 	.word	0x42470060

080010bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e0cc      	b.n	800126a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010d0:	4b68      	ldr	r3, [pc, #416]	; (8001274 <HAL_RCC_ClockConfig+0x1b8>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 020f 	and.w	r2, r3, #15
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d20c      	bcs.n	80010f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010de:	4b65      	ldr	r3, [pc, #404]	; (8001274 <HAL_RCC_ClockConfig+0x1b8>)
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010e6:	4b63      	ldr	r3, [pc, #396]	; (8001274 <HAL_RCC_ClockConfig+0x1b8>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 020f 	and.w	r2, r3, #15
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d001      	beq.n	80010f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e0b8      	b.n	800126a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d020      	beq.n	8001146 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	2b00      	cmp	r3, #0
 800110e:	d005      	beq.n	800111c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001110:	4a59      	ldr	r2, [pc, #356]	; (8001278 <HAL_RCC_ClockConfig+0x1bc>)
 8001112:	4b59      	ldr	r3, [pc, #356]	; (8001278 <HAL_RCC_ClockConfig+0x1bc>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800111a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0308 	and.w	r3, r3, #8
 8001124:	2b00      	cmp	r3, #0
 8001126:	d005      	beq.n	8001134 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001128:	4a53      	ldr	r2, [pc, #332]	; (8001278 <HAL_RCC_ClockConfig+0x1bc>)
 800112a:	4b53      	ldr	r3, [pc, #332]	; (8001278 <HAL_RCC_ClockConfig+0x1bc>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001132:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001134:	4950      	ldr	r1, [pc, #320]	; (8001278 <HAL_RCC_ClockConfig+0x1bc>)
 8001136:	4b50      	ldr	r3, [pc, #320]	; (8001278 <HAL_RCC_ClockConfig+0x1bc>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	4313      	orrs	r3, r2
 8001144:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b00      	cmp	r3, #0
 8001150:	d044      	beq.n	80011dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d107      	bne.n	800116a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115a:	4b47      	ldr	r3, [pc, #284]	; (8001278 <HAL_RCC_ClockConfig+0x1bc>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d119      	bne.n	800119a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e07f      	b.n	800126a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2b02      	cmp	r3, #2
 8001170:	d003      	beq.n	800117a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001176:	2b03      	cmp	r3, #3
 8001178:	d107      	bne.n	800118a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800117a:	4b3f      	ldr	r3, [pc, #252]	; (8001278 <HAL_RCC_ClockConfig+0x1bc>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d109      	bne.n	800119a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e06f      	b.n	800126a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800118a:	4b3b      	ldr	r3, [pc, #236]	; (8001278 <HAL_RCC_ClockConfig+0x1bc>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e067      	b.n	800126a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800119a:	4937      	ldr	r1, [pc, #220]	; (8001278 <HAL_RCC_ClockConfig+0x1bc>)
 800119c:	4b36      	ldr	r3, [pc, #216]	; (8001278 <HAL_RCC_ClockConfig+0x1bc>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f023 0203 	bic.w	r2, r3, #3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011ac:	f7ff f9de 	bl	800056c <HAL_GetTick>
 80011b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011b2:	e00a      	b.n	80011ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011b4:	f7ff f9da 	bl	800056c <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e04f      	b.n	800126a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ca:	4b2b      	ldr	r3, [pc, #172]	; (8001278 <HAL_RCC_ClockConfig+0x1bc>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 020c 	and.w	r2, r3, #12
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	429a      	cmp	r2, r3
 80011da:	d1eb      	bne.n	80011b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011dc:	4b25      	ldr	r3, [pc, #148]	; (8001274 <HAL_RCC_ClockConfig+0x1b8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 020f 	and.w	r2, r3, #15
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d90c      	bls.n	8001204 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ea:	4b22      	ldr	r3, [pc, #136]	; (8001274 <HAL_RCC_ClockConfig+0x1b8>)
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011f2:	4b20      	ldr	r3, [pc, #128]	; (8001274 <HAL_RCC_ClockConfig+0x1b8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 020f 	and.w	r2, r3, #15
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d001      	beq.n	8001204 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e032      	b.n	800126a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	2b00      	cmp	r3, #0
 800120e:	d008      	beq.n	8001222 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001210:	4919      	ldr	r1, [pc, #100]	; (8001278 <HAL_RCC_ClockConfig+0x1bc>)
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <HAL_RCC_ClockConfig+0x1bc>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	4313      	orrs	r3, r2
 8001220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	2b00      	cmp	r3, #0
 800122c:	d009      	beq.n	8001242 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800122e:	4912      	ldr	r1, [pc, #72]	; (8001278 <HAL_RCC_ClockConfig+0x1bc>)
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <HAL_RCC_ClockConfig+0x1bc>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	4313      	orrs	r3, r2
 8001240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001242:	f000 f821 	bl	8001288 <HAL_RCC_GetSysClockFreq>
 8001246:	4601      	mov	r1, r0
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <HAL_RCC_ClockConfig+0x1bc>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	091b      	lsrs	r3, r3, #4
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 8001254:	5cd3      	ldrb	r3, [r2, r3]
 8001256:	fa21 f303 	lsr.w	r3, r1, r3
 800125a:	4a09      	ldr	r2, [pc, #36]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800125c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <HAL_RCC_ClockConfig+0x1c8>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f004 fe34 	bl	8005ed0 <HAL_InitTick>

  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40023c00 	.word	0x40023c00
 8001278:	40023800 	.word	0x40023800
 800127c:	08006204 	.word	0x08006204
 8001280:	2000000c 	.word	0x2000000c
 8001284:	20000000 	.word	0x20000000

08001288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800128c:	b08f      	sub	sp, #60	; 0x3c
 800128e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001290:	2300      	movs	r3, #0
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001294:	2300      	movs	r3, #0
 8001296:	637b      	str	r3, [r7, #52]	; 0x34
 8001298:	2300      	movs	r3, #0
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 800129c:	2300      	movs	r3, #0
 800129e:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012a0:	4b62      	ldr	r3, [pc, #392]	; (800142c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 030c 	and.w	r3, r3, #12
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	d007      	beq.n	80012bc <HAL_RCC_GetSysClockFreq+0x34>
 80012ac:	2b08      	cmp	r3, #8
 80012ae:	d008      	beq.n	80012c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f040 80b2 	bne.w	800141a <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012b6:	4b5e      	ldr	r3, [pc, #376]	; (8001430 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80012b8:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 80012ba:	e0b1      	b.n	8001420 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012bc:	4b5d      	ldr	r3, [pc, #372]	; (8001434 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80012be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80012c0:	e0ae      	b.n	8001420 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012c2:	4b5a      	ldr	r3, [pc, #360]	; (800142c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012cc:	4b57      	ldr	r3, [pc, #348]	; (800142c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d04e      	beq.n	8001376 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012d8:	4b54      	ldr	r3, [pc, #336]	; (800142c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	099b      	lsrs	r3, r3, #6
 80012de:	f04f 0400 	mov.w	r4, #0
 80012e2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	ea01 0103 	and.w	r1, r1, r3
 80012ee:	ea02 0204 	and.w	r2, r2, r4
 80012f2:	460b      	mov	r3, r1
 80012f4:	4614      	mov	r4, r2
 80012f6:	0160      	lsls	r0, r4, #5
 80012f8:	6278      	str	r0, [r7, #36]	; 0x24
 80012fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012fc:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001300:	6278      	str	r0, [r7, #36]	; 0x24
 8001302:	015b      	lsls	r3, r3, #5
 8001304:	623b      	str	r3, [r7, #32]
 8001306:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800130a:	1a5b      	subs	r3, r3, r1
 800130c:	eb64 0402 	sbc.w	r4, r4, r2
 8001310:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001314:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001318:	ea4f 1883 	mov.w	r8, r3, lsl #6
 800131c:	ebb8 0803 	subs.w	r8, r8, r3
 8001320:	eb69 0904 	sbc.w	r9, r9, r4
 8001324:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001328:	61fb      	str	r3, [r7, #28]
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001330:	61fb      	str	r3, [r7, #28]
 8001332:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001336:	61bb      	str	r3, [r7, #24]
 8001338:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800133c:	eb18 0801 	adds.w	r8, r8, r1
 8001340:	eb49 0902 	adc.w	r9, r9, r2
 8001344:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800135c:	4640      	mov	r0, r8
 800135e:	4649      	mov	r1, r9
 8001360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001362:	f04f 0400 	mov.w	r4, #0
 8001366:	461a      	mov	r2, r3
 8001368:	4623      	mov	r3, r4
 800136a:	f7fe ff41 	bl	80001f0 <__aeabi_uldivmod>
 800136e:	4603      	mov	r3, r0
 8001370:	460c      	mov	r4, r1
 8001372:	637b      	str	r3, [r7, #52]	; 0x34
 8001374:	e043      	b.n	80013fe <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001376:	4b2d      	ldr	r3, [pc, #180]	; (800142c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	099b      	lsrs	r3, r3, #6
 800137c:	f04f 0400 	mov.w	r4, #0
 8001380:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	ea01 0103 	and.w	r1, r1, r3
 800138c:	ea02 0204 	and.w	r2, r2, r4
 8001390:	460b      	mov	r3, r1
 8001392:	4614      	mov	r4, r2
 8001394:	0160      	lsls	r0, r4, #5
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	015b      	lsls	r3, r3, #5
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80013a8:	1a5b      	subs	r3, r3, r1
 80013aa:	eb64 0402 	sbc.w	r4, r4, r2
 80013ae:	01a6      	lsls	r6, r4, #6
 80013b0:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80013b4:	019d      	lsls	r5, r3, #6
 80013b6:	1aed      	subs	r5, r5, r3
 80013b8:	eb66 0604 	sbc.w	r6, r6, r4
 80013bc:	00f3      	lsls	r3, r6, #3
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	00eb      	lsls	r3, r5, #3
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	e897 0060 	ldmia.w	r7, {r5, r6}
 80013d0:	186d      	adds	r5, r5, r1
 80013d2:	eb46 0602 	adc.w	r6, r6, r2
 80013d6:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 80013da:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 80013de:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 80013e2:	4655      	mov	r5, sl
 80013e4:	465e      	mov	r6, fp
 80013e6:	4628      	mov	r0, r5
 80013e8:	4631      	mov	r1, r6
 80013ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ec:	f04f 0400 	mov.w	r4, #0
 80013f0:	461a      	mov	r2, r3
 80013f2:	4623      	mov	r3, r4
 80013f4:	f7fe fefc 	bl	80001f0 <__aeabi_uldivmod>
 80013f8:	4603      	mov	r3, r0
 80013fa:	460c      	mov	r4, r1
 80013fc:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	0c1b      	lsrs	r3, r3, #16
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	3301      	adds	r3, #1
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 800140e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001412:	fbb2 f3f3 	udiv	r3, r2, r3
 8001416:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001418:	e002      	b.n	8001420 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800141a:	4b05      	ldr	r3, [pc, #20]	; (8001430 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800141c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800141e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001422:	4618      	mov	r0, r3
 8001424:	373c      	adds	r7, #60	; 0x3c
 8001426:	46bd      	mov	sp, r7
 8001428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800142c:	40023800 	.word	0x40023800
 8001430:	00f42400 	.word	0x00f42400
 8001434:	007a1200 	.word	0x007a1200

08001438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <HAL_RCC_GetHCLKFreq+0x14>)
 800143e:	681b      	ldr	r3, [r3, #0]
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	2000000c 	.word	0x2000000c

08001450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001454:	f7ff fff0 	bl	8001438 <HAL_RCC_GetHCLKFreq>
 8001458:	4601      	mov	r1, r0
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_RCC_GetPCLK1Freq+0x20>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	0a9b      	lsrs	r3, r3, #10
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	4a03      	ldr	r2, [pc, #12]	; (8001474 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001466:	5cd3      	ldrb	r3, [r2, r3]
 8001468:	fa21 f303 	lsr.w	r3, r1, r3
}
 800146c:	4618      	mov	r0, r3
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40023800 	.word	0x40023800
 8001474:	08006214 	.word	0x08006214

08001478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800147c:	f7ff ffdc 	bl	8001438 <HAL_RCC_GetHCLKFreq>
 8001480:	4601      	mov	r1, r0
 8001482:	4b05      	ldr	r3, [pc, #20]	; (8001498 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	0b5b      	lsrs	r3, r3, #13
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	4a03      	ldr	r2, [pc, #12]	; (800149c <HAL_RCC_GetPCLK2Freq+0x24>)
 800148e:	5cd3      	ldrb	r3, [r2, r3]
 8001490:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001494:	4618      	mov	r0, r3
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40023800 	.word	0x40023800
 800149c:	08006214 	.word	0x08006214

080014a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	220f      	movs	r2, #15
 80014ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_RCC_GetClockConfig+0x5c>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 0203 	and.w	r2, r3, #3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_RCC_GetClockConfig+0x5c>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <HAL_RCC_GetClockConfig+0x5c>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_RCC_GetClockConfig+0x5c>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	08db      	lsrs	r3, r3, #3
 80014da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014e2:	4b07      	ldr	r3, [pc, #28]	; (8001500 <HAL_RCC_GetClockConfig+0x60>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 020f 	and.w	r2, r3, #15
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	601a      	str	r2, [r3, #0]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	40023c00 	.word	0x40023c00

08001504 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e01d      	b.n	8001552 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d106      	bne.n	8001530 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f815 	bl	800155a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2202      	movs	r2, #2
 8001534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3304      	adds	r3, #4
 8001540:	4619      	mov	r1, r3
 8001542:	4610      	mov	r0, r2
 8001544:	f000 f968 	bl	8001818 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800156e:	b480      	push	{r7}
 8001570:	b085      	sub	sp, #20
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6812      	ldr	r2, [r2, #0]
 800157e:	68d2      	ldr	r2, [r2, #12]
 8001580:	f042 0201 	orr.w	r2, r2, #1
 8001584:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2b06      	cmp	r3, #6
 8001596:	d007      	beq.n	80015a8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6812      	ldr	r2, [r2, #0]
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	f042 0201 	orr.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d122      	bne.n	8001612 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d11b      	bne.n	8001612 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f06f 0202 	mvn.w	r2, #2
 80015e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 f8ee 	bl	80017da <HAL_TIM_IC_CaptureCallback>
 80015fe:	e005      	b.n	800160c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f000 f8e0 	bl	80017c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 f8f1 	bl	80017ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b04      	cmp	r3, #4
 800161e:	d122      	bne.n	8001666 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	2b04      	cmp	r3, #4
 800162c:	d11b      	bne.n	8001666 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f06f 0204 	mvn.w	r2, #4
 8001636:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2202      	movs	r2, #2
 800163c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 f8c4 	bl	80017da <HAL_TIM_IC_CaptureCallback>
 8001652:	e005      	b.n	8001660 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 f8b6 	bl	80017c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 f8c7 	bl	80017ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	2b08      	cmp	r3, #8
 8001672:	d122      	bne.n	80016ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	2b08      	cmp	r3, #8
 8001680:	d11b      	bne.n	80016ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f06f 0208 	mvn.w	r2, #8
 800168a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2204      	movs	r2, #4
 8001690:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 f89a 	bl	80017da <HAL_TIM_IC_CaptureCallback>
 80016a6:	e005      	b.n	80016b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 f88c 	bl	80017c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 f89d 	bl	80017ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	f003 0310 	and.w	r3, r3, #16
 80016c4:	2b10      	cmp	r3, #16
 80016c6:	d122      	bne.n	800170e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	f003 0310 	and.w	r3, r3, #16
 80016d2:	2b10      	cmp	r3, #16
 80016d4:	d11b      	bne.n	800170e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f06f 0210 	mvn.w	r2, #16
 80016de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2208      	movs	r2, #8
 80016e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 f870 	bl	80017da <HAL_TIM_IC_CaptureCallback>
 80016fa:	e005      	b.n	8001708 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 f862 	bl	80017c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f873 	bl	80017ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b01      	cmp	r3, #1
 800171a:	d10e      	bne.n	800173a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b01      	cmp	r3, #1
 8001728:	d107      	bne.n	800173a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f06f 0201 	mvn.w	r2, #1
 8001732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f004 fac1 	bl	8005cbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001744:	2b80      	cmp	r3, #128	; 0x80
 8001746:	d10e      	bne.n	8001766 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001752:	2b80      	cmp	r3, #128	; 0x80
 8001754:	d107      	bne.n	8001766 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800175e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f000 f903 	bl	800196c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001770:	2b40      	cmp	r3, #64	; 0x40
 8001772:	d10e      	bne.n	8001792 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800177e:	2b40      	cmp	r3, #64	; 0x40
 8001780:	d107      	bne.n	8001792 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800178a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 f838 	bl	8001802 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	f003 0320 	and.w	r3, r3, #32
 800179c:	2b20      	cmp	r3, #32
 800179e:	d10e      	bne.n	80017be <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	f003 0320 	and.w	r3, r3, #32
 80017aa:	2b20      	cmp	r3, #32
 80017ac:	d107      	bne.n	80017be <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f06f 0220 	mvn.w	r2, #32
 80017b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 f8cd 	bl	8001958 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
	...

08001818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a40      	ldr	r2, [pc, #256]	; (800192c <TIM_Base_SetConfig+0x114>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d013      	beq.n	8001858 <TIM_Base_SetConfig+0x40>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001836:	d00f      	beq.n	8001858 <TIM_Base_SetConfig+0x40>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a3d      	ldr	r2, [pc, #244]	; (8001930 <TIM_Base_SetConfig+0x118>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d00b      	beq.n	8001858 <TIM_Base_SetConfig+0x40>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a3c      	ldr	r2, [pc, #240]	; (8001934 <TIM_Base_SetConfig+0x11c>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d007      	beq.n	8001858 <TIM_Base_SetConfig+0x40>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a3b      	ldr	r2, [pc, #236]	; (8001938 <TIM_Base_SetConfig+0x120>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d003      	beq.n	8001858 <TIM_Base_SetConfig+0x40>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a3a      	ldr	r2, [pc, #232]	; (800193c <TIM_Base_SetConfig+0x124>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d108      	bne.n	800186a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800185e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4313      	orrs	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a2f      	ldr	r2, [pc, #188]	; (800192c <TIM_Base_SetConfig+0x114>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d02b      	beq.n	80018ca <TIM_Base_SetConfig+0xb2>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001878:	d027      	beq.n	80018ca <TIM_Base_SetConfig+0xb2>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a2c      	ldr	r2, [pc, #176]	; (8001930 <TIM_Base_SetConfig+0x118>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d023      	beq.n	80018ca <TIM_Base_SetConfig+0xb2>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a2b      	ldr	r2, [pc, #172]	; (8001934 <TIM_Base_SetConfig+0x11c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d01f      	beq.n	80018ca <TIM_Base_SetConfig+0xb2>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a2a      	ldr	r2, [pc, #168]	; (8001938 <TIM_Base_SetConfig+0x120>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d01b      	beq.n	80018ca <TIM_Base_SetConfig+0xb2>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a29      	ldr	r2, [pc, #164]	; (800193c <TIM_Base_SetConfig+0x124>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d017      	beq.n	80018ca <TIM_Base_SetConfig+0xb2>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a28      	ldr	r2, [pc, #160]	; (8001940 <TIM_Base_SetConfig+0x128>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d013      	beq.n	80018ca <TIM_Base_SetConfig+0xb2>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a27      	ldr	r2, [pc, #156]	; (8001944 <TIM_Base_SetConfig+0x12c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d00f      	beq.n	80018ca <TIM_Base_SetConfig+0xb2>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a26      	ldr	r2, [pc, #152]	; (8001948 <TIM_Base_SetConfig+0x130>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d00b      	beq.n	80018ca <TIM_Base_SetConfig+0xb2>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a25      	ldr	r2, [pc, #148]	; (800194c <TIM_Base_SetConfig+0x134>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d007      	beq.n	80018ca <TIM_Base_SetConfig+0xb2>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a24      	ldr	r2, [pc, #144]	; (8001950 <TIM_Base_SetConfig+0x138>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d003      	beq.n	80018ca <TIM_Base_SetConfig+0xb2>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a23      	ldr	r2, [pc, #140]	; (8001954 <TIM_Base_SetConfig+0x13c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d108      	bne.n	80018dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	4313      	orrs	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a0a      	ldr	r2, [pc, #40]	; (800192c <TIM_Base_SetConfig+0x114>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d003      	beq.n	8001910 <TIM_Base_SetConfig+0xf8>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a0c      	ldr	r2, [pc, #48]	; (800193c <TIM_Base_SetConfig+0x124>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d103      	bne.n	8001918 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	691a      	ldr	r2, [r3, #16]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	615a      	str	r2, [r3, #20]
}
 800191e:	bf00      	nop
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40010000 	.word	0x40010000
 8001930:	40000400 	.word	0x40000400
 8001934:	40000800 	.word	0x40000800
 8001938:	40000c00 	.word	0x40000c00
 800193c:	40010400 	.word	0x40010400
 8001940:	40014000 	.word	0x40014000
 8001944:	40014400 	.word	0x40014400
 8001948:	40014800 	.word	0x40014800
 800194c:	40001800 	.word	0x40001800
 8001950:	40001c00 	.word	0x40001c00
 8001954:	40002000 	.word	0x40002000

08001958 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e03f      	b.n	8001a12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d106      	bne.n	80019ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f004 fa12 	bl	8005dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2224      	movs	r2, #36	; 0x24
 80019b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	68d2      	ldr	r2, [r2, #12]
 80019be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f9b1 	bl	8001d2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	6912      	ldr	r2, [r2, #16]
 80019d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	6952      	ldr	r2, [r2, #20]
 80019e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6812      	ldr	r2, [r2, #0]
 80019f2:	68d2      	ldr	r2, [r2, #12]
 80019f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2220      	movs	r2, #32
 8001a04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b088      	sub	sp, #32
 8001a1e:	af02      	add	r7, sp, #8
 8001a20:	60f8      	str	r0, [r7, #12]
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	4613      	mov	r3, r2
 8001a28:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b20      	cmp	r3, #32
 8001a38:	f040 8082 	bne.w	8001b40 <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d002      	beq.n	8001a48 <HAL_UART_Transmit+0x2e>
 8001a42:	88fb      	ldrh	r3, [r7, #6]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e07a      	b.n	8001b42 <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_UART_Transmit+0x40>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e073      	b.n	8001b42 <HAL_UART_Transmit+0x128>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2221      	movs	r2, #33	; 0x21
 8001a6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001a70:	f7fe fd7c 	bl	800056c <HAL_GetTick>
 8001a74:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	88fa      	ldrh	r2, [r7, #6]
 8001a7a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	88fa      	ldrh	r2, [r7, #6]
 8001a80:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001a8a:	e041      	b.n	8001b10 <HAL_UART_Transmit+0xf6>
    {
      huart->TxXferCount--;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	3b01      	subs	r3, #1
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aa2:	d121      	bne.n	8001ae8 <HAL_UART_Transmit+0xce>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2180      	movs	r1, #128	; 0x80
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f000 f8f1 	bl	8001c96 <UART_WaitOnFlagUntilTimeout>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e041      	b.n	8001b42 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t *) pData;
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	8812      	ldrh	r2, [r2, #0]
 8001aca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ace:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d103      	bne.n	8001ae0 <HAL_UART_Transmit+0xc6>
        {
          pData += 2U;
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	3302      	adds	r3, #2
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	e017      	b.n	8001b10 <HAL_UART_Transmit+0xf6>
        }
        else
        {
          pData += 1U;
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	e013      	b.n	8001b10 <HAL_UART_Transmit+0xf6>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	2200      	movs	r2, #0
 8001af0:	2180      	movs	r1, #128	; 0x80
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f000 f8cf 	bl	8001c96 <UART_WaitOnFlagUntilTimeout>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_UART_Transmit+0xe8>
        {
          return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e01f      	b.n	8001b42 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	1c59      	adds	r1, r3, #1
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	6053      	str	r3, [r2, #4]
    while (huart->TxXferCount > 0U)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1b8      	bne.n	8001a8c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	2200      	movs	r2, #0
 8001b22:	2140      	movs	r1, #64	; 0x40
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 f8b6 	bl	8001c96 <UART_WaitOnFlagUntilTimeout>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_UART_Transmit+0x11a>
    {
      return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e006      	b.n	8001b42 <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	e000      	b.n	8001b42 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8001b40:	2302      	movs	r3, #2
  }
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b088      	sub	sp, #32
 8001b4e:	af02      	add	r7, sp, #8
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	603b      	str	r3, [r7, #0]
 8001b56:	4613      	mov	r3, r2
 8001b58:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b20      	cmp	r3, #32
 8001b68:	f040 8090 	bne.w	8001c8c <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d002      	beq.n	8001b78 <HAL_UART_Receive+0x2e>
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e088      	b.n	8001c8e <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d101      	bne.n	8001b8a <HAL_UART_Receive+0x40>
 8001b86:	2302      	movs	r3, #2
 8001b88:	e081      	b.n	8001c8e <HAL_UART_Receive+0x144>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2222      	movs	r2, #34	; 0x22
 8001b9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001ba0:	f7fe fce4 	bl	800056c <HAL_GetTick>
 8001ba4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	88fa      	ldrh	r2, [r7, #6]
 8001baa:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	88fa      	ldrh	r2, [r7, #6]
 8001bb0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001bba:	e05c      	b.n	8001c76 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bd2:	d12b      	bne.n	8001c2c <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2120      	movs	r1, #32
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 f859 	bl	8001c96 <UART_WaitOnFlagUntilTimeout>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e04f      	b.n	8001c8e <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10c      	bne.n	8001c14 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	3302      	adds	r3, #2
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	e030      	b.n	8001c76 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	3301      	adds	r3, #1
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	e024      	b.n	8001c76 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	2200      	movs	r2, #0
 8001c34:	2120      	movs	r1, #32
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f000 f82d 	bl	8001c96 <UART_WaitOnFlagUntilTimeout>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e023      	b.n	8001c8e <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d108      	bne.n	8001c60 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	60ba      	str	r2, [r7, #8]
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	6812      	ldr	r2, [r2, #0]
 8001c58:	6852      	ldr	r2, [r2, #4]
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	701a      	strb	r2, [r3, #0]
 8001c5e:	e00a      	b.n	8001c76 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	60ba      	str	r2, [r7, #8]
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	6852      	ldr	r2, [r2, #4]
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d19d      	bne.n	8001bbc <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2220      	movs	r2, #32
 8001c84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	e000      	b.n	8001c8e <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8001c8c:	2302      	movs	r3, #2
  }
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b084      	sub	sp, #16
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	603b      	str	r3, [r7, #0]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ca6:	e02c      	b.n	8001d02 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cae:	d028      	beq.n	8001d02 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d007      	beq.n	8001cc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001cb6:	f7fe fc59 	bl	800056c <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	1ad2      	subs	r2, r2, r3
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d91d      	bls.n	8001d02 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	68d2      	ldr	r2, [r2, #12]
 8001cd0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001cd4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	6952      	ldr	r2, [r2, #20]
 8001ce0:	f022 0201 	bic.w	r2, r2, #1
 8001ce4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2220      	movs	r2, #32
 8001cea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e00f      	b.n	8001d22 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	bf0c      	ite	eq
 8001d12:	2301      	moveq	r3, #1
 8001d14:	2300      	movne	r3, #0
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	461a      	mov	r2, r3
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d0c3      	beq.n	8001ca8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d30:	b0a3      	sub	sp, #140	; 0x8c
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	67f8      	str	r0, [r7, #124]	; 0x7c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d38:	6819      	ldr	r1, [r3, #0]
 8001d3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001d44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	431a      	orrs	r2, r3
 8001d56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  MODIFY_REG(huart->Instance->CR1,
 8001d66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d68:	6819      	ldr	r1, [r3, #0]
 8001d6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 8001d74:	f022 020c 	bic.w	r2, r2, #12
 8001d78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d82:	6819      	ldr	r1, [r3, #0]
 8001d84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	614b      	str	r3, [r1, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d9e:	f040 8171 	bne.w	8002084 <UART_SetConfig+0x358>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001da2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4ab4      	ldr	r2, [pc, #720]	; (8002078 <UART_SetConfig+0x34c>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d005      	beq.n	8001db8 <UART_SetConfig+0x8c>
 8001dac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4ab2      	ldr	r2, [pc, #712]	; (800207c <UART_SetConfig+0x350>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	f040 80b1 	bne.w	8001f1a <UART_SetConfig+0x1ee>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001db8:	f7ff fb5e 	bl	8001478 <HAL_RCC_GetPCLK2Freq>
 8001dbc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001dc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dc2:	681d      	ldr	r5, [r3, #0]
 8001dc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4614      	mov	r4, r2
 8001dd2:	18db      	adds	r3, r3, r3
 8001dd4:	eb44 0404 	adc.w	r4, r4, r4
 8001dd8:	185b      	adds	r3, r3, r1
 8001dda:	eb44 0402 	adc.w	r4, r4, r2
 8001dde:	00e0      	lsls	r0, r4, #3
 8001de0:	6478      	str	r0, [r7, #68]	; 0x44
 8001de2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001de4:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001de8:	6478      	str	r0, [r7, #68]	; 0x44
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	643b      	str	r3, [r7, #64]	; 0x40
 8001dee:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001df2:	eb13 0801 	adds.w	r8, r3, r1
 8001df6:	eb44 0902 	adc.w	r9, r4, r2
 8001dfa:	4640      	mov	r0, r8
 8001dfc:	4649      	mov	r1, r9
 8001dfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f04f 0400 	mov.w	r4, #0
 8001e06:	18db      	adds	r3, r3, r3
 8001e08:	eb44 0404 	adc.w	r4, r4, r4
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4623      	mov	r3, r4
 8001e10:	f7fe f9ee 	bl	80001f0 <__aeabi_uldivmod>
 8001e14:	4603      	mov	r3, r0
 8001e16:	460c      	mov	r4, r1
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b99      	ldr	r3, [pc, #612]	; (8002080 <UART_SetConfig+0x354>)
 8001e1c:	fba3 2302 	umull	r2, r3, r3, r2
 8001e20:	095b      	lsrs	r3, r3, #5
 8001e22:	011e      	lsls	r6, r3, #4
 8001e24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4614      	mov	r4, r2
 8001e32:	18db      	adds	r3, r3, r3
 8001e34:	eb44 0404 	adc.w	r4, r4, r4
 8001e38:	185b      	adds	r3, r3, r1
 8001e3a:	eb44 0402 	adc.w	r4, r4, r2
 8001e3e:	00e0      	lsls	r0, r4, #3
 8001e40:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001e42:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001e44:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001e48:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e4e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001e52:	eb13 0801 	adds.w	r8, r3, r1
 8001e56:	eb44 0902 	adc.w	r9, r4, r2
 8001e5a:	4640      	mov	r0, r8
 8001e5c:	4649      	mov	r1, r9
 8001e5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f04f 0400 	mov.w	r4, #0
 8001e66:	18db      	adds	r3, r3, r3
 8001e68:	eb44 0404 	adc.w	r4, r4, r4
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4623      	mov	r3, r4
 8001e70:	f7fe f9be 	bl	80001f0 <__aeabi_uldivmod>
 8001e74:	4603      	mov	r3, r0
 8001e76:	460c      	mov	r4, r1
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b81      	ldr	r3, [pc, #516]	; (8002080 <UART_SetConfig+0x354>)
 8001e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8001e80:	095b      	lsrs	r3, r3, #5
 8001e82:	2164      	movs	r1, #100	; 0x64
 8001e84:	fb01 f303 	mul.w	r3, r1, r3
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	3332      	adds	r3, #50	; 0x32
 8001e8e:	4a7c      	ldr	r2, [pc, #496]	; (8002080 <UART_SetConfig+0x354>)
 8001e90:	fba2 2303 	umull	r2, r3, r2, r3
 8001e94:	095b      	lsrs	r3, r3, #5
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e9c:	441e      	add	r6, r3
 8001e9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f04f 0200 	mov.w	r2, #0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4614      	mov	r4, r2
 8001eac:	18db      	adds	r3, r3, r3
 8001eae:	eb44 0404 	adc.w	r4, r4, r4
 8001eb2:	185b      	adds	r3, r3, r1
 8001eb4:	eb44 0402 	adc.w	r4, r4, r2
 8001eb8:	00e0      	lsls	r0, r4, #3
 8001eba:	6378      	str	r0, [r7, #52]	; 0x34
 8001ebc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ebe:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001ec2:	6378      	str	r0, [r7, #52]	; 0x34
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	633b      	str	r3, [r7, #48]	; 0x30
 8001ec8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001ecc:	eb13 0801 	adds.w	r8, r3, r1
 8001ed0:	eb44 0902 	adc.w	r9, r4, r2
 8001ed4:	4640      	mov	r0, r8
 8001ed6:	4649      	mov	r1, r9
 8001ed8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f04f 0400 	mov.w	r4, #0
 8001ee0:	18db      	adds	r3, r3, r3
 8001ee2:	eb44 0404 	adc.w	r4, r4, r4
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	4623      	mov	r3, r4
 8001eea:	f7fe f981 	bl	80001f0 <__aeabi_uldivmod>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	460c      	mov	r4, r1
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	4b62      	ldr	r3, [pc, #392]	; (8002080 <UART_SetConfig+0x354>)
 8001ef6:	fba3 1302 	umull	r1, r3, r3, r2
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	2164      	movs	r1, #100	; 0x64
 8001efe:	fb01 f303 	mul.w	r3, r1, r3
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	3332      	adds	r3, #50	; 0x32
 8001f08:	4a5d      	ldr	r2, [pc, #372]	; (8002080 <UART_SetConfig+0x354>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	095b      	lsrs	r3, r3, #5
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	4433      	add	r3, r6
 8001f16:	60ab      	str	r3, [r5, #8]
 8001f18:	e240      	b.n	800239c <UART_SetConfig+0x670>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f1a:	f7ff fa99 	bl	8001450 <HAL_RCC_GetPCLK1Freq>
 8001f1e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	673a      	str	r2, [r7, #112]	; 0x70
 8001f28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4614      	mov	r4, r2
 8001f36:	18db      	adds	r3, r3, r3
 8001f38:	eb44 0404 	adc.w	r4, r4, r4
 8001f3c:	185b      	adds	r3, r3, r1
 8001f3e:	eb44 0402 	adc.w	r4, r4, r2
 8001f42:	00e0      	lsls	r0, r4, #3
 8001f44:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001f46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f48:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001f4c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f52:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001f56:	185d      	adds	r5, r3, r1
 8001f58:	eb44 0602 	adc.w	r6, r4, r2
 8001f5c:	4628      	mov	r0, r5
 8001f5e:	4631      	mov	r1, r6
 8001f60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f04f 0400 	mov.w	r4, #0
 8001f68:	18db      	adds	r3, r3, r3
 8001f6a:	eb44 0404 	adc.w	r4, r4, r4
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4623      	mov	r3, r4
 8001f72:	f7fe f93d 	bl	80001f0 <__aeabi_uldivmod>
 8001f76:	4603      	mov	r3, r0
 8001f78:	460c      	mov	r4, r1
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4b40      	ldr	r3, [pc, #256]	; (8002080 <UART_SetConfig+0x354>)
 8001f7e:	fba3 2302 	umull	r2, r3, r3, r2
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	011e      	lsls	r6, r3, #4
 8001f86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4614      	mov	r4, r2
 8001f94:	18db      	adds	r3, r3, r3
 8001f96:	eb44 0404 	adc.w	r4, r4, r4
 8001f9a:	185b      	adds	r3, r3, r1
 8001f9c:	eb44 0402 	adc.w	r4, r4, r2
 8001fa0:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8001fa4:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 8001fa8:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8001fac:	4653      	mov	r3, sl
 8001fae:	465c      	mov	r4, fp
 8001fb0:	eb13 0a01 	adds.w	sl, r3, r1
 8001fb4:	eb44 0b02 	adc.w	fp, r4, r2
 8001fb8:	4650      	mov	r0, sl
 8001fba:	4659      	mov	r1, fp
 8001fbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f04f 0400 	mov.w	r4, #0
 8001fc4:	18db      	adds	r3, r3, r3
 8001fc6:	eb44 0404 	adc.w	r4, r4, r4
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4623      	mov	r3, r4
 8001fce:	f7fe f90f 	bl	80001f0 <__aeabi_uldivmod>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	460c      	mov	r4, r1
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	4b29      	ldr	r3, [pc, #164]	; (8002080 <UART_SetConfig+0x354>)
 8001fda:	fba3 1302 	umull	r1, r3, r3, r2
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	2164      	movs	r1, #100	; 0x64
 8001fe2:	fb01 f303 	mul.w	r3, r1, r3
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	3332      	adds	r3, #50	; 0x32
 8001fec:	4a24      	ldr	r2, [pc, #144]	; (8002080 <UART_SetConfig+0x354>)
 8001fee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff2:	095b      	lsrs	r3, r3, #5
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001ffa:	441e      	add	r6, r3
 8001ffc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002000:	4619      	mov	r1, r3
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	460b      	mov	r3, r1
 8002008:	4614      	mov	r4, r2
 800200a:	18db      	adds	r3, r3, r3
 800200c:	eb44 0404 	adc.w	r4, r4, r4
 8002010:	185b      	adds	r3, r3, r1
 8002012:	eb44 0402 	adc.w	r4, r4, r2
 8002016:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 800201a:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 800201e:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8002022:	4643      	mov	r3, r8
 8002024:	464c      	mov	r4, r9
 8002026:	eb13 0801 	adds.w	r8, r3, r1
 800202a:	eb44 0902 	adc.w	r9, r4, r2
 800202e:	4640      	mov	r0, r8
 8002030:	4649      	mov	r1, r9
 8002032:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f04f 0400 	mov.w	r4, #0
 800203a:	18db      	adds	r3, r3, r3
 800203c:	eb44 0404 	adc.w	r4, r4, r4
 8002040:	461a      	mov	r2, r3
 8002042:	4623      	mov	r3, r4
 8002044:	f7fe f8d4 	bl	80001f0 <__aeabi_uldivmod>
 8002048:	4603      	mov	r3, r0
 800204a:	460c      	mov	r4, r1
 800204c:	461a      	mov	r2, r3
 800204e:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <UART_SetConfig+0x354>)
 8002050:	fba3 1302 	umull	r1, r3, r3, r2
 8002054:	095b      	lsrs	r3, r3, #5
 8002056:	2164      	movs	r1, #100	; 0x64
 8002058:	fb01 f303 	mul.w	r3, r1, r3
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	3332      	adds	r3, #50	; 0x32
 8002062:	4a07      	ldr	r2, [pc, #28]	; (8002080 <UART_SetConfig+0x354>)
 8002064:	fba2 2303 	umull	r2, r3, r2, r3
 8002068:	095b      	lsrs	r3, r3, #5
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	4433      	add	r3, r6
 8002070:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002072:	6093      	str	r3, [r2, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002074:	e192      	b.n	800239c <UART_SetConfig+0x670>
 8002076:	bf00      	nop
 8002078:	40011000 	.word	0x40011000
 800207c:	40011400 	.word	0x40011400
 8002080:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002084:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4bc1      	ldr	r3, [pc, #772]	; (8002390 <UART_SetConfig+0x664>)
 800208a:	429a      	cmp	r2, r3
 800208c:	d005      	beq.n	800209a <UART_SetConfig+0x36e>
 800208e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	4bc0      	ldr	r3, [pc, #768]	; (8002394 <UART_SetConfig+0x668>)
 8002094:	429a      	cmp	r2, r3
 8002096:	f040 80bf 	bne.w	8002218 <UART_SetConfig+0x4ec>
      pclk = HAL_RCC_GetPCLK2Freq();
 800209a:	f7ff f9ed 	bl	8001478 <HAL_RCC_GetPCLK2Freq>
 800209e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020a4:	681e      	ldr	r6, [r3, #0]
 80020a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020aa:	4619      	mov	r1, r3
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4614      	mov	r4, r2
 80020b4:	18db      	adds	r3, r3, r3
 80020b6:	eb44 0404 	adc.w	r4, r4, r4
 80020ba:	185b      	adds	r3, r3, r1
 80020bc:	eb44 0402 	adc.w	r4, r4, r2
 80020c0:	00e0      	lsls	r0, r4, #3
 80020c2:	6278      	str	r0, [r7, #36]	; 0x24
 80020c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020c6:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80020ca:	6278      	str	r0, [r7, #36]	; 0x24
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	623b      	str	r3, [r7, #32]
 80020d0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80020d4:	eb13 0801 	adds.w	r8, r3, r1
 80020d8:	eb44 0902 	adc.w	r9, r4, r2
 80020dc:	4640      	mov	r0, r8
 80020de:	4649      	mov	r1, r9
 80020e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f04f 0400 	mov.w	r4, #0
 80020e8:	00a2      	lsls	r2, r4, #2
 80020ea:	65fa      	str	r2, [r7, #92]	; 0x5c
 80020ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80020ee:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80020f2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80020f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80020fc:	f7fe f878 	bl	80001f0 <__aeabi_uldivmod>
 8002100:	4603      	mov	r3, r0
 8002102:	460c      	mov	r4, r1
 8002104:	461a      	mov	r2, r3
 8002106:	4ba4      	ldr	r3, [pc, #656]	; (8002398 <UART_SetConfig+0x66c>)
 8002108:	fba3 2302 	umull	r2, r3, r3, r2
 800210c:	095b      	lsrs	r3, r3, #5
 800210e:	011d      	lsls	r5, r3, #4
 8002110:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002114:	4619      	mov	r1, r3
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	460b      	mov	r3, r1
 800211c:	4614      	mov	r4, r2
 800211e:	18db      	adds	r3, r3, r3
 8002120:	eb44 0404 	adc.w	r4, r4, r4
 8002124:	185b      	adds	r3, r3, r1
 8002126:	eb44 0402 	adc.w	r4, r4, r2
 800212a:	00e0      	lsls	r0, r4, #3
 800212c:	61f8      	str	r0, [r7, #28]
 800212e:	69f8      	ldr	r0, [r7, #28]
 8002130:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002134:	61f8      	str	r0, [r7, #28]
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	61bb      	str	r3, [r7, #24]
 800213a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800213e:	eb13 0801 	adds.w	r8, r3, r1
 8002142:	eb44 0902 	adc.w	r9, r4, r2
 8002146:	4640      	mov	r0, r8
 8002148:	4649      	mov	r1, r9
 800214a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f04f 0400 	mov.w	r4, #0
 8002152:	00a2      	lsls	r2, r4, #2
 8002154:	657a      	str	r2, [r7, #84]	; 0x54
 8002156:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002158:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800215c:	657a      	str	r2, [r7, #84]	; 0x54
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	653b      	str	r3, [r7, #80]	; 0x50
 8002162:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002166:	f7fe f843 	bl	80001f0 <__aeabi_uldivmod>
 800216a:	4603      	mov	r3, r0
 800216c:	460c      	mov	r4, r1
 800216e:	461a      	mov	r2, r3
 8002170:	4b89      	ldr	r3, [pc, #548]	; (8002398 <UART_SetConfig+0x66c>)
 8002172:	fba3 1302 	umull	r1, r3, r3, r2
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	2164      	movs	r1, #100	; 0x64
 800217a:	fb01 f303 	mul.w	r3, r1, r3
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	3332      	adds	r3, #50	; 0x32
 8002184:	4a84      	ldr	r2, [pc, #528]	; (8002398 <UART_SetConfig+0x66c>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	095b      	lsrs	r3, r3, #5
 800218c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002190:	441d      	add	r5, r3
 8002192:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002196:	4619      	mov	r1, r3
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	460b      	mov	r3, r1
 800219e:	4614      	mov	r4, r2
 80021a0:	18db      	adds	r3, r3, r3
 80021a2:	eb44 0404 	adc.w	r4, r4, r4
 80021a6:	185b      	adds	r3, r3, r1
 80021a8:	eb44 0402 	adc.w	r4, r4, r2
 80021ac:	00e0      	lsls	r0, r4, #3
 80021ae:	6178      	str	r0, [r7, #20]
 80021b0:	6978      	ldr	r0, [r7, #20]
 80021b2:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80021b6:	6178      	str	r0, [r7, #20]
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80021c0:	eb13 0801 	adds.w	r8, r3, r1
 80021c4:	eb44 0902 	adc.w	r9, r4, r2
 80021c8:	4640      	mov	r0, r8
 80021ca:	4649      	mov	r1, r9
 80021cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f04f 0400 	mov.w	r4, #0
 80021d4:	00a2      	lsls	r2, r4, #2
 80021d6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80021d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021da:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80021de:	64fa      	str	r2, [r7, #76]	; 0x4c
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80021e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80021e8:	f7fe f802 	bl	80001f0 <__aeabi_uldivmod>
 80021ec:	4603      	mov	r3, r0
 80021ee:	460c      	mov	r4, r1
 80021f0:	461a      	mov	r2, r3
 80021f2:	4b69      	ldr	r3, [pc, #420]	; (8002398 <UART_SetConfig+0x66c>)
 80021f4:	fba3 1302 	umull	r1, r3, r3, r2
 80021f8:	095b      	lsrs	r3, r3, #5
 80021fa:	2164      	movs	r1, #100	; 0x64
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	3332      	adds	r3, #50	; 0x32
 8002206:	4a64      	ldr	r2, [pc, #400]	; (8002398 <UART_SetConfig+0x66c>)
 8002208:	fba2 2303 	umull	r2, r3, r2, r3
 800220c:	095b      	lsrs	r3, r3, #5
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	442b      	add	r3, r5
 8002214:	60b3      	str	r3, [r6, #8]
 8002216:	e0c1      	b.n	800239c <UART_SetConfig+0x670>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002218:	f7ff f91a 	bl	8001450 <HAL_RCC_GetPCLK1Freq>
 800221c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002220:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	65bb      	str	r3, [r7, #88]	; 0x58
 8002226:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800222a:	4619      	mov	r1, r3
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	460b      	mov	r3, r1
 8002232:	4614      	mov	r4, r2
 8002234:	18db      	adds	r3, r3, r3
 8002236:	eb44 0404 	adc.w	r4, r4, r4
 800223a:	185b      	adds	r3, r3, r1
 800223c:	eb44 0402 	adc.w	r4, r4, r2
 8002240:	00e6      	lsls	r6, r4, #3
 8002242:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8002246:	00dd      	lsls	r5, r3, #3
 8002248:	462b      	mov	r3, r5
 800224a:	4634      	mov	r4, r6
 800224c:	185d      	adds	r5, r3, r1
 800224e:	eb44 0602 	adc.w	r6, r4, r2
 8002252:	4628      	mov	r0, r5
 8002254:	4631      	mov	r1, r6
 8002256:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f04f 0400 	mov.w	r4, #0
 800225e:	00a5      	lsls	r5, r4, #2
 8002260:	677d      	str	r5, [r7, #116]	; 0x74
 8002262:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 8002264:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 8002268:	677d      	str	r5, [r7, #116]	; 0x74
 800226a:	009c      	lsls	r4, r3, #2
 800226c:	673c      	str	r4, [r7, #112]	; 0x70
 800226e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002272:	f7fd ffbd 	bl	80001f0 <__aeabi_uldivmod>
 8002276:	4603      	mov	r3, r0
 8002278:	460c      	mov	r4, r1
 800227a:	461a      	mov	r2, r3
 800227c:	4b46      	ldr	r3, [pc, #280]	; (8002398 <UART_SetConfig+0x66c>)
 800227e:	fba3 1302 	umull	r1, r3, r3, r2
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	011d      	lsls	r5, r3, #4
 8002286:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800228a:	4619      	mov	r1, r3
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	460b      	mov	r3, r1
 8002292:	4614      	mov	r4, r2
 8002294:	18db      	adds	r3, r3, r3
 8002296:	eb44 0404 	adc.w	r4, r4, r4
 800229a:	185b      	adds	r3, r3, r1
 800229c:	eb44 0402 	adc.w	r4, r4, r2
 80022a0:	00e0      	lsls	r0, r4, #3
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	00d8      	lsls	r0, r3, #3
 80022ae:	60b8      	str	r0, [r7, #8]
 80022b0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80022b4:	eb13 0801 	adds.w	r8, r3, r1
 80022b8:	eb44 0902 	adc.w	r9, r4, r2
 80022bc:	4640      	mov	r0, r8
 80022be:	4649      	mov	r1, r9
 80022c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f04f 0400 	mov.w	r4, #0
 80022c8:	00a6      	lsls	r6, r4, #2
 80022ca:	66fe      	str	r6, [r7, #108]	; 0x6c
 80022cc:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 80022ce:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 80022d2:	66fe      	str	r6, [r7, #108]	; 0x6c
 80022d4:	009c      	lsls	r4, r3, #2
 80022d6:	66bc      	str	r4, [r7, #104]	; 0x68
 80022d8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80022dc:	f7fd ff88 	bl	80001f0 <__aeabi_uldivmod>
 80022e0:	4603      	mov	r3, r0
 80022e2:	460c      	mov	r4, r1
 80022e4:	461a      	mov	r2, r3
 80022e6:	4b2c      	ldr	r3, [pc, #176]	; (8002398 <UART_SetConfig+0x66c>)
 80022e8:	fba3 1302 	umull	r1, r3, r3, r2
 80022ec:	095b      	lsrs	r3, r3, #5
 80022ee:	2164      	movs	r1, #100	; 0x64
 80022f0:	fb01 f303 	mul.w	r3, r1, r3
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	3332      	adds	r3, #50	; 0x32
 80022fa:	4a27      	ldr	r2, [pc, #156]	; (8002398 <UART_SetConfig+0x66c>)
 80022fc:	fba2 1303 	umull	r1, r3, r2, r3
 8002300:	095b      	lsrs	r3, r3, #5
 8002302:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002306:	441d      	add	r5, r3
 8002308:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800230c:	4619      	mov	r1, r3
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	460b      	mov	r3, r1
 8002314:	4614      	mov	r4, r2
 8002316:	18db      	adds	r3, r3, r3
 8002318:	eb44 0404 	adc.w	r4, r4, r4
 800231c:	185b      	adds	r3, r3, r1
 800231e:	eb44 0402 	adc.w	r4, r4, r2
 8002322:	00e0      	lsls	r0, r4, #3
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	00d8      	lsls	r0, r3, #3
 8002330:	6038      	str	r0, [r7, #0]
 8002332:	e897 0018 	ldmia.w	r7, {r3, r4}
 8002336:	eb13 0801 	adds.w	r8, r3, r1
 800233a:	eb44 0902 	adc.w	r9, r4, r2
 800233e:	4640      	mov	r0, r8
 8002340:	4649      	mov	r1, r9
 8002342:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f04f 0400 	mov.w	r4, #0
 800234a:	00a6      	lsls	r6, r4, #2
 800234c:	667e      	str	r6, [r7, #100]	; 0x64
 800234e:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 8002350:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8002354:	667e      	str	r6, [r7, #100]	; 0x64
 8002356:	009c      	lsls	r4, r3, #2
 8002358:	663c      	str	r4, [r7, #96]	; 0x60
 800235a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800235e:	f7fd ff47 	bl	80001f0 <__aeabi_uldivmod>
 8002362:	4603      	mov	r3, r0
 8002364:	460c      	mov	r4, r1
 8002366:	461a      	mov	r2, r3
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <UART_SetConfig+0x66c>)
 800236a:	fba3 1302 	umull	r1, r3, r3, r2
 800236e:	095b      	lsrs	r3, r3, #5
 8002370:	2164      	movs	r1, #100	; 0x64
 8002372:	fb01 f303 	mul.w	r3, r1, r3
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	3332      	adds	r3, #50	; 0x32
 800237c:	4a06      	ldr	r2, [pc, #24]	; (8002398 <UART_SetConfig+0x66c>)
 800237e:	fba2 1303 	umull	r1, r3, r2, r3
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	442b      	add	r3, r5
 800238a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800238c:	6093      	str	r3, [r2, #8]
}
 800238e:	e005      	b.n	800239c <UART_SetConfig+0x670>
 8002390:	40011000 	.word	0x40011000
 8002394:	40011400 	.word	0x40011400
 8002398:	51eb851f 	.word	0x51eb851f
 800239c:	bf00      	nop
 800239e:	378c      	adds	r7, #140	; 0x8c
 80023a0:	46bd      	mov	sp, r7
 80023a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023a6:	bf00      	nop

080023a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
	...

080023b8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023be:	f3ef 8305 	mrs	r3, IPSR
 80023c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80023c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10f      	bne.n	80023ea <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023ca:	f3ef 8310 	mrs	r3, PRIMASK
 80023ce:	607b      	str	r3, [r7, #4]
  return(result);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d105      	bne.n	80023e2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80023d6:	f3ef 8311 	mrs	r3, BASEPRI
 80023da:	603b      	str	r3, [r7, #0]
  return(result);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d007      	beq.n	80023f2 <osKernelInitialize+0x3a>
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <osKernelInitialize+0x64>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d103      	bne.n	80023f2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80023ea:	f06f 0305 	mvn.w	r3, #5
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	e00c      	b.n	800240c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80023f2:	4b0a      	ldr	r3, [pc, #40]	; (800241c <osKernelInitialize+0x64>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d105      	bne.n	8002406 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <osKernelInitialize+0x64>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002400:	2300      	movs	r3, #0
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	e002      	b.n	800240c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800240a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800240c:	68fb      	ldr	r3, [r7, #12]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	2000002c 	.word	0x2000002c

08002420 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002426:	f3ef 8305 	mrs	r3, IPSR
 800242a:	60bb      	str	r3, [r7, #8]
  return(result);
 800242c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10f      	bne.n	8002452 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002432:	f3ef 8310 	mrs	r3, PRIMASK
 8002436:	607b      	str	r3, [r7, #4]
  return(result);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d105      	bne.n	800244a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800243e:	f3ef 8311 	mrs	r3, BASEPRI
 8002442:	603b      	str	r3, [r7, #0]
  return(result);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d007      	beq.n	800245a <osKernelStart+0x3a>
 800244a:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <osKernelStart+0x68>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d103      	bne.n	800245a <osKernelStart+0x3a>
    stat = osErrorISR;
 8002452:	f06f 0305 	mvn.w	r3, #5
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	e010      	b.n	800247c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800245a:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <osKernelStart+0x68>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d109      	bne.n	8002476 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002462:	f7ff ffa1 	bl	80023a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002466:	4b08      	ldr	r3, [pc, #32]	; (8002488 <osKernelStart+0x68>)
 8002468:	2202      	movs	r2, #2
 800246a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800246c:	f001 ff1c 	bl	80042a8 <vTaskStartScheduler>
      stat = osOK;
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	e002      	b.n	800247c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8002476:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800247a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800247c:	68fb      	ldr	r3, [r7, #12]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	2000002c 	.word	0x2000002c

0800248c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800248c:	b580      	push	{r7, lr}
 800248e:	b090      	sub	sp, #64	; 0x40
 8002490:	af04      	add	r7, sp, #16
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002498:	2300      	movs	r3, #0
 800249a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800249c:	f3ef 8305 	mrs	r3, IPSR
 80024a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80024a2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f040 808f 	bne.w	80025c8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024aa:	f3ef 8310 	mrs	r3, PRIMASK
 80024ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d105      	bne.n	80024c2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80024b6:	f3ef 8311 	mrs	r3, BASEPRI
 80024ba:	617b      	str	r3, [r7, #20]
  return(result);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <osThreadNew+0x3e>
 80024c2:	4b44      	ldr	r3, [pc, #272]	; (80025d4 <osThreadNew+0x148>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d07e      	beq.n	80025c8 <osThreadNew+0x13c>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d07b      	beq.n	80025c8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80024d4:	2318      	movs	r3, #24
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80024dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024e0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d045      	beq.n	8002574 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d002      	beq.n	80024f6 <osThreadNew+0x6a>
        name = attr->name;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	2b00      	cmp	r3, #0
 8002508:	d008      	beq.n	800251c <osThreadNew+0x90>
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	2b38      	cmp	r3, #56	; 0x38
 800250e:	d805      	bhi.n	800251c <osThreadNew+0x90>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <osThreadNew+0x94>
        return (NULL);
 800251c:	2300      	movs	r3, #0
 800251e:	e054      	b.n	80025ca <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	089b      	lsrs	r3, r3, #2
 800252e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00e      	beq.n	8002556 <osThreadNew+0xca>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	2b5b      	cmp	r3, #91	; 0x5b
 800253e:	d90a      	bls.n	8002556 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002544:	2b00      	cmp	r3, #0
 8002546:	d006      	beq.n	8002556 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <osThreadNew+0xca>
        mem = 1;
 8002550:	2301      	movs	r3, #1
 8002552:	623b      	str	r3, [r7, #32]
 8002554:	e010      	b.n	8002578 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10c      	bne.n	8002578 <osThreadNew+0xec>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d108      	bne.n	8002578 <osThreadNew+0xec>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d104      	bne.n	8002578 <osThreadNew+0xec>
          mem = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	623b      	str	r3, [r7, #32]
 8002572:	e001      	b.n	8002578 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8002574:	2300      	movs	r3, #0
 8002576:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d110      	bne.n	80025a0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002586:	9202      	str	r2, [sp, #8]
 8002588:	9301      	str	r3, [sp, #4]
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002592:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f001 fcb5 	bl	8003f04 <xTaskCreateStatic>
 800259a:	4603      	mov	r3, r0
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	e013      	b.n	80025c8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d110      	bne.n	80025c8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80025a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	f107 0310 	add.w	r3, r7, #16
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f001 fcfd 	bl	8003fb8 <xTaskCreate>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d001      	beq.n	80025c8 <osThreadNew+0x13c>
          hTask = NULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80025c8:	693b      	ldr	r3, [r7, #16]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3730      	adds	r7, #48	; 0x30
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	2000002c 	.word	0x2000002c

080025d8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025e0:	f3ef 8305 	mrs	r3, IPSR
 80025e4:	613b      	str	r3, [r7, #16]
  return(result);
 80025e6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10f      	bne.n	800260c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ec:	f3ef 8310 	mrs	r3, PRIMASK
 80025f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d105      	bne.n	8002604 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025f8:	f3ef 8311 	mrs	r3, BASEPRI
 80025fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d007      	beq.n	8002614 <osDelay+0x3c>
 8002604:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <osDelay+0x58>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d103      	bne.n	8002614 <osDelay+0x3c>
    stat = osErrorISR;
 800260c:	f06f 0305 	mvn.w	r3, #5
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	e007      	b.n	8002624 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d002      	beq.n	8002624 <osDelay+0x4c>
      vTaskDelay(ticks);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f001 fe0e 	bl	8004240 <vTaskDelay>
    }
  }

  return (stat);
 8002624:	697b      	ldr	r3, [r7, #20]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	2000002c 	.word	0x2000002c

08002634 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002634:	b580      	push	{r7, lr}
 8002636:	b08c      	sub	sp, #48	; 0x30
 8002638:	af02      	add	r7, sp, #8
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002640:	2300      	movs	r3, #0
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002644:	f3ef 8305 	mrs	r3, IPSR
 8002648:	61bb      	str	r3, [r7, #24]
  return(result);
 800264a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800264c:	2b00      	cmp	r3, #0
 800264e:	d170      	bne.n	8002732 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002650:	f3ef 8310 	mrs	r3, PRIMASK
 8002654:	617b      	str	r3, [r7, #20]
  return(result);
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d105      	bne.n	8002668 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800265c:	f3ef 8311 	mrs	r3, BASEPRI
 8002660:	613b      	str	r3, [r7, #16]
  return(result);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <osMessageQueueNew+0x3c>
 8002668:	4b34      	ldr	r3, [pc, #208]	; (800273c <osMessageQueueNew+0x108>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b02      	cmp	r3, #2
 800266e:	d060      	beq.n	8002732 <osMessageQueueNew+0xfe>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d05d      	beq.n	8002732 <osMessageQueueNew+0xfe>
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d05a      	beq.n	8002732 <osMessageQueueNew+0xfe>
    mem = -1;
 800267c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002680:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d029      	beq.n	80026dc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d012      	beq.n	80026b6 <osMessageQueueNew+0x82>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	2b4f      	cmp	r3, #79	; 0x4f
 8002696:	d90e      	bls.n	80026b6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00a      	beq.n	80026b6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	695a      	ldr	r2, [r3, #20]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	68b9      	ldr	r1, [r7, #8]
 80026a8:	fb01 f303 	mul.w	r3, r1, r3
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d302      	bcc.n	80026b6 <osMessageQueueNew+0x82>
        mem = 1;
 80026b0:	2301      	movs	r3, #1
 80026b2:	623b      	str	r3, [r7, #32]
 80026b4:	e014      	b.n	80026e0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d110      	bne.n	80026e0 <osMessageQueueNew+0xac>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10c      	bne.n	80026e0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d108      	bne.n	80026e0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d104      	bne.n	80026e0 <osMessageQueueNew+0xac>
          mem = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	623b      	str	r3, [r7, #32]
 80026da:	e001      	b.n	80026e0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d10c      	bne.n	8002700 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6899      	ldr	r1, [r3, #8]
 80026ee:	2300      	movs	r3, #0
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	460b      	mov	r3, r1
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 fea0 	bl	800343c <xQueueGenericCreateStatic>
 80026fc:	6278      	str	r0, [r7, #36]	; 0x24
 80026fe:	e008      	b.n	8002712 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d105      	bne.n	8002712 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8002706:	2200      	movs	r2, #0
 8002708:	68b9      	ldr	r1, [r7, #8]
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 ff09 	bl	8003522 <xQueueGenericCreate>
 8002710:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00c      	beq.n	8002732 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <osMessageQueueNew+0xf2>
        name = attr->name;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	61fb      	str	r3, [r7, #28]
 8002724:	e001      	b.n	800272a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8002726:	2300      	movs	r3, #0
 8002728:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800272a:	69f9      	ldr	r1, [r7, #28]
 800272c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800272e:	f001 fb8d 	bl	8003e4c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002734:	4618      	mov	r0, r3
 8002736:	3728      	adds	r7, #40	; 0x28
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	2000002c 	.word	0x2000002c

08002740 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002740:	b580      	push	{r7, lr}
 8002742:	b08a      	sub	sp, #40	; 0x28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	603b      	str	r3, [r7, #0]
 800274c:	4613      	mov	r3, r2
 800274e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002754:	2300      	movs	r3, #0
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002758:	f3ef 8305 	mrs	r3, IPSR
 800275c:	61fb      	str	r3, [r7, #28]
  return(result);
 800275e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10f      	bne.n	8002784 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002764:	f3ef 8310 	mrs	r3, PRIMASK
 8002768:	61bb      	str	r3, [r7, #24]
  return(result);
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d105      	bne.n	800277c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002770:	f3ef 8311 	mrs	r3, BASEPRI
 8002774:	617b      	str	r3, [r7, #20]
  return(result);
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d02c      	beq.n	80027d6 <osMessageQueuePut+0x96>
 800277c:	4b28      	ldr	r3, [pc, #160]	; (8002820 <osMessageQueuePut+0xe0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b02      	cmp	r3, #2
 8002782:	d128      	bne.n	80027d6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d005      	beq.n	8002796 <osMessageQueuePut+0x56>
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <osMessageQueuePut+0x56>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8002796:	f06f 0303 	mvn.w	r3, #3
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800279c:	e039      	b.n	8002812 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80027a2:	f107 0210 	add.w	r2, r7, #16
 80027a6:	2300      	movs	r3, #0
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	6a38      	ldr	r0, [r7, #32]
 80027ac:	f001 f816 	bl	80037dc <xQueueGenericSendFromISR>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d003      	beq.n	80027be <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80027b6:	f06f 0302 	mvn.w	r3, #2
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80027bc:	e029      	b.n	8002812 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d026      	beq.n	8002812 <osMessageQueuePut+0xd2>
 80027c4:	4b17      	ldr	r3, [pc, #92]	; (8002824 <osMessageQueuePut+0xe4>)
 80027c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80027d4:	e01d      	b.n	8002812 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <osMessageQueuePut+0xa2>
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d103      	bne.n	80027ea <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80027e2:	f06f 0303 	mvn.w	r3, #3
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
 80027e8:	e014      	b.n	8002814 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80027ea:	2300      	movs	r3, #0
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	68b9      	ldr	r1, [r7, #8]
 80027f0:	6a38      	ldr	r0, [r7, #32]
 80027f2:	f000 fef9 	bl	80035e8 <xQueueGenericSend>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d00b      	beq.n	8002814 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8002802:	f06f 0301 	mvn.w	r3, #1
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
 8002808:	e004      	b.n	8002814 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800280a:	f06f 0302 	mvn.w	r3, #2
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
 8002810:	e000      	b.n	8002814 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002812:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002816:	4618      	mov	r0, r3
 8002818:	3728      	adds	r7, #40	; 0x28
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	2000002c 	.word	0x2000002c
 8002824:	e000ed04 	.word	0xe000ed04

08002828 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002828:	b580      	push	{r7, lr}
 800282a:	b08a      	sub	sp, #40	; 0x28
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800283a:	2300      	movs	r3, #0
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800283e:	f3ef 8305 	mrs	r3, IPSR
 8002842:	61fb      	str	r3, [r7, #28]
  return(result);
 8002844:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10f      	bne.n	800286a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800284a:	f3ef 8310 	mrs	r3, PRIMASK
 800284e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d105      	bne.n	8002862 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002856:	f3ef 8311 	mrs	r3, BASEPRI
 800285a:	617b      	str	r3, [r7, #20]
  return(result);
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d02c      	beq.n	80028bc <osMessageQueueGet+0x94>
 8002862:	4b28      	ldr	r3, [pc, #160]	; (8002904 <osMessageQueueGet+0xdc>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d128      	bne.n	80028bc <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <osMessageQueueGet+0x54>
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <osMessageQueueGet+0x54>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800287c:	f06f 0303 	mvn.w	r3, #3
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002882:	e038      	b.n	80028f6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8002884:	2300      	movs	r3, #0
 8002886:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002888:	f107 0310 	add.w	r3, r7, #16
 800288c:	461a      	mov	r2, r3
 800288e:	68b9      	ldr	r1, [r7, #8]
 8002890:	6a38      	ldr	r0, [r7, #32]
 8002892:	f001 f913 	bl	8003abc <xQueueReceiveFromISR>
 8002896:	4603      	mov	r3, r0
 8002898:	2b01      	cmp	r3, #1
 800289a:	d003      	beq.n	80028a4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800289c:	f06f 0302 	mvn.w	r3, #2
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80028a2:	e028      	b.n	80028f6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d025      	beq.n	80028f6 <osMessageQueueGet+0xce>
 80028aa:	4b17      	ldr	r3, [pc, #92]	; (8002908 <osMessageQueueGet+0xe0>)
 80028ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	f3bf 8f4f 	dsb	sy
 80028b6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80028ba:	e01c      	b.n	80028f6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <osMessageQueueGet+0xa0>
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d103      	bne.n	80028d0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80028c8:	f06f 0303 	mvn.w	r3, #3
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
 80028ce:	e013      	b.n	80028f8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	68b9      	ldr	r1, [r7, #8]
 80028d4:	6a38      	ldr	r0, [r7, #32]
 80028d6:	f001 f815 	bl	8003904 <xQueueReceive>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d00b      	beq.n	80028f8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80028e6:	f06f 0301 	mvn.w	r3, #1
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
 80028ec:	e004      	b.n	80028f8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80028ee:	f06f 0302 	mvn.w	r3, #2
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
 80028f4:	e000      	b.n	80028f8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80028f6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3728      	adds	r7, #40	; 0x28
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	2000002c 	.word	0x2000002c
 8002908:	e000ed04 	.word	0xe000ed04

0800290c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d102      	bne.n	8002924 <osMessageQueueGetCount+0x18>
    count = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	61fb      	str	r3, [r7, #28]
 8002922:	e01e      	b.n	8002962 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002924:	f3ef 8305 	mrs	r3, IPSR
 8002928:	617b      	str	r3, [r7, #20]
  return(result);
 800292a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10f      	bne.n	8002950 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002930:	f3ef 8310 	mrs	r3, PRIMASK
 8002934:	613b      	str	r3, [r7, #16]
  return(result);
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d105      	bne.n	8002948 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800293c:	f3ef 8311 	mrs	r3, BASEPRI
 8002940:	60fb      	str	r3, [r7, #12]
  return(result);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d008      	beq.n	800295a <osMessageQueueGetCount+0x4e>
 8002948:	4b08      	ldr	r3, [pc, #32]	; (800296c <osMessageQueueGetCount+0x60>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d104      	bne.n	800295a <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8002950:	69b8      	ldr	r0, [r7, #24]
 8002952:	f001 f94d 	bl	8003bf0 <uxQueueMessagesWaitingFromISR>
 8002956:	61f8      	str	r0, [r7, #28]
 8002958:	e003      	b.n	8002962 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800295a:	69b8      	ldr	r0, [r7, #24]
 800295c:	f001 f92b 	bl	8003bb6 <uxQueueMessagesWaiting>
 8002960:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8002962:	69fb      	ldr	r3, [r7, #28]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3720      	adds	r7, #32
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	2000002c 	.word	0x2000002c

08002970 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4a07      	ldr	r2, [pc, #28]	; (800299c <vApplicationGetIdleTaskMemory+0x2c>)
 8002980:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	4a06      	ldr	r2, [pc, #24]	; (80029a0 <vApplicationGetIdleTaskMemory+0x30>)
 8002986:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2280      	movs	r2, #128	; 0x80
 800298c:	601a      	str	r2, [r3, #0]
}
 800298e:	bf00      	nop
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	20000030 	.word	0x20000030
 80029a0:	2000008c 	.word	0x2000008c

080029a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4a07      	ldr	r2, [pc, #28]	; (80029d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80029b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	4a06      	ldr	r2, [pc, #24]	; (80029d4 <vApplicationGetTimerTaskMemory+0x30>)
 80029ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029c2:	601a      	str	r2, [r3, #0]
}
 80029c4:	bf00      	nop
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	2000028c 	.word	0x2000028c
 80029d4:	200002e8 	.word	0x200002e8

080029d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f103 0208 	add.w	r2, r3, #8
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f103 0208 	add.w	r2, r3, #8
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f103 0208 	add.w	r2, r3, #8
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a32:	b480      	push	{r7}
 8002a34:	b085      	sub	sp, #20
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	601a      	str	r2, [r3, #0]
}
 8002a6e:	bf00      	nop
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b085      	sub	sp, #20
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a90:	d103      	bne.n	8002a9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	e00c      	b.n	8002ab4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3308      	adds	r3, #8
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	e002      	b.n	8002aa8 <vListInsert+0x2e>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d9f6      	bls.n	8002aa2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	601a      	str	r2, [r3, #0]
}
 8002ae0:	bf00      	nop
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6892      	ldr	r2, [r2, #8]
 8002b02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6852      	ldr	r2, [r2, #4]
 8002b0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d103      	bne.n	8002b20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	1e5a      	subs	r2, r3, #1
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	3b04      	subs	r3, #4
 8002b50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3b04      	subs	r3, #4
 8002b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f023 0201 	bic.w	r2, r3, #1
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	3b04      	subs	r3, #4
 8002b6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002b70:	4a0c      	ldr	r2, [pc, #48]	; (8002ba4 <pxPortInitialiseStack+0x64>)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	3b14      	subs	r3, #20
 8002b7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	3b04      	subs	r3, #4
 8002b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f06f 0202 	mvn.w	r2, #2
 8002b8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	3b20      	subs	r3, #32
 8002b94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002b96:	68fb      	ldr	r3, [r7, #12]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	08002ba9 	.word	0x08002ba9

08002ba8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002bb2:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <prvTaskExitError+0x50>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bba:	d009      	beq.n	8002bd0 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc0:	f383 8811 	msr	BASEPRI, r3
 8002bc4:	f3bf 8f6f 	isb	sy
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	e7fe      	b.n	8002bce <prvTaskExitError+0x26>
 8002bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd4:	f383 8811 	msr	BASEPRI, r3
 8002bd8:	f3bf 8f6f 	isb	sy
 8002bdc:	f3bf 8f4f 	dsb	sy
 8002be0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002be2:	bf00      	nop
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0fc      	beq.n	8002be4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002bea:	bf00      	nop
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000008 	.word	0x20000008
 8002bfc:	00000000 	.word	0x00000000

08002c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002c00:	4b07      	ldr	r3, [pc, #28]	; (8002c20 <pxCurrentTCBConst2>)
 8002c02:	6819      	ldr	r1, [r3, #0]
 8002c04:	6808      	ldr	r0, [r1, #0]
 8002c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c0a:	f380 8809 	msr	PSP, r0
 8002c0e:	f3bf 8f6f 	isb	sy
 8002c12:	f04f 0000 	mov.w	r0, #0
 8002c16:	f380 8811 	msr	BASEPRI, r0
 8002c1a:	4770      	bx	lr
 8002c1c:	f3af 8000 	nop.w

08002c20 <pxCurrentTCBConst2>:
 8002c20:	20004308 	.word	0x20004308
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop

08002c28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002c28:	4808      	ldr	r0, [pc, #32]	; (8002c4c <prvPortStartFirstTask+0x24>)
 8002c2a:	6800      	ldr	r0, [r0, #0]
 8002c2c:	6800      	ldr	r0, [r0, #0]
 8002c2e:	f380 8808 	msr	MSP, r0
 8002c32:	f04f 0000 	mov.w	r0, #0
 8002c36:	f380 8814 	msr	CONTROL, r0
 8002c3a:	b662      	cpsie	i
 8002c3c:	b661      	cpsie	f
 8002c3e:	f3bf 8f4f 	dsb	sy
 8002c42:	f3bf 8f6f 	isb	sy
 8002c46:	df00      	svc	0
 8002c48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002c4a:	bf00      	nop
 8002c4c:	e000ed08 	.word	0xe000ed08

08002c50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c56:	4b44      	ldr	r3, [pc, #272]	; (8002d68 <xPortStartScheduler+0x118>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a44      	ldr	r2, [pc, #272]	; (8002d6c <xPortStartScheduler+0x11c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d109      	bne.n	8002c74 <xPortStartScheduler+0x24>
 8002c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c64:	f383 8811 	msr	BASEPRI, r3
 8002c68:	f3bf 8f6f 	isb	sy
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	e7fe      	b.n	8002c72 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c74:	4b3c      	ldr	r3, [pc, #240]	; (8002d68 <xPortStartScheduler+0x118>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a3d      	ldr	r2, [pc, #244]	; (8002d70 <xPortStartScheduler+0x120>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d109      	bne.n	8002c92 <xPortStartScheduler+0x42>
 8002c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c82:	f383 8811 	msr	BASEPRI, r3
 8002c86:	f3bf 8f6f 	isb	sy
 8002c8a:	f3bf 8f4f 	dsb	sy
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	e7fe      	b.n	8002c90 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c92:	4b38      	ldr	r3, [pc, #224]	; (8002d74 <xPortStartScheduler+0x124>)
 8002c94:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	22ff      	movs	r2, #255	; 0xff
 8002ca2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	4b30      	ldr	r3, [pc, #192]	; (8002d78 <xPortStartScheduler+0x128>)
 8002cb8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002cba:	4b30      	ldr	r3, [pc, #192]	; (8002d7c <xPortStartScheduler+0x12c>)
 8002cbc:	2207      	movs	r2, #7
 8002cbe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cc0:	e009      	b.n	8002cd6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8002cc2:	4b2e      	ldr	r3, [pc, #184]	; (8002d7c <xPortStartScheduler+0x12c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	4a2c      	ldr	r2, [pc, #176]	; (8002d7c <xPortStartScheduler+0x12c>)
 8002cca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ccc:	78fb      	ldrb	r3, [r7, #3]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cd6:	78fb      	ldrb	r3, [r7, #3]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cde:	2b80      	cmp	r3, #128	; 0x80
 8002ce0:	d0ef      	beq.n	8002cc2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002ce2:	4b26      	ldr	r3, [pc, #152]	; (8002d7c <xPortStartScheduler+0x12c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f1c3 0307 	rsb	r3, r3, #7
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d009      	beq.n	8002d02 <xPortStartScheduler+0xb2>
 8002cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf2:	f383 8811 	msr	BASEPRI, r3
 8002cf6:	f3bf 8f6f 	isb	sy
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	60bb      	str	r3, [r7, #8]
 8002d00:	e7fe      	b.n	8002d00 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d02:	4b1e      	ldr	r3, [pc, #120]	; (8002d7c <xPortStartScheduler+0x12c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	021b      	lsls	r3, r3, #8
 8002d08:	4a1c      	ldr	r2, [pc, #112]	; (8002d7c <xPortStartScheduler+0x12c>)
 8002d0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d0c:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <xPortStartScheduler+0x12c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d14:	4a19      	ldr	r2, [pc, #100]	; (8002d7c <xPortStartScheduler+0x12c>)
 8002d16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002d20:	4a17      	ldr	r2, [pc, #92]	; (8002d80 <xPortStartScheduler+0x130>)
 8002d22:	4b17      	ldr	r3, [pc, #92]	; (8002d80 <xPortStartScheduler+0x130>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002d2c:	4a14      	ldr	r2, [pc, #80]	; (8002d80 <xPortStartScheduler+0x130>)
 8002d2e:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <xPortStartScheduler+0x130>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002d36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002d38:	f000 f8d6 	bl	8002ee8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002d3c:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <xPortStartScheduler+0x134>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002d42:	f000 f8f5 	bl	8002f30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002d46:	4a10      	ldr	r2, [pc, #64]	; (8002d88 <xPortStartScheduler+0x138>)
 8002d48:	4b0f      	ldr	r3, [pc, #60]	; (8002d88 <xPortStartScheduler+0x138>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002d50:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002d52:	f7ff ff69 	bl	8002c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002d56:	f001 fc7d 	bl	8004654 <vTaskSwitchContext>
	prvTaskExitError();
 8002d5a:	f7ff ff25 	bl	8002ba8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	e000ed00 	.word	0xe000ed00
 8002d6c:	410fc271 	.word	0x410fc271
 8002d70:	410fc270 	.word	0x410fc270
 8002d74:	e000e400 	.word	0xe000e400
 8002d78:	200006e8 	.word	0x200006e8
 8002d7c:	200006ec 	.word	0x200006ec
 8002d80:	e000ed20 	.word	0xe000ed20
 8002d84:	20000008 	.word	0x20000008
 8002d88:	e000ef34 	.word	0xe000ef34

08002d8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d96:	f383 8811 	msr	BASEPRI, r3
 8002d9a:	f3bf 8f6f 	isb	sy
 8002d9e:	f3bf 8f4f 	dsb	sy
 8002da2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002da4:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <vPortEnterCritical+0x54>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	3301      	adds	r3, #1
 8002daa:	4a0d      	ldr	r2, [pc, #52]	; (8002de0 <vPortEnterCritical+0x54>)
 8002dac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002dae:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <vPortEnterCritical+0x54>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d10e      	bne.n	8002dd4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002db6:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <vPortEnterCritical+0x58>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d009      	beq.n	8002dd4 <vPortEnterCritical+0x48>
 8002dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc4:	f383 8811 	msr	BASEPRI, r3
 8002dc8:	f3bf 8f6f 	isb	sy
 8002dcc:	f3bf 8f4f 	dsb	sy
 8002dd0:	603b      	str	r3, [r7, #0]
 8002dd2:	e7fe      	b.n	8002dd2 <vPortEnterCritical+0x46>
	}
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	20000008 	.word	0x20000008
 8002de4:	e000ed04 	.word	0xe000ed04

08002de8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002dee:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <vPortExitCritical+0x4c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <vPortExitCritical+0x22>
 8002df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfa:	f383 8811 	msr	BASEPRI, r3
 8002dfe:	f3bf 8f6f 	isb	sy
 8002e02:	f3bf 8f4f 	dsb	sy
 8002e06:	607b      	str	r3, [r7, #4]
 8002e08:	e7fe      	b.n	8002e08 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002e0a:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <vPortExitCritical+0x4c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	4a08      	ldr	r2, [pc, #32]	; (8002e34 <vPortExitCritical+0x4c>)
 8002e12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002e14:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <vPortExitCritical+0x4c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d104      	bne.n	8002e26 <vPortExitCritical+0x3e>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	20000008 	.word	0x20000008
	...

08002e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002e40:	f3ef 8009 	mrs	r0, PSP
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	4b15      	ldr	r3, [pc, #84]	; (8002ea0 <pxCurrentTCBConst>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	f01e 0f10 	tst.w	lr, #16
 8002e50:	bf08      	it	eq
 8002e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e5a:	6010      	str	r0, [r2, #0]
 8002e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002e60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002e64:	f380 8811 	msr	BASEPRI, r0
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	f001 fbf0 	bl	8004654 <vTaskSwitchContext>
 8002e74:	f04f 0000 	mov.w	r0, #0
 8002e78:	f380 8811 	msr	BASEPRI, r0
 8002e7c:	bc09      	pop	{r0, r3}
 8002e7e:	6819      	ldr	r1, [r3, #0]
 8002e80:	6808      	ldr	r0, [r1, #0]
 8002e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e86:	f01e 0f10 	tst.w	lr, #16
 8002e8a:	bf08      	it	eq
 8002e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e90:	f380 8809 	msr	PSP, r0
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	f3af 8000 	nop.w

08002ea0 <pxCurrentTCBConst>:
 8002ea0:	20004308 	.word	0x20004308
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002ea4:	bf00      	nop
 8002ea6:	bf00      	nop

08002ea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
	__asm volatile
 8002eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb2:	f383 8811 	msr	BASEPRI, r3
 8002eb6:	f3bf 8f6f 	isb	sy
 8002eba:	f3bf 8f4f 	dsb	sy
 8002ebe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002ec0:	f001 fb10 	bl	80044e4 <xTaskIncrementTick>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002eca:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <SysTick_Handler+0x3c>)
 8002ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	e000ed04 	.word	0xe000ed04

08002ee8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002eec:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <vPortSetupTimerInterrupt+0x34>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002ef2:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <vPortSetupTimerInterrupt+0x38>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002ef8:	4a0a      	ldr	r2, [pc, #40]	; (8002f24 <vPortSetupTimerInterrupt+0x3c>)
 8002efa:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <vPortSetupTimerInterrupt+0x40>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	490b      	ldr	r1, [pc, #44]	; (8002f2c <vPortSetupTimerInterrupt+0x44>)
 8002f00:	fba1 1303 	umull	r1, r3, r1, r3
 8002f04:	099b      	lsrs	r3, r3, #6
 8002f06:	3b01      	subs	r3, #1
 8002f08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002f0a:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <vPortSetupTimerInterrupt+0x34>)
 8002f0c:	2207      	movs	r2, #7
 8002f0e:	601a      	str	r2, [r3, #0]
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	e000e010 	.word	0xe000e010
 8002f20:	e000e018 	.word	0xe000e018
 8002f24:	e000e014 	.word	0xe000e014
 8002f28:	2000000c 	.word	0x2000000c
 8002f2c:	10624dd3 	.word	0x10624dd3

08002f30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002f30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002f40 <vPortEnableVFP+0x10>
 8002f34:	6801      	ldr	r1, [r0, #0]
 8002f36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002f3a:	6001      	str	r1, [r0, #0]
 8002f3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002f3e:	bf00      	nop
 8002f40:	e000ed88 	.word	0xe000ed88

08002f44 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002f4a:	f3ef 8305 	mrs	r3, IPSR
 8002f4e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b0f      	cmp	r3, #15
 8002f54:	d913      	bls.n	8002f7e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002f56:	4a16      	ldr	r2, [pc, #88]	; (8002fb0 <vPortValidateInterruptPriority+0x6c>)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002f60:	4b14      	ldr	r3, [pc, #80]	; (8002fb4 <vPortValidateInterruptPriority+0x70>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	7afa      	ldrb	r2, [r7, #11]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d209      	bcs.n	8002f7e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8002f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6e:	f383 8811 	msr	BASEPRI, r3
 8002f72:	f3bf 8f6f 	isb	sy
 8002f76:	f3bf 8f4f 	dsb	sy
 8002f7a:	607b      	str	r3, [r7, #4]
 8002f7c:	e7fe      	b.n	8002f7c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002f7e:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <vPortValidateInterruptPriority+0x74>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <vPortValidateInterruptPriority+0x78>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d909      	bls.n	8002fa2 <vPortValidateInterruptPriority+0x5e>
 8002f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f92:	f383 8811 	msr	BASEPRI, r3
 8002f96:	f3bf 8f6f 	isb	sy
 8002f9a:	f3bf 8f4f 	dsb	sy
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	e7fe      	b.n	8002fa0 <vPortValidateInterruptPriority+0x5c>
	}
 8002fa2:	bf00      	nop
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	e000e3f0 	.word	0xe000e3f0
 8002fb4:	200006e8 	.word	0x200006e8
 8002fb8:	e000ed0c 	.word	0xe000ed0c
 8002fbc:	200006ec 	.word	0x200006ec

08002fc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08a      	sub	sp, #40	; 0x28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002fcc:	f001 f9d0 	bl	8004370 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002fd0:	4b57      	ldr	r3, [pc, #348]	; (8003130 <pvPortMalloc+0x170>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002fd8:	f000 f90c 	bl	80031f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002fdc:	4b55      	ldr	r3, [pc, #340]	; (8003134 <pvPortMalloc+0x174>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f040 808c 	bne.w	8003102 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d01c      	beq.n	800302a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002ff0:	2208      	movs	r2, #8
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d013      	beq.n	800302a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f023 0307 	bic.w	r3, r3, #7
 8003008:	3308      	adds	r3, #8
 800300a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	2b00      	cmp	r3, #0
 8003014:	d009      	beq.n	800302a <pvPortMalloc+0x6a>
 8003016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301a:	f383 8811 	msr	BASEPRI, r3
 800301e:	f3bf 8f6f 	isb	sy
 8003022:	f3bf 8f4f 	dsb	sy
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	e7fe      	b.n	8003028 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d068      	beq.n	8003102 <pvPortMalloc+0x142>
 8003030:	4b41      	ldr	r3, [pc, #260]	; (8003138 <pvPortMalloc+0x178>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	429a      	cmp	r2, r3
 8003038:	d863      	bhi.n	8003102 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800303a:	4b40      	ldr	r3, [pc, #256]	; (800313c <pvPortMalloc+0x17c>)
 800303c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800303e:	4b3f      	ldr	r3, [pc, #252]	; (800313c <pvPortMalloc+0x17c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003044:	e004      	b.n	8003050 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	429a      	cmp	r2, r3
 8003058:	d203      	bcs.n	8003062 <pvPortMalloc+0xa2>
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f1      	bne.n	8003046 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003062:	4b33      	ldr	r3, [pc, #204]	; (8003130 <pvPortMalloc+0x170>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003068:	429a      	cmp	r2, r3
 800306a:	d04a      	beq.n	8003102 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2208      	movs	r2, #8
 8003072:	4413      	add	r3, r2
 8003074:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	1ad2      	subs	r2, r2, r3
 8003086:	2308      	movs	r3, #8
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	429a      	cmp	r2, r3
 800308c:	d91e      	bls.n	80030cc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800308e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4413      	add	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	2b00      	cmp	r3, #0
 800309e:	d009      	beq.n	80030b4 <pvPortMalloc+0xf4>
 80030a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a4:	f383 8811 	msr	BASEPRI, r3
 80030a8:	f3bf 8f6f 	isb	sy
 80030ac:	f3bf 8f4f 	dsb	sy
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	e7fe      	b.n	80030b2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	1ad2      	subs	r2, r2, r3
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80030c6:	69b8      	ldr	r0, [r7, #24]
 80030c8:	f000 f8f6 	bl	80032b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80030cc:	4b1a      	ldr	r3, [pc, #104]	; (8003138 <pvPortMalloc+0x178>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	4a18      	ldr	r2, [pc, #96]	; (8003138 <pvPortMalloc+0x178>)
 80030d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80030da:	4b17      	ldr	r3, [pc, #92]	; (8003138 <pvPortMalloc+0x178>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	4b18      	ldr	r3, [pc, #96]	; (8003140 <pvPortMalloc+0x180>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d203      	bcs.n	80030ee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80030e6:	4b14      	ldr	r3, [pc, #80]	; (8003138 <pvPortMalloc+0x178>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a15      	ldr	r2, [pc, #84]	; (8003140 <pvPortMalloc+0x180>)
 80030ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	4b10      	ldr	r3, [pc, #64]	; (8003134 <pvPortMalloc+0x174>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003102:	f001 f943 	bl	800438c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	2b00      	cmp	r3, #0
 800310e:	d009      	beq.n	8003124 <pvPortMalloc+0x164>
 8003110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003114:	f383 8811 	msr	BASEPRI, r3
 8003118:	f3bf 8f6f 	isb	sy
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	e7fe      	b.n	8003122 <pvPortMalloc+0x162>
	return pvReturn;
 8003124:	69fb      	ldr	r3, [r7, #28]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3728      	adds	r7, #40	; 0x28
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	200042f8 	.word	0x200042f8
 8003134:	20004304 	.word	0x20004304
 8003138:	200042fc 	.word	0x200042fc
 800313c:	200042f0 	.word	0x200042f0
 8003140:	20004300 	.word	0x20004300

08003144 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d046      	beq.n	80031e4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003156:	2308      	movs	r3, #8
 8003158:	425b      	negs	r3, r3
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4413      	add	r3, r2
 800315e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	4b20      	ldr	r3, [pc, #128]	; (80031ec <vPortFree+0xa8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4013      	ands	r3, r2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d109      	bne.n	8003186 <vPortFree+0x42>
 8003172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003176:	f383 8811 	msr	BASEPRI, r3
 800317a:	f3bf 8f6f 	isb	sy
 800317e:	f3bf 8f4f 	dsb	sy
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	e7fe      	b.n	8003184 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d009      	beq.n	80031a2 <vPortFree+0x5e>
 800318e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003192:	f383 8811 	msr	BASEPRI, r3
 8003196:	f3bf 8f6f 	isb	sy
 800319a:	f3bf 8f4f 	dsb	sy
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	e7fe      	b.n	80031a0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	4b11      	ldr	r3, [pc, #68]	; (80031ec <vPortFree+0xa8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d019      	beq.n	80031e4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d115      	bne.n	80031e4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <vPortFree+0xa8>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	43db      	mvns	r3, r3
 80031c2:	401a      	ands	r2, r3
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80031c8:	f001 f8d2 	bl	8004370 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	4b07      	ldr	r3, [pc, #28]	; (80031f0 <vPortFree+0xac>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4413      	add	r3, r2
 80031d6:	4a06      	ldr	r2, [pc, #24]	; (80031f0 <vPortFree+0xac>)
 80031d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80031da:	6938      	ldr	r0, [r7, #16]
 80031dc:	f000 f86c 	bl	80032b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80031e0:	f001 f8d4 	bl	800438c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80031e4:	bf00      	nop
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	20004304 	.word	0x20004304
 80031f0:	200042fc 	.word	0x200042fc

080031f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80031fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80031fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003200:	4b27      	ldr	r3, [pc, #156]	; (80032a0 <prvHeapInit+0xac>)
 8003202:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00c      	beq.n	8003228 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3307      	adds	r3, #7
 8003212:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f023 0307 	bic.w	r3, r3, #7
 800321a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	4a1f      	ldr	r2, [pc, #124]	; (80032a0 <prvHeapInit+0xac>)
 8003224:	4413      	add	r3, r2
 8003226:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800322c:	4a1d      	ldr	r2, [pc, #116]	; (80032a4 <prvHeapInit+0xb0>)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003232:	4b1c      	ldr	r3, [pc, #112]	; (80032a4 <prvHeapInit+0xb0>)
 8003234:	2200      	movs	r2, #0
 8003236:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	4413      	add	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003240:	2208      	movs	r2, #8
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f023 0307 	bic.w	r3, r3, #7
 800324e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4a15      	ldr	r2, [pc, #84]	; (80032a8 <prvHeapInit+0xb4>)
 8003254:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003256:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <prvHeapInit+0xb4>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2200      	movs	r2, #0
 800325c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800325e:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <prvHeapInit+0xb4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	1ad2      	subs	r2, r2, r3
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003274:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <prvHeapInit+0xb4>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	4a0a      	ldr	r2, [pc, #40]	; (80032ac <prvHeapInit+0xb8>)
 8003282:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	4a09      	ldr	r2, [pc, #36]	; (80032b0 <prvHeapInit+0xbc>)
 800328a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800328c:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <prvHeapInit+0xc0>)
 800328e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003292:	601a      	str	r2, [r3, #0]
}
 8003294:	bf00      	nop
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	200006f0 	.word	0x200006f0
 80032a4:	200042f0 	.word	0x200042f0
 80032a8:	200042f8 	.word	0x200042f8
 80032ac:	20004300 	.word	0x20004300
 80032b0:	200042fc 	.word	0x200042fc
 80032b4:	20004304 	.word	0x20004304

080032b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80032c0:	4b28      	ldr	r3, [pc, #160]	; (8003364 <prvInsertBlockIntoFreeList+0xac>)
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	e002      	b.n	80032cc <prvInsertBlockIntoFreeList+0x14>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d3f7      	bcc.n	80032c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	441a      	add	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d108      	bne.n	80032fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	441a      	add	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	441a      	add	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d118      	bne.n	8003340 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	4b15      	ldr	r3, [pc, #84]	; (8003368 <prvInsertBlockIntoFreeList+0xb0>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d00d      	beq.n	8003336 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	441a      	add	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	e008      	b.n	8003348 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003336:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <prvInsertBlockIntoFreeList+0xb0>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	e003      	b.n	8003348 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	429a      	cmp	r2, r3
 800334e:	d002      	beq.n	8003356 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	200042f0 	.word	0x200042f0
 8003368:	200042f8 	.word	0x200042f8

0800336c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d109      	bne.n	8003394 <xQueueGenericReset+0x28>
 8003380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	60bb      	str	r3, [r7, #8]
 8003392:	e7fe      	b.n	8003392 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003394:	f7ff fcfa 	bl	8002d8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a0:	68f9      	ldr	r1, [r7, #12]
 80033a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033a4:	fb01 f303 	mul.w	r3, r1, r3
 80033a8:	441a      	add	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c4:	3b01      	subs	r3, #1
 80033c6:	68f9      	ldr	r1, [r7, #12]
 80033c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033ca:	fb01 f303 	mul.w	r3, r1, r3
 80033ce:	441a      	add	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	22ff      	movs	r2, #255	; 0xff
 80033d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	22ff      	movs	r2, #255	; 0xff
 80033e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d114      	bne.n	8003414 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d01a      	beq.n	8003428 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	3310      	adds	r3, #16
 80033f6:	4618      	mov	r0, r3
 80033f8:	f001 f9d6 	bl	80047a8 <xTaskRemoveFromEventList>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d012      	beq.n	8003428 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003402:	4b0d      	ldr	r3, [pc, #52]	; (8003438 <xQueueGenericReset+0xcc>)
 8003404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	f3bf 8f4f 	dsb	sy
 800340e:	f3bf 8f6f 	isb	sy
 8003412:	e009      	b.n	8003428 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	3310      	adds	r3, #16
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff fadd 	bl	80029d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	3324      	adds	r3, #36	; 0x24
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff fad8 	bl	80029d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003428:	f7ff fcde 	bl	8002de8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800342c:	2301      	movs	r3, #1
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	e000ed04 	.word	0xe000ed04

0800343c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08e      	sub	sp, #56	; 0x38
 8003440:	af02      	add	r7, sp, #8
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d109      	bne.n	8003464 <xQueueGenericCreateStatic+0x28>
 8003450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003454:	f383 8811 	msr	BASEPRI, r3
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	62bb      	str	r3, [r7, #40]	; 0x28
 8003462:	e7fe      	b.n	8003462 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d109      	bne.n	800347e <xQueueGenericCreateStatic+0x42>
 800346a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346e:	f383 8811 	msr	BASEPRI, r3
 8003472:	f3bf 8f6f 	isb	sy
 8003476:	f3bf 8f4f 	dsb	sy
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
 800347c:	e7fe      	b.n	800347c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <xQueueGenericCreateStatic+0x4e>
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <xQueueGenericCreateStatic+0x52>
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <xQueueGenericCreateStatic+0x54>
 800348e:	2300      	movs	r3, #0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d109      	bne.n	80034a8 <xQueueGenericCreateStatic+0x6c>
 8003494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003498:	f383 8811 	msr	BASEPRI, r3
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	623b      	str	r3, [r7, #32]
 80034a6:	e7fe      	b.n	80034a6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d102      	bne.n	80034b4 <xQueueGenericCreateStatic+0x78>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <xQueueGenericCreateStatic+0x7c>
 80034b4:	2301      	movs	r3, #1
 80034b6:	e000      	b.n	80034ba <xQueueGenericCreateStatic+0x7e>
 80034b8:	2300      	movs	r3, #0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d109      	bne.n	80034d2 <xQueueGenericCreateStatic+0x96>
 80034be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c2:	f383 8811 	msr	BASEPRI, r3
 80034c6:	f3bf 8f6f 	isb	sy
 80034ca:	f3bf 8f4f 	dsb	sy
 80034ce:	61fb      	str	r3, [r7, #28]
 80034d0:	e7fe      	b.n	80034d0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80034d2:	2350      	movs	r3, #80	; 0x50
 80034d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2b50      	cmp	r3, #80	; 0x50
 80034da:	d009      	beq.n	80034f0 <xQueueGenericCreateStatic+0xb4>
 80034dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e0:	f383 8811 	msr	BASEPRI, r3
 80034e4:	f3bf 8f6f 	isb	sy
 80034e8:	f3bf 8f4f 	dsb	sy
 80034ec:	61bb      	str	r3, [r7, #24]
 80034ee:	e7fe      	b.n	80034ee <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80034f0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80034f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00d      	beq.n	8003518 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80034fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003504:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 f844 	bl	80035a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800351a:	4618      	mov	r0, r3
 800351c:	3730      	adds	r7, #48	; 0x30
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003522:	b580      	push	{r7, lr}
 8003524:	b08a      	sub	sp, #40	; 0x28
 8003526:	af02      	add	r7, sp, #8
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	4613      	mov	r3, r2
 800352e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <xQueueGenericCreate+0x28>
 8003536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353a:	f383 8811 	msr	BASEPRI, r3
 800353e:	f3bf 8f6f 	isb	sy
 8003542:	f3bf 8f4f 	dsb	sy
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	e7fe      	b.n	8003548 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d102      	bne.n	8003556 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003550:	2300      	movs	r3, #0
 8003552:	61fb      	str	r3, [r7, #28]
 8003554:	e004      	b.n	8003560 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	fb02 f303 	mul.w	r3, r2, r3
 800355e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	3350      	adds	r3, #80	; 0x50
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff fd2b 	bl	8002fc0 <pvPortMalloc>
 800356a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d011      	beq.n	8003596 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	3350      	adds	r3, #80	; 0x50
 800357a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003584:	79fa      	ldrb	r2, [r7, #7]
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	4613      	mov	r3, r2
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	68b9      	ldr	r1, [r7, #8]
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 f805 	bl	80035a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003596:	69bb      	ldr	r3, [r7, #24]
	}
 8003598:	4618      	mov	r0, r3
 800359a:	3720      	adds	r7, #32
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
 80035ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d103      	bne.n	80035bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	e002      	b.n	80035c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80035ce:	2101      	movs	r1, #1
 80035d0:	69b8      	ldr	r0, [r7, #24]
 80035d2:	f7ff fecb 	bl	800336c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	78fa      	ldrb	r2, [r7, #3]
 80035da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80035de:	bf00      	nop
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08e      	sub	sp, #56	; 0x38
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80035f6:	2300      	movs	r3, #0
 80035f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	2b00      	cmp	r3, #0
 8003602:	d109      	bne.n	8003618 <xQueueGenericSend+0x30>
 8003604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	62bb      	str	r3, [r7, #40]	; 0x28
 8003616:	e7fe      	b.n	8003616 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d103      	bne.n	8003626 <xQueueGenericSend+0x3e>
 800361e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <xQueueGenericSend+0x42>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <xQueueGenericSend+0x44>
 800362a:	2300      	movs	r3, #0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d109      	bne.n	8003644 <xQueueGenericSend+0x5c>
 8003630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
 8003642:	e7fe      	b.n	8003642 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d103      	bne.n	8003652 <xQueueGenericSend+0x6a>
 800364a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364e:	2b01      	cmp	r3, #1
 8003650:	d101      	bne.n	8003656 <xQueueGenericSend+0x6e>
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <xQueueGenericSend+0x70>
 8003656:	2300      	movs	r3, #0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d109      	bne.n	8003670 <xQueueGenericSend+0x88>
 800365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	623b      	str	r3, [r7, #32]
 800366e:	e7fe      	b.n	800366e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003670:	f001 fa50 	bl	8004b14 <xTaskGetSchedulerState>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d102      	bne.n	8003680 <xQueueGenericSend+0x98>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <xQueueGenericSend+0x9c>
 8003680:	2301      	movs	r3, #1
 8003682:	e000      	b.n	8003686 <xQueueGenericSend+0x9e>
 8003684:	2300      	movs	r3, #0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d109      	bne.n	800369e <xQueueGenericSend+0xb6>
 800368a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368e:	f383 8811 	msr	BASEPRI, r3
 8003692:	f3bf 8f6f 	isb	sy
 8003696:	f3bf 8f4f 	dsb	sy
 800369a:	61fb      	str	r3, [r7, #28]
 800369c:	e7fe      	b.n	800369c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800369e:	f7ff fb75 	bl	8002d8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d302      	bcc.n	80036b4 <xQueueGenericSend+0xcc>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d129      	bne.n	8003708 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	68b9      	ldr	r1, [r7, #8]
 80036b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036ba:	f000 fab6 	bl	8003c2a <prvCopyDataToQueue>
 80036be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d010      	beq.n	80036ea <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ca:	3324      	adds	r3, #36	; 0x24
 80036cc:	4618      	mov	r0, r3
 80036ce:	f001 f86b 	bl	80047a8 <xTaskRemoveFromEventList>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d013      	beq.n	8003700 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80036d8:	4b3f      	ldr	r3, [pc, #252]	; (80037d8 <xQueueGenericSend+0x1f0>)
 80036da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	f3bf 8f4f 	dsb	sy
 80036e4:	f3bf 8f6f 	isb	sy
 80036e8:	e00a      	b.n	8003700 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80036ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d007      	beq.n	8003700 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80036f0:	4b39      	ldr	r3, [pc, #228]	; (80037d8 <xQueueGenericSend+0x1f0>)
 80036f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003700:	f7ff fb72 	bl	8002de8 <vPortExitCritical>
				return pdPASS;
 8003704:	2301      	movs	r3, #1
 8003706:	e063      	b.n	80037d0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d103      	bne.n	8003716 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800370e:	f7ff fb6b 	bl	8002de8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003712:	2300      	movs	r3, #0
 8003714:	e05c      	b.n	80037d0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003718:	2b00      	cmp	r3, #0
 800371a:	d106      	bne.n	800372a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800371c:	f107 0314 	add.w	r3, r7, #20
 8003720:	4618      	mov	r0, r3
 8003722:	f001 f8a3 	bl	800486c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003726:	2301      	movs	r3, #1
 8003728:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800372a:	f7ff fb5d 	bl	8002de8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800372e:	f000 fe1f 	bl	8004370 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003732:	f7ff fb2b 	bl	8002d8c <vPortEnterCritical>
 8003736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003738:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800373c:	b25b      	sxtb	r3, r3
 800373e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003742:	d103      	bne.n	800374c <xQueueGenericSend+0x164>
 8003744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003752:	b25b      	sxtb	r3, r3
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003758:	d103      	bne.n	8003762 <xQueueGenericSend+0x17a>
 800375a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003762:	f7ff fb41 	bl	8002de8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003766:	1d3a      	adds	r2, r7, #4
 8003768:	f107 0314 	add.w	r3, r7, #20
 800376c:	4611      	mov	r1, r2
 800376e:	4618      	mov	r0, r3
 8003770:	f001 f892 	bl	8004898 <xTaskCheckForTimeOut>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d124      	bne.n	80037c4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800377a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800377c:	f000 fb4d 	bl	8003e1a <prvIsQueueFull>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d018      	beq.n	80037b8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003788:	3310      	adds	r3, #16
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	4611      	mov	r1, r2
 800378e:	4618      	mov	r0, r3
 8003790:	f000 ffbc 	bl	800470c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003796:	f000 fad8 	bl	8003d4a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800379a:	f000 fdf7 	bl	800438c <xTaskResumeAll>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f47f af7c 	bne.w	800369e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80037a6:	4b0c      	ldr	r3, [pc, #48]	; (80037d8 <xQueueGenericSend+0x1f0>)
 80037a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	f3bf 8f4f 	dsb	sy
 80037b2:	f3bf 8f6f 	isb	sy
 80037b6:	e772      	b.n	800369e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80037b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037ba:	f000 fac6 	bl	8003d4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037be:	f000 fde5 	bl	800438c <xTaskResumeAll>
 80037c2:	e76c      	b.n	800369e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80037c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037c6:	f000 fac0 	bl	8003d4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037ca:	f000 fddf 	bl	800438c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80037ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3738      	adds	r7, #56	; 0x38
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	e000ed04 	.word	0xe000ed04

080037dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08e      	sub	sp, #56	; 0x38
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80037ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d109      	bne.n	8003808 <xQueueGenericSendFromISR+0x2c>
 80037f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
 8003806:	e7fe      	b.n	8003806 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d103      	bne.n	8003816 <xQueueGenericSendFromISR+0x3a>
 800380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <xQueueGenericSendFromISR+0x3e>
 8003816:	2301      	movs	r3, #1
 8003818:	e000      	b.n	800381c <xQueueGenericSendFromISR+0x40>
 800381a:	2300      	movs	r3, #0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d109      	bne.n	8003834 <xQueueGenericSendFromISR+0x58>
 8003820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003824:	f383 8811 	msr	BASEPRI, r3
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	623b      	str	r3, [r7, #32]
 8003832:	e7fe      	b.n	8003832 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d103      	bne.n	8003842 <xQueueGenericSendFromISR+0x66>
 800383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <xQueueGenericSendFromISR+0x6a>
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <xQueueGenericSendFromISR+0x6c>
 8003846:	2300      	movs	r3, #0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d109      	bne.n	8003860 <xQueueGenericSendFromISR+0x84>
 800384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	e7fe      	b.n	800385e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003860:	f7ff fb70 	bl	8002f44 <vPortValidateInterruptPriority>
	__asm volatile
 8003864:	f3ef 8211 	mrs	r2, BASEPRI
 8003868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	61ba      	str	r2, [r7, #24]
 800387a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800387c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800387e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003888:	429a      	cmp	r2, r3
 800388a:	d302      	bcc.n	8003892 <xQueueGenericSendFromISR+0xb6>
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d12c      	bne.n	80038ec <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003894:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003898:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	68b9      	ldr	r1, [r7, #8]
 80038a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038a2:	f000 f9c2 	bl	8003c2a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80038a6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80038aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038ae:	d112      	bne.n	80038d6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d016      	beq.n	80038e6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ba:	3324      	adds	r3, #36	; 0x24
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 ff73 	bl	80047a8 <xTaskRemoveFromEventList>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00e      	beq.n	80038e6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00b      	beq.n	80038e6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	e007      	b.n	80038e6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80038d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038da:	3301      	adds	r3, #1
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	b25a      	sxtb	r2, r3
 80038e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80038e6:	2301      	movs	r3, #1
 80038e8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80038ea:	e001      	b.n	80038f0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80038ec:	2300      	movs	r3, #0
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
 80038f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f2:	613b      	str	r3, [r7, #16]
	__asm volatile
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80038fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3738      	adds	r7, #56	; 0x38
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08c      	sub	sp, #48	; 0x30
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003910:	2300      	movs	r3, #0
 8003912:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <xQueueReceive+0x2e>
	__asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	623b      	str	r3, [r7, #32]
 8003930:	e7fe      	b.n	8003930 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d103      	bne.n	8003940 <xQueueReceive+0x3c>
 8003938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <xQueueReceive+0x40>
 8003940:	2301      	movs	r3, #1
 8003942:	e000      	b.n	8003946 <xQueueReceive+0x42>
 8003944:	2300      	movs	r3, #0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d109      	bne.n	800395e <xQueueReceive+0x5a>
 800394a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394e:	f383 8811 	msr	BASEPRI, r3
 8003952:	f3bf 8f6f 	isb	sy
 8003956:	f3bf 8f4f 	dsb	sy
 800395a:	61fb      	str	r3, [r7, #28]
 800395c:	e7fe      	b.n	800395c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800395e:	f001 f8d9 	bl	8004b14 <xTaskGetSchedulerState>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d102      	bne.n	800396e <xQueueReceive+0x6a>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <xQueueReceive+0x6e>
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <xQueueReceive+0x70>
 8003972:	2300      	movs	r3, #0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d109      	bne.n	800398c <xQueueReceive+0x88>
 8003978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397c:	f383 8811 	msr	BASEPRI, r3
 8003980:	f3bf 8f6f 	isb	sy
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	61bb      	str	r3, [r7, #24]
 800398a:	e7fe      	b.n	800398a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800398c:	f7ff f9fe 	bl	8002d8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003994:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01f      	beq.n	80039dc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039a0:	f000 f9ad 	bl	8003cfe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	1e5a      	subs	r2, r3, #1
 80039a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039aa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00f      	beq.n	80039d4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b6:	3310      	adds	r3, #16
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fef5 	bl	80047a8 <xTaskRemoveFromEventList>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d007      	beq.n	80039d4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80039c4:	4b3c      	ldr	r3, [pc, #240]	; (8003ab8 <xQueueReceive+0x1b4>)
 80039c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80039d4:	f7ff fa08 	bl	8002de8 <vPortExitCritical>
				return pdPASS;
 80039d8:	2301      	movs	r3, #1
 80039da:	e069      	b.n	8003ab0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d103      	bne.n	80039ea <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039e2:	f7ff fa01 	bl	8002de8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80039e6:	2300      	movs	r3, #0
 80039e8:	e062      	b.n	8003ab0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d106      	bne.n	80039fe <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039f0:	f107 0310 	add.w	r3, r7, #16
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 ff39 	bl	800486c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039fa:	2301      	movs	r3, #1
 80039fc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039fe:	f7ff f9f3 	bl	8002de8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a02:	f000 fcb5 	bl	8004370 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a06:	f7ff f9c1 	bl	8002d8c <vPortEnterCritical>
 8003a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a10:	b25b      	sxtb	r3, r3
 8003a12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a16:	d103      	bne.n	8003a20 <xQueueReceive+0x11c>
 8003a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a26:	b25b      	sxtb	r3, r3
 8003a28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a2c:	d103      	bne.n	8003a36 <xQueueReceive+0x132>
 8003a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a36:	f7ff f9d7 	bl	8002de8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a3a:	1d3a      	adds	r2, r7, #4
 8003a3c:	f107 0310 	add.w	r3, r7, #16
 8003a40:	4611      	mov	r1, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 ff28 	bl	8004898 <xTaskCheckForTimeOut>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d123      	bne.n	8003a96 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a50:	f000 f9cd 	bl	8003dee <prvIsQueueEmpty>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d017      	beq.n	8003a8a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5c:	3324      	adds	r3, #36	; 0x24
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	4611      	mov	r1, r2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 fe52 	bl	800470c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a6a:	f000 f96e 	bl	8003d4a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a6e:	f000 fc8d 	bl	800438c <xTaskResumeAll>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d189      	bne.n	800398c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <xQueueReceive+0x1b4>)
 8003a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	e780      	b.n	800398c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003a8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a8c:	f000 f95d 	bl	8003d4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a90:	f000 fc7c 	bl	800438c <xTaskResumeAll>
 8003a94:	e77a      	b.n	800398c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003a96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a98:	f000 f957 	bl	8003d4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a9c:	f000 fc76 	bl	800438c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003aa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aa2:	f000 f9a4 	bl	8003dee <prvIsQueueEmpty>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f43f af6f 	beq.w	800398c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003aae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3730      	adds	r7, #48	; 0x30
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	e000ed04 	.word	0xe000ed04

08003abc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08e      	sub	sp, #56	; 0x38
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d109      	bne.n	8003ae6 <xQueueReceiveFromISR+0x2a>
 8003ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad6:	f383 8811 	msr	BASEPRI, r3
 8003ada:	f3bf 8f6f 	isb	sy
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	623b      	str	r3, [r7, #32]
 8003ae4:	e7fe      	b.n	8003ae4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d103      	bne.n	8003af4 <xQueueReceiveFromISR+0x38>
 8003aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <xQueueReceiveFromISR+0x3c>
 8003af4:	2301      	movs	r3, #1
 8003af6:	e000      	b.n	8003afa <xQueueReceiveFromISR+0x3e>
 8003af8:	2300      	movs	r3, #0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d109      	bne.n	8003b12 <xQueueReceiveFromISR+0x56>
 8003afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b02:	f383 8811 	msr	BASEPRI, r3
 8003b06:	f3bf 8f6f 	isb	sy
 8003b0a:	f3bf 8f4f 	dsb	sy
 8003b0e:	61fb      	str	r3, [r7, #28]
 8003b10:	e7fe      	b.n	8003b10 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b12:	f7ff fa17 	bl	8002f44 <vPortValidateInterruptPriority>
	__asm volatile
 8003b16:	f3ef 8211 	mrs	r2, BASEPRI
 8003b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1e:	f383 8811 	msr	BASEPRI, r3
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	61ba      	str	r2, [r7, #24]
 8003b2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003b2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d02f      	beq.n	8003b9e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b4c:	f000 f8d7 	bl	8003cfe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b52:	1e5a      	subs	r2, r3, #1
 8003b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b56:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003b58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b60:	d112      	bne.n	8003b88 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d016      	beq.n	8003b98 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	3310      	adds	r3, #16
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 fe1a 	bl	80047a8 <xTaskRemoveFromEventList>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00e      	beq.n	8003b98 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00b      	beq.n	8003b98 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	e007      	b.n	8003b98 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003b88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	b25a      	sxtb	r2, r3
 8003b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b9c:	e001      	b.n	8003ba2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3738      	adds	r7, #56	; 0x38
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b084      	sub	sp, #16
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d109      	bne.n	8003bd8 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	60bb      	str	r3, [r7, #8]
 8003bd6:	e7fe      	b.n	8003bd6 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8003bd8:	f7ff f8d8 	bl	8002d8c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8003be2:	f7ff f901 	bl	8002de8 <vPortExitCritical>

	return uxReturn;
 8003be6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d109      	bne.n	8003c16 <uxQueueMessagesWaitingFromISR+0x26>
 8003c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	e7fe      	b.n	8003c14 <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1a:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8003c1c:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003c1e:	4618      	mov	r0, r3
 8003c20:	371c      	adds	r7, #28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b086      	sub	sp, #24
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10d      	bne.n	8003c64 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d14d      	bne.n	8003cec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 ff7b 	bl	8004b50 <xTaskPriorityDisinherit>
 8003c5a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	609a      	str	r2, [r3, #8]
 8003c62:	e043      	b.n	8003cec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d119      	bne.n	8003c9e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6858      	ldr	r0, [r3, #4]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	461a      	mov	r2, r3
 8003c74:	68b9      	ldr	r1, [r7, #8]
 8003c76:	f002 fa21 	bl	80060bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	441a      	add	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d32b      	bcc.n	8003cec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	605a      	str	r2, [r3, #4]
 8003c9c:	e026      	b.n	8003cec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	68d8      	ldr	r0, [r3, #12]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	f002 fa07 	bl	80060bc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	425b      	negs	r3, r3
 8003cb8:	441a      	add	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d207      	bcs.n	8003cda <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	425b      	negs	r3, r3
 8003cd4:	441a      	add	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d105      	bne.n	8003cec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1c5a      	adds	r2, r3, #1
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003cf4:	697b      	ldr	r3, [r7, #20]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b082      	sub	sp, #8
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d018      	beq.n	8003d42 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68da      	ldr	r2, [r3, #12]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d18:	441a      	add	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d303      	bcc.n	8003d32 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68d9      	ldr	r1, [r3, #12]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	6838      	ldr	r0, [r7, #0]
 8003d3e:	f002 f9bd 	bl	80060bc <memcpy>
	}
}
 8003d42:	bf00      	nop
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b084      	sub	sp, #16
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003d52:	f7ff f81b 	bl	8002d8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d5c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d5e:	e011      	b.n	8003d84 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d012      	beq.n	8003d8e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3324      	adds	r3, #36	; 0x24
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fd1b 	bl	80047a8 <xTaskRemoveFromEventList>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003d78:	f000 fdee 	bl	8004958 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	dce9      	bgt.n	8003d60 <prvUnlockQueue+0x16>
 8003d8c:	e000      	b.n	8003d90 <prvUnlockQueue+0x46>
					break;
 8003d8e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	22ff      	movs	r2, #255	; 0xff
 8003d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003d98:	f7ff f826 	bl	8002de8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003d9c:	f7fe fff6 	bl	8002d8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003da6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003da8:	e011      	b.n	8003dce <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d012      	beq.n	8003dd8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	3310      	adds	r3, #16
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 fcf6 	bl	80047a8 <xTaskRemoveFromEventList>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003dc2:	f000 fdc9 	bl	8004958 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003dc6:	7bbb      	ldrb	r3, [r7, #14]
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003dce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	dce9      	bgt.n	8003daa <prvUnlockQueue+0x60>
 8003dd6:	e000      	b.n	8003dda <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003dd8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	22ff      	movs	r2, #255	; 0xff
 8003dde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003de2:	f7ff f801 	bl	8002de8 <vPortExitCritical>
}
 8003de6:	bf00      	nop
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003df6:	f7fe ffc9 	bl	8002d8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d102      	bne.n	8003e08 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003e02:	2301      	movs	r3, #1
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	e001      	b.n	8003e0c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e0c:	f7fe ffec 	bl	8002de8 <vPortExitCritical>

	return xReturn;
 8003e10:	68fb      	ldr	r3, [r7, #12]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e22:	f7fe ffb3 	bl	8002d8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d102      	bne.n	8003e38 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003e32:	2301      	movs	r3, #1
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	e001      	b.n	8003e3c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e3c:	f7fe ffd4 	bl	8002de8 <vPortExitCritical>

	return xReturn;
 8003e40:	68fb      	ldr	r3, [r7, #12]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
	...

08003e4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e56:	2300      	movs	r3, #0
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	e014      	b.n	8003e86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003e5c:	4a0e      	ldr	r2, [pc, #56]	; (8003e98 <vQueueAddToRegistry+0x4c>)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10b      	bne.n	8003e80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003e68:	490b      	ldr	r1, [pc, #44]	; (8003e98 <vQueueAddToRegistry+0x4c>)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003e72:	4a09      	ldr	r2, [pc, #36]	; (8003e98 <vQueueAddToRegistry+0x4c>)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	4413      	add	r3, r2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003e7e:	e005      	b.n	8003e8c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	3301      	adds	r3, #1
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2b07      	cmp	r3, #7
 8003e8a:	d9e7      	bls.n	8003e5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003e8c:	bf00      	nop
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	20004a38 	.word	0x20004a38

08003e9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003eac:	f7fe ff6e 	bl	8002d8c <vPortEnterCritical>
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003eb6:	b25b      	sxtb	r3, r3
 8003eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ebc:	d103      	bne.n	8003ec6 <vQueueWaitForMessageRestricted+0x2a>
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ecc:	b25b      	sxtb	r3, r3
 8003ece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ed2:	d103      	bne.n	8003edc <vQueueWaitForMessageRestricted+0x40>
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003edc:	f7fe ff84 	bl	8002de8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d106      	bne.n	8003ef6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	3324      	adds	r3, #36	; 0x24
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	68b9      	ldr	r1, [r7, #8]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 fc2f 	bl	8004754 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003ef6:	6978      	ldr	r0, [r7, #20]
 8003ef8:	f7ff ff27 	bl	8003d4a <prvUnlockQueue>
	}
 8003efc:	bf00      	nop
 8003efe:	3718      	adds	r7, #24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08e      	sub	sp, #56	; 0x38
 8003f08:	af04      	add	r7, sp, #16
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
 8003f10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d109      	bne.n	8003f2c <xTaskCreateStatic+0x28>
 8003f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1c:	f383 8811 	msr	BASEPRI, r3
 8003f20:	f3bf 8f6f 	isb	sy
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	623b      	str	r3, [r7, #32]
 8003f2a:	e7fe      	b.n	8003f2a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <xTaskCreateStatic+0x42>
 8003f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f36:	f383 8811 	msr	BASEPRI, r3
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	f3bf 8f4f 	dsb	sy
 8003f42:	61fb      	str	r3, [r7, #28]
 8003f44:	e7fe      	b.n	8003f44 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f46:	235c      	movs	r3, #92	; 0x5c
 8003f48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	2b5c      	cmp	r3, #92	; 0x5c
 8003f4e:	d009      	beq.n	8003f64 <xTaskCreateStatic+0x60>
 8003f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f54:	f383 8811 	msr	BASEPRI, r3
 8003f58:	f3bf 8f6f 	isb	sy
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	e7fe      	b.n	8003f62 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f64:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d01e      	beq.n	8003faa <xTaskCreateStatic+0xa6>
 8003f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d01b      	beq.n	8003faa <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f7a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f84:	2300      	movs	r3, #0
 8003f86:	9303      	str	r3, [sp, #12]
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	9302      	str	r3, [sp, #8]
 8003f8c:	f107 0314 	add.w	r3, r7, #20
 8003f90:	9301      	str	r3, [sp, #4]
 8003f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	68b9      	ldr	r1, [r7, #8]
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 f850 	bl	8004042 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fa2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fa4:	f000 f8dc 	bl	8004160 <prvAddNewTaskToReadyList>
 8003fa8:	e001      	b.n	8003fae <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003fae:	697b      	ldr	r3, [r7, #20]
	}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3728      	adds	r7, #40	; 0x28
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b08c      	sub	sp, #48	; 0x30
 8003fbc:	af04      	add	r7, sp, #16
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	603b      	str	r3, [r7, #0]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fe fff7 	bl	8002fc0 <pvPortMalloc>
 8003fd2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00e      	beq.n	8003ff8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003fda:	205c      	movs	r0, #92	; 0x5c
 8003fdc:	f7fe fff0 	bl	8002fc0 <pvPortMalloc>
 8003fe0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	631a      	str	r2, [r3, #48]	; 0x30
 8003fee:	e005      	b.n	8003ffc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ff0:	6978      	ldr	r0, [r7, #20]
 8003ff2:	f7ff f8a7 	bl	8003144 <vPortFree>
 8003ff6:	e001      	b.n	8003ffc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d017      	beq.n	8004032 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800400a:	88fa      	ldrh	r2, [r7, #6]
 800400c:	2300      	movs	r3, #0
 800400e:	9303      	str	r3, [sp, #12]
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	9302      	str	r3, [sp, #8]
 8004014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004016:	9301      	str	r3, [sp, #4]
 8004018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	68b9      	ldr	r1, [r7, #8]
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 f80e 	bl	8004042 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004026:	69f8      	ldr	r0, [r7, #28]
 8004028:	f000 f89a 	bl	8004160 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800402c:	2301      	movs	r3, #1
 800402e:	61bb      	str	r3, [r7, #24]
 8004030:	e002      	b.n	8004038 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004036:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004038:	69bb      	ldr	r3, [r7, #24]
	}
 800403a:	4618      	mov	r0, r3
 800403c:	3720      	adds	r7, #32
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b088      	sub	sp, #32
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
 800404e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004052:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	461a      	mov	r2, r3
 800405a:	21a5      	movs	r1, #165	; 0xa5
 800405c:	f002 f839 	bl	80060d2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800406a:	3b01      	subs	r3, #1
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	f023 0307 	bic.w	r3, r3, #7
 8004078:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	2b00      	cmp	r3, #0
 8004082:	d009      	beq.n	8004098 <prvInitialiseNewTask+0x56>
 8004084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	e7fe      	b.n	8004096 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d01f      	beq.n	80040de <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800409e:	2300      	movs	r3, #0
 80040a0:	61fb      	str	r3, [r7, #28]
 80040a2:	e012      	b.n	80040ca <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	4413      	add	r3, r2
 80040aa:	7819      	ldrb	r1, [r3, #0]
 80040ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	4413      	add	r3, r2
 80040b2:	3334      	adds	r3, #52	; 0x34
 80040b4:	460a      	mov	r2, r1
 80040b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	4413      	add	r3, r2
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d006      	beq.n	80040d2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	3301      	adds	r3, #1
 80040c8:	61fb      	str	r3, [r7, #28]
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	2b0f      	cmp	r3, #15
 80040ce:	d9e9      	bls.n	80040a4 <prvInitialiseNewTask+0x62>
 80040d0:	e000      	b.n	80040d4 <prvInitialiseNewTask+0x92>
			{
				break;
 80040d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040dc:	e003      	b.n	80040e6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80040de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e8:	2b37      	cmp	r3, #55	; 0x37
 80040ea:	d901      	bls.n	80040f0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040ec:	2337      	movs	r3, #55	; 0x37
 80040ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80040fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fe:	2200      	movs	r2, #0
 8004100:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	3304      	adds	r3, #4
 8004106:	4618      	mov	r0, r3
 8004108:	f7fe fc86 	bl	8002a18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800410c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410e:	3318      	adds	r3, #24
 8004110:	4618      	mov	r0, r3
 8004112:	f7fe fc81 	bl	8002a18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800411a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800411c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004124:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800412a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800412c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412e:	2200      	movs	r2, #0
 8004130:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	68f9      	ldr	r1, [r7, #12]
 800413e:	69b8      	ldr	r0, [r7, #24]
 8004140:	f7fe fcfe 	bl	8002b40 <pxPortInitialiseStack>
 8004144:	4602      	mov	r2, r0
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800414a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004156:	bf00      	nop
 8004158:	3720      	adds	r7, #32
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
	...

08004160 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004168:	f7fe fe10 	bl	8002d8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800416c:	4b2d      	ldr	r3, [pc, #180]	; (8004224 <prvAddNewTaskToReadyList+0xc4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3301      	adds	r3, #1
 8004172:	4a2c      	ldr	r2, [pc, #176]	; (8004224 <prvAddNewTaskToReadyList+0xc4>)
 8004174:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004176:	4b2c      	ldr	r3, [pc, #176]	; (8004228 <prvAddNewTaskToReadyList+0xc8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d109      	bne.n	8004192 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800417e:	4a2a      	ldr	r2, [pc, #168]	; (8004228 <prvAddNewTaskToReadyList+0xc8>)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004184:	4b27      	ldr	r3, [pc, #156]	; (8004224 <prvAddNewTaskToReadyList+0xc4>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d110      	bne.n	80041ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800418c:	f000 fc08 	bl	80049a0 <prvInitialiseTaskLists>
 8004190:	e00d      	b.n	80041ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004192:	4b26      	ldr	r3, [pc, #152]	; (800422c <prvAddNewTaskToReadyList+0xcc>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d109      	bne.n	80041ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800419a:	4b23      	ldr	r3, [pc, #140]	; (8004228 <prvAddNewTaskToReadyList+0xc8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d802      	bhi.n	80041ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80041a8:	4a1f      	ldr	r2, [pc, #124]	; (8004228 <prvAddNewTaskToReadyList+0xc8>)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80041ae:	4b20      	ldr	r3, [pc, #128]	; (8004230 <prvAddNewTaskToReadyList+0xd0>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3301      	adds	r3, #1
 80041b4:	4a1e      	ldr	r2, [pc, #120]	; (8004230 <prvAddNewTaskToReadyList+0xd0>)
 80041b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80041b8:	4b1d      	ldr	r3, [pc, #116]	; (8004230 <prvAddNewTaskToReadyList+0xd0>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c4:	4b1b      	ldr	r3, [pc, #108]	; (8004234 <prvAddNewTaskToReadyList+0xd4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d903      	bls.n	80041d4 <prvAddNewTaskToReadyList+0x74>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d0:	4a18      	ldr	r2, [pc, #96]	; (8004234 <prvAddNewTaskToReadyList+0xd4>)
 80041d2:	6013      	str	r3, [r2, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d8:	4613      	mov	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4a15      	ldr	r2, [pc, #84]	; (8004238 <prvAddNewTaskToReadyList+0xd8>)
 80041e2:	441a      	add	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3304      	adds	r3, #4
 80041e8:	4619      	mov	r1, r3
 80041ea:	4610      	mov	r0, r2
 80041ec:	f7fe fc21 	bl	8002a32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041f0:	f7fe fdfa 	bl	8002de8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041f4:	4b0d      	ldr	r3, [pc, #52]	; (800422c <prvAddNewTaskToReadyList+0xcc>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00e      	beq.n	800421a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041fc:	4b0a      	ldr	r3, [pc, #40]	; (8004228 <prvAddNewTaskToReadyList+0xc8>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004206:	429a      	cmp	r2, r3
 8004208:	d207      	bcs.n	800421a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800420a:	4b0c      	ldr	r3, [pc, #48]	; (800423c <prvAddNewTaskToReadyList+0xdc>)
 800420c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800421a:	bf00      	nop
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	200047dc 	.word	0x200047dc
 8004228:	20004308 	.word	0x20004308
 800422c:	200047e8 	.word	0x200047e8
 8004230:	200047f8 	.word	0x200047f8
 8004234:	200047e4 	.word	0x200047e4
 8004238:	2000430c 	.word	0x2000430c
 800423c:	e000ed04 	.word	0xe000ed04

08004240 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004248:	2300      	movs	r3, #0
 800424a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d016      	beq.n	8004280 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004252:	4b13      	ldr	r3, [pc, #76]	; (80042a0 <vTaskDelay+0x60>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d009      	beq.n	800426e <vTaskDelay+0x2e>
 800425a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425e:	f383 8811 	msr	BASEPRI, r3
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	e7fe      	b.n	800426c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800426e:	f000 f87f 	bl	8004370 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004272:	2100      	movs	r1, #0
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 fcd7 	bl	8004c28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800427a:	f000 f887 	bl	800438c <xTaskResumeAll>
 800427e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d107      	bne.n	8004296 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004286:	4b07      	ldr	r3, [pc, #28]	; (80042a4 <vTaskDelay+0x64>)
 8004288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004296:	bf00      	nop
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20004804 	.word	0x20004804
 80042a4:	e000ed04 	.word	0xe000ed04

080042a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08a      	sub	sp, #40	; 0x28
 80042ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042ae:	2300      	movs	r3, #0
 80042b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042b2:	2300      	movs	r3, #0
 80042b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042b6:	463a      	mov	r2, r7
 80042b8:	1d39      	adds	r1, r7, #4
 80042ba:	f107 0308 	add.w	r3, r7, #8
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fe fb56 	bl	8002970 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80042c4:	6839      	ldr	r1, [r7, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	9202      	str	r2, [sp, #8]
 80042cc:	9301      	str	r3, [sp, #4]
 80042ce:	2300      	movs	r3, #0
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	2300      	movs	r3, #0
 80042d4:	460a      	mov	r2, r1
 80042d6:	4920      	ldr	r1, [pc, #128]	; (8004358 <vTaskStartScheduler+0xb0>)
 80042d8:	4820      	ldr	r0, [pc, #128]	; (800435c <vTaskStartScheduler+0xb4>)
 80042da:	f7ff fe13 	bl	8003f04 <xTaskCreateStatic>
 80042de:	4602      	mov	r2, r0
 80042e0:	4b1f      	ldr	r3, [pc, #124]	; (8004360 <vTaskStartScheduler+0xb8>)
 80042e2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042e4:	4b1e      	ldr	r3, [pc, #120]	; (8004360 <vTaskStartScheduler+0xb8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d002      	beq.n	80042f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042ec:	2301      	movs	r3, #1
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	e001      	b.n	80042f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d102      	bne.n	8004302 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80042fc:	f000 fce8 	bl	8004cd0 <xTimerCreateTimerTask>
 8004300:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d115      	bne.n	8004334 <vTaskStartScheduler+0x8c>
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800431a:	4b12      	ldr	r3, [pc, #72]	; (8004364 <vTaskStartScheduler+0xbc>)
 800431c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004320:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004322:	4b11      	ldr	r3, [pc, #68]	; (8004368 <vTaskStartScheduler+0xc0>)
 8004324:	2201      	movs	r2, #1
 8004326:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004328:	4b10      	ldr	r3, [pc, #64]	; (800436c <vTaskStartScheduler+0xc4>)
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800432e:	f7fe fc8f 	bl	8002c50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004332:	e00d      	b.n	8004350 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800433a:	d109      	bne.n	8004350 <vTaskStartScheduler+0xa8>
 800433c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004340:	f383 8811 	msr	BASEPRI, r3
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	e7fe      	b.n	800434e <vTaskStartScheduler+0xa6>
}
 8004350:	bf00      	nop
 8004352:	3718      	adds	r7, #24
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	080060fc 	.word	0x080060fc
 800435c:	08004971 	.word	0x08004971
 8004360:	20004800 	.word	0x20004800
 8004364:	200047fc 	.word	0x200047fc
 8004368:	200047e8 	.word	0x200047e8
 800436c:	200047e0 	.word	0x200047e0

08004370 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004374:	4b04      	ldr	r3, [pc, #16]	; (8004388 <vTaskSuspendAll+0x18>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	3301      	adds	r3, #1
 800437a:	4a03      	ldr	r2, [pc, #12]	; (8004388 <vTaskSuspendAll+0x18>)
 800437c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800437e:	bf00      	nop
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	20004804 	.word	0x20004804

0800438c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004396:	2300      	movs	r3, #0
 8004398:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800439a:	4b41      	ldr	r3, [pc, #260]	; (80044a0 <xTaskResumeAll+0x114>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d109      	bne.n	80043b6 <xTaskResumeAll+0x2a>
 80043a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	e7fe      	b.n	80043b4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043b6:	f7fe fce9 	bl	8002d8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80043ba:	4b39      	ldr	r3, [pc, #228]	; (80044a0 <xTaskResumeAll+0x114>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	3b01      	subs	r3, #1
 80043c0:	4a37      	ldr	r2, [pc, #220]	; (80044a0 <xTaskResumeAll+0x114>)
 80043c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043c4:	4b36      	ldr	r3, [pc, #216]	; (80044a0 <xTaskResumeAll+0x114>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d162      	bne.n	8004492 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043cc:	4b35      	ldr	r3, [pc, #212]	; (80044a4 <xTaskResumeAll+0x118>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d05e      	beq.n	8004492 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043d4:	e02f      	b.n	8004436 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043d6:	4b34      	ldr	r3, [pc, #208]	; (80044a8 <xTaskResumeAll+0x11c>)
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	3318      	adds	r3, #24
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fe fb82 	bl	8002aec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	3304      	adds	r3, #4
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7fe fb7d 	bl	8002aec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f6:	4b2d      	ldr	r3, [pc, #180]	; (80044ac <xTaskResumeAll+0x120>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d903      	bls.n	8004406 <xTaskResumeAll+0x7a>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004402:	4a2a      	ldr	r2, [pc, #168]	; (80044ac <xTaskResumeAll+0x120>)
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440a:	4613      	mov	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4a27      	ldr	r2, [pc, #156]	; (80044b0 <xTaskResumeAll+0x124>)
 8004414:	441a      	add	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	3304      	adds	r3, #4
 800441a:	4619      	mov	r1, r3
 800441c:	4610      	mov	r0, r2
 800441e:	f7fe fb08 	bl	8002a32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004426:	4b23      	ldr	r3, [pc, #140]	; (80044b4 <xTaskResumeAll+0x128>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	429a      	cmp	r2, r3
 800442e:	d302      	bcc.n	8004436 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004430:	4b21      	ldr	r3, [pc, #132]	; (80044b8 <xTaskResumeAll+0x12c>)
 8004432:	2201      	movs	r2, #1
 8004434:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004436:	4b1c      	ldr	r3, [pc, #112]	; (80044a8 <xTaskResumeAll+0x11c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1cb      	bne.n	80043d6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004444:	f000 fb46 	bl	8004ad4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004448:	4b1c      	ldr	r3, [pc, #112]	; (80044bc <xTaskResumeAll+0x130>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d010      	beq.n	8004476 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004454:	f000 f846 	bl	80044e4 <xTaskIncrementTick>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800445e:	4b16      	ldr	r3, [pc, #88]	; (80044b8 <xTaskResumeAll+0x12c>)
 8004460:	2201      	movs	r2, #1
 8004462:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3b01      	subs	r3, #1
 8004468:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1f1      	bne.n	8004454 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004470:	4b12      	ldr	r3, [pc, #72]	; (80044bc <xTaskResumeAll+0x130>)
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004476:	4b10      	ldr	r3, [pc, #64]	; (80044b8 <xTaskResumeAll+0x12c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d009      	beq.n	8004492 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800447e:	2301      	movs	r3, #1
 8004480:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004482:	4b0f      	ldr	r3, [pc, #60]	; (80044c0 <xTaskResumeAll+0x134>)
 8004484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004492:	f7fe fca9 	bl	8002de8 <vPortExitCritical>

	return xAlreadyYielded;
 8004496:	68bb      	ldr	r3, [r7, #8]
}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20004804 	.word	0x20004804
 80044a4:	200047dc 	.word	0x200047dc
 80044a8:	2000479c 	.word	0x2000479c
 80044ac:	200047e4 	.word	0x200047e4
 80044b0:	2000430c 	.word	0x2000430c
 80044b4:	20004308 	.word	0x20004308
 80044b8:	200047f0 	.word	0x200047f0
 80044bc:	200047ec 	.word	0x200047ec
 80044c0:	e000ed04 	.word	0xe000ed04

080044c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80044ca:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <xTaskGetTickCount+0x1c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80044d0:	687b      	ldr	r3, [r7, #4]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	200047e0 	.word	0x200047e0

080044e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044ee:	4b4e      	ldr	r3, [pc, #312]	; (8004628 <xTaskIncrementTick+0x144>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f040 8088 	bne.w	8004608 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80044f8:	4b4c      	ldr	r3, [pc, #304]	; (800462c <xTaskIncrementTick+0x148>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	3301      	adds	r3, #1
 80044fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004500:	4a4a      	ldr	r2, [pc, #296]	; (800462c <xTaskIncrementTick+0x148>)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d11f      	bne.n	800454c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800450c:	4b48      	ldr	r3, [pc, #288]	; (8004630 <xTaskIncrementTick+0x14c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d009      	beq.n	800452a <xTaskIncrementTick+0x46>
 8004516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451a:	f383 8811 	msr	BASEPRI, r3
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	603b      	str	r3, [r7, #0]
 8004528:	e7fe      	b.n	8004528 <xTaskIncrementTick+0x44>
 800452a:	4b41      	ldr	r3, [pc, #260]	; (8004630 <xTaskIncrementTick+0x14c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	4b40      	ldr	r3, [pc, #256]	; (8004634 <xTaskIncrementTick+0x150>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a3e      	ldr	r2, [pc, #248]	; (8004630 <xTaskIncrementTick+0x14c>)
 8004536:	6013      	str	r3, [r2, #0]
 8004538:	4a3e      	ldr	r2, [pc, #248]	; (8004634 <xTaskIncrementTick+0x150>)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	4b3e      	ldr	r3, [pc, #248]	; (8004638 <xTaskIncrementTick+0x154>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3301      	adds	r3, #1
 8004544:	4a3c      	ldr	r2, [pc, #240]	; (8004638 <xTaskIncrementTick+0x154>)
 8004546:	6013      	str	r3, [r2, #0]
 8004548:	f000 fac4 	bl	8004ad4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800454c:	4b3b      	ldr	r3, [pc, #236]	; (800463c <xTaskIncrementTick+0x158>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	429a      	cmp	r2, r3
 8004554:	d349      	bcc.n	80045ea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004556:	4b36      	ldr	r3, [pc, #216]	; (8004630 <xTaskIncrementTick+0x14c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d104      	bne.n	800456a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004560:	4b36      	ldr	r3, [pc, #216]	; (800463c <xTaskIncrementTick+0x158>)
 8004562:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004566:	601a      	str	r2, [r3, #0]
					break;
 8004568:	e03f      	b.n	80045ea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800456a:	4b31      	ldr	r3, [pc, #196]	; (8004630 <xTaskIncrementTick+0x14c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	429a      	cmp	r2, r3
 8004580:	d203      	bcs.n	800458a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004582:	4a2e      	ldr	r2, [pc, #184]	; (800463c <xTaskIncrementTick+0x158>)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004588:	e02f      	b.n	80045ea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	3304      	adds	r3, #4
 800458e:	4618      	mov	r0, r3
 8004590:	f7fe faac 	bl	8002aec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004598:	2b00      	cmp	r3, #0
 800459a:	d004      	beq.n	80045a6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	3318      	adds	r3, #24
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fe faa3 	bl	8002aec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045aa:	4b25      	ldr	r3, [pc, #148]	; (8004640 <xTaskIncrementTick+0x15c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d903      	bls.n	80045ba <xTaskIncrementTick+0xd6>
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b6:	4a22      	ldr	r2, [pc, #136]	; (8004640 <xTaskIncrementTick+0x15c>)
 80045b8:	6013      	str	r3, [r2, #0]
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045be:	4613      	mov	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4a1f      	ldr	r2, [pc, #124]	; (8004644 <xTaskIncrementTick+0x160>)
 80045c8:	441a      	add	r2, r3
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	3304      	adds	r3, #4
 80045ce:	4619      	mov	r1, r3
 80045d0:	4610      	mov	r0, r2
 80045d2:	f7fe fa2e 	bl	8002a32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045da:	4b1b      	ldr	r3, [pc, #108]	; (8004648 <xTaskIncrementTick+0x164>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d3b8      	bcc.n	8004556 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80045e4:	2301      	movs	r3, #1
 80045e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045e8:	e7b5      	b.n	8004556 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045ea:	4b17      	ldr	r3, [pc, #92]	; (8004648 <xTaskIncrementTick+0x164>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f0:	4914      	ldr	r1, [pc, #80]	; (8004644 <xTaskIncrementTick+0x160>)
 80045f2:	4613      	mov	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	440b      	add	r3, r1
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d907      	bls.n	8004612 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8004602:	2301      	movs	r3, #1
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	e004      	b.n	8004612 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004608:	4b10      	ldr	r3, [pc, #64]	; (800464c <xTaskIncrementTick+0x168>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3301      	adds	r3, #1
 800460e:	4a0f      	ldr	r2, [pc, #60]	; (800464c <xTaskIncrementTick+0x168>)
 8004610:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004612:	4b0f      	ldr	r3, [pc, #60]	; (8004650 <xTaskIncrementTick+0x16c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800461a:	2301      	movs	r3, #1
 800461c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800461e:	697b      	ldr	r3, [r7, #20]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	20004804 	.word	0x20004804
 800462c:	200047e0 	.word	0x200047e0
 8004630:	20004794 	.word	0x20004794
 8004634:	20004798 	.word	0x20004798
 8004638:	200047f4 	.word	0x200047f4
 800463c:	200047fc 	.word	0x200047fc
 8004640:	200047e4 	.word	0x200047e4
 8004644:	2000430c 	.word	0x2000430c
 8004648:	20004308 	.word	0x20004308
 800464c:	200047ec 	.word	0x200047ec
 8004650:	200047f0 	.word	0x200047f0

08004654 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800465a:	4b27      	ldr	r3, [pc, #156]	; (80046f8 <vTaskSwitchContext+0xa4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004662:	4b26      	ldr	r3, [pc, #152]	; (80046fc <vTaskSwitchContext+0xa8>)
 8004664:	2201      	movs	r2, #1
 8004666:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004668:	e040      	b.n	80046ec <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800466a:	4b24      	ldr	r3, [pc, #144]	; (80046fc <vTaskSwitchContext+0xa8>)
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004670:	4b23      	ldr	r3, [pc, #140]	; (8004700 <vTaskSwitchContext+0xac>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	e00f      	b.n	8004698 <vTaskSwitchContext+0x44>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d109      	bne.n	8004692 <vTaskSwitchContext+0x3e>
 800467e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	607b      	str	r3, [r7, #4]
 8004690:	e7fe      	b.n	8004690 <vTaskSwitchContext+0x3c>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	3b01      	subs	r3, #1
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	491a      	ldr	r1, [pc, #104]	; (8004704 <vTaskSwitchContext+0xb0>)
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0e5      	beq.n	8004678 <vTaskSwitchContext+0x24>
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	4613      	mov	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4a13      	ldr	r2, [pc, #76]	; (8004704 <vTaskSwitchContext+0xb0>)
 80046b8:	4413      	add	r3, r2
 80046ba:	60bb      	str	r3, [r7, #8]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	605a      	str	r2, [r3, #4]
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	3308      	adds	r3, #8
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d104      	bne.n	80046dc <vTaskSwitchContext+0x88>
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	605a      	str	r2, [r3, #4]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	4a09      	ldr	r2, [pc, #36]	; (8004708 <vTaskSwitchContext+0xb4>)
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	4a06      	ldr	r2, [pc, #24]	; (8004700 <vTaskSwitchContext+0xac>)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6013      	str	r3, [r2, #0]
}
 80046ec:	bf00      	nop
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	20004804 	.word	0x20004804
 80046fc:	200047f0 	.word	0x200047f0
 8004700:	200047e4 	.word	0x200047e4
 8004704:	2000430c 	.word	0x2000430c
 8004708:	20004308 	.word	0x20004308

0800470c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d109      	bne.n	8004730 <vTaskPlaceOnEventList+0x24>
 800471c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	e7fe      	b.n	800472e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004730:	4b07      	ldr	r3, [pc, #28]	; (8004750 <vTaskPlaceOnEventList+0x44>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3318      	adds	r3, #24
 8004736:	4619      	mov	r1, r3
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7fe f99e 	bl	8002a7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800473e:	2101      	movs	r1, #1
 8004740:	6838      	ldr	r0, [r7, #0]
 8004742:	f000 fa71 	bl	8004c28 <prvAddCurrentTaskToDelayedList>
}
 8004746:	bf00      	nop
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	20004308 	.word	0x20004308

08004754 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d109      	bne.n	800477a <vTaskPlaceOnEventListRestricted+0x26>
 8004766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	e7fe      	b.n	8004778 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800477a:	4b0a      	ldr	r3, [pc, #40]	; (80047a4 <vTaskPlaceOnEventListRestricted+0x50>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3318      	adds	r3, #24
 8004780:	4619      	mov	r1, r3
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f7fe f955 	bl	8002a32 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800478e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004792:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	68b8      	ldr	r0, [r7, #8]
 8004798:	f000 fa46 	bl	8004c28 <prvAddCurrentTaskToDelayedList>
	}
 800479c:	bf00      	nop
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	20004308 	.word	0x20004308

080047a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d109      	bne.n	80047d2 <xTaskRemoveFromEventList+0x2a>
 80047be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	e7fe      	b.n	80047d0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	3318      	adds	r3, #24
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fe f988 	bl	8002aec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047dc:	4b1d      	ldr	r3, [pc, #116]	; (8004854 <xTaskRemoveFromEventList+0xac>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d11d      	bne.n	8004820 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	3304      	adds	r3, #4
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fe f97f 	bl	8002aec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f2:	4b19      	ldr	r3, [pc, #100]	; (8004858 <xTaskRemoveFromEventList+0xb0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d903      	bls.n	8004802 <xTaskRemoveFromEventList+0x5a>
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fe:	4a16      	ldr	r2, [pc, #88]	; (8004858 <xTaskRemoveFromEventList+0xb0>)
 8004800:	6013      	str	r3, [r2, #0]
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004806:	4613      	mov	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4a13      	ldr	r2, [pc, #76]	; (800485c <xTaskRemoveFromEventList+0xb4>)
 8004810:	441a      	add	r2, r3
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	3304      	adds	r3, #4
 8004816:	4619      	mov	r1, r3
 8004818:	4610      	mov	r0, r2
 800481a:	f7fe f90a 	bl	8002a32 <vListInsertEnd>
 800481e:	e005      	b.n	800482c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	3318      	adds	r3, #24
 8004824:	4619      	mov	r1, r3
 8004826:	480e      	ldr	r0, [pc, #56]	; (8004860 <xTaskRemoveFromEventList+0xb8>)
 8004828:	f7fe f903 	bl	8002a32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004830:	4b0c      	ldr	r3, [pc, #48]	; (8004864 <xTaskRemoveFromEventList+0xbc>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004836:	429a      	cmp	r2, r3
 8004838:	d905      	bls.n	8004846 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800483a:	2301      	movs	r3, #1
 800483c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800483e:	4b0a      	ldr	r3, [pc, #40]	; (8004868 <xTaskRemoveFromEventList+0xc0>)
 8004840:	2201      	movs	r2, #1
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	e001      	b.n	800484a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004846:	2300      	movs	r3, #0
 8004848:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800484a:	697b      	ldr	r3, [r7, #20]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	20004804 	.word	0x20004804
 8004858:	200047e4 	.word	0x200047e4
 800485c:	2000430c 	.word	0x2000430c
 8004860:	2000479c 	.word	0x2000479c
 8004864:	20004308 	.word	0x20004308
 8004868:	200047f0 	.word	0x200047f0

0800486c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004874:	4b06      	ldr	r3, [pc, #24]	; (8004890 <vTaskInternalSetTimeOutState+0x24>)
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800487c:	4b05      	ldr	r3, [pc, #20]	; (8004894 <vTaskInternalSetTimeOutState+0x28>)
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	605a      	str	r2, [r3, #4]
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	200047f4 	.word	0x200047f4
 8004894:	200047e0 	.word	0x200047e0

08004898 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b088      	sub	sp, #32
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d109      	bne.n	80048bc <xTaskCheckForTimeOut+0x24>
 80048a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	613b      	str	r3, [r7, #16]
 80048ba:	e7fe      	b.n	80048ba <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d109      	bne.n	80048d6 <xTaskCheckForTimeOut+0x3e>
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	e7fe      	b.n	80048d4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80048d6:	f7fe fa59 	bl	8002d8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80048da:	4b1d      	ldr	r3, [pc, #116]	; (8004950 <xTaskCheckForTimeOut+0xb8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048f2:	d102      	bne.n	80048fa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80048f4:	2300      	movs	r3, #0
 80048f6:	61fb      	str	r3, [r7, #28]
 80048f8:	e023      	b.n	8004942 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	4b15      	ldr	r3, [pc, #84]	; (8004954 <xTaskCheckForTimeOut+0xbc>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d007      	beq.n	8004916 <xTaskCheckForTimeOut+0x7e>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	429a      	cmp	r2, r3
 800490e:	d802      	bhi.n	8004916 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004910:	2301      	movs	r3, #1
 8004912:	61fb      	str	r3, [r7, #28]
 8004914:	e015      	b.n	8004942 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	429a      	cmp	r2, r3
 800491e:	d90b      	bls.n	8004938 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	1ad2      	subs	r2, r2, r3
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f7ff ff9d 	bl	800486c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004932:	2300      	movs	r3, #0
 8004934:	61fb      	str	r3, [r7, #28]
 8004936:	e004      	b.n	8004942 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	2200      	movs	r2, #0
 800493c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800493e:	2301      	movs	r3, #1
 8004940:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004942:	f7fe fa51 	bl	8002de8 <vPortExitCritical>

	return xReturn;
 8004946:	69fb      	ldr	r3, [r7, #28]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3720      	adds	r7, #32
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	200047e0 	.word	0x200047e0
 8004954:	200047f4 	.word	0x200047f4

08004958 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800495c:	4b03      	ldr	r3, [pc, #12]	; (800496c <vTaskMissedYield+0x14>)
 800495e:	2201      	movs	r2, #1
 8004960:	601a      	str	r2, [r3, #0]
}
 8004962:	bf00      	nop
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	200047f0 	.word	0x200047f0

08004970 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004978:	f000 f852 	bl	8004a20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800497c:	4b06      	ldr	r3, [pc, #24]	; (8004998 <prvIdleTask+0x28>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d9f9      	bls.n	8004978 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004984:	4b05      	ldr	r3, [pc, #20]	; (800499c <prvIdleTask+0x2c>)
 8004986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	f3bf 8f4f 	dsb	sy
 8004990:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004994:	e7f0      	b.n	8004978 <prvIdleTask+0x8>
 8004996:	bf00      	nop
 8004998:	2000430c 	.word	0x2000430c
 800499c:	e000ed04 	.word	0xe000ed04

080049a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049a6:	2300      	movs	r3, #0
 80049a8:	607b      	str	r3, [r7, #4]
 80049aa:	e00c      	b.n	80049c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	4613      	mov	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4a12      	ldr	r2, [pc, #72]	; (8004a00 <prvInitialiseTaskLists+0x60>)
 80049b8:	4413      	add	r3, r2
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fe f80c 	bl	80029d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3301      	adds	r3, #1
 80049c4:	607b      	str	r3, [r7, #4]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b37      	cmp	r3, #55	; 0x37
 80049ca:	d9ef      	bls.n	80049ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80049cc:	480d      	ldr	r0, [pc, #52]	; (8004a04 <prvInitialiseTaskLists+0x64>)
 80049ce:	f7fe f803 	bl	80029d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80049d2:	480d      	ldr	r0, [pc, #52]	; (8004a08 <prvInitialiseTaskLists+0x68>)
 80049d4:	f7fe f800 	bl	80029d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80049d8:	480c      	ldr	r0, [pc, #48]	; (8004a0c <prvInitialiseTaskLists+0x6c>)
 80049da:	f7fd fffd 	bl	80029d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80049de:	480c      	ldr	r0, [pc, #48]	; (8004a10 <prvInitialiseTaskLists+0x70>)
 80049e0:	f7fd fffa 	bl	80029d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80049e4:	480b      	ldr	r0, [pc, #44]	; (8004a14 <prvInitialiseTaskLists+0x74>)
 80049e6:	f7fd fff7 	bl	80029d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80049ea:	4b0b      	ldr	r3, [pc, #44]	; (8004a18 <prvInitialiseTaskLists+0x78>)
 80049ec:	4a05      	ldr	r2, [pc, #20]	; (8004a04 <prvInitialiseTaskLists+0x64>)
 80049ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049f0:	4b0a      	ldr	r3, [pc, #40]	; (8004a1c <prvInitialiseTaskLists+0x7c>)
 80049f2:	4a05      	ldr	r2, [pc, #20]	; (8004a08 <prvInitialiseTaskLists+0x68>)
 80049f4:	601a      	str	r2, [r3, #0]
}
 80049f6:	bf00      	nop
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	2000430c 	.word	0x2000430c
 8004a04:	2000476c 	.word	0x2000476c
 8004a08:	20004780 	.word	0x20004780
 8004a0c:	2000479c 	.word	0x2000479c
 8004a10:	200047b0 	.word	0x200047b0
 8004a14:	200047c8 	.word	0x200047c8
 8004a18:	20004794 	.word	0x20004794
 8004a1c:	20004798 	.word	0x20004798

08004a20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a26:	e019      	b.n	8004a5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a28:	f7fe f9b0 	bl	8002d8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a2c:	4b0f      	ldr	r3, [pc, #60]	; (8004a6c <prvCheckTasksWaitingTermination+0x4c>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3304      	adds	r3, #4
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fe f857 	bl	8002aec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a3e:	4b0c      	ldr	r3, [pc, #48]	; (8004a70 <prvCheckTasksWaitingTermination+0x50>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3b01      	subs	r3, #1
 8004a44:	4a0a      	ldr	r2, [pc, #40]	; (8004a70 <prvCheckTasksWaitingTermination+0x50>)
 8004a46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a48:	4b0a      	ldr	r3, [pc, #40]	; (8004a74 <prvCheckTasksWaitingTermination+0x54>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	4a09      	ldr	r2, [pc, #36]	; (8004a74 <prvCheckTasksWaitingTermination+0x54>)
 8004a50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a52:	f7fe f9c9 	bl	8002de8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f80e 	bl	8004a78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a5c:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <prvCheckTasksWaitingTermination+0x54>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e1      	bne.n	8004a28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a64:	bf00      	nop
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	200047b0 	.word	0x200047b0
 8004a70:	200047dc 	.word	0x200047dc
 8004a74:	200047c4 	.word	0x200047c4

08004a78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d108      	bne.n	8004a9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fe fb58 	bl	8003144 <vPortFree>
				vPortFree( pxTCB );
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7fe fb55 	bl	8003144 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a9a:	e017      	b.n	8004acc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d103      	bne.n	8004aae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7fe fb4c 	bl	8003144 <vPortFree>
	}
 8004aac:	e00e      	b.n	8004acc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d009      	beq.n	8004acc <prvDeleteTCB+0x54>
 8004ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	e7fe      	b.n	8004aca <prvDeleteTCB+0x52>
	}
 8004acc:	bf00      	nop
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ada:	4b0c      	ldr	r3, [pc, #48]	; (8004b0c <prvResetNextTaskUnblockTime+0x38>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d104      	bne.n	8004aee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ae4:	4b0a      	ldr	r3, [pc, #40]	; (8004b10 <prvResetNextTaskUnblockTime+0x3c>)
 8004ae6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004aea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004aec:	e008      	b.n	8004b00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aee:	4b07      	ldr	r3, [pc, #28]	; (8004b0c <prvResetNextTaskUnblockTime+0x38>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	4a04      	ldr	r2, [pc, #16]	; (8004b10 <prvResetNextTaskUnblockTime+0x3c>)
 8004afe:	6013      	str	r3, [r2, #0]
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	20004794 	.word	0x20004794
 8004b10:	200047fc 	.word	0x200047fc

08004b14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b1a:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <xTaskGetSchedulerState+0x34>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d102      	bne.n	8004b28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b22:	2301      	movs	r3, #1
 8004b24:	607b      	str	r3, [r7, #4]
 8004b26:	e008      	b.n	8004b3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b28:	4b08      	ldr	r3, [pc, #32]	; (8004b4c <xTaskGetSchedulerState+0x38>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d102      	bne.n	8004b36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b30:	2302      	movs	r3, #2
 8004b32:	607b      	str	r3, [r7, #4]
 8004b34:	e001      	b.n	8004b3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b36:	2300      	movs	r3, #0
 8004b38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b3a:	687b      	ldr	r3, [r7, #4]
	}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	200047e8 	.word	0x200047e8
 8004b4c:	20004804 	.word	0x20004804

08004b50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d054      	beq.n	8004c10 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b66:	4b2d      	ldr	r3, [pc, #180]	; (8004c1c <xTaskPriorityDisinherit+0xcc>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d009      	beq.n	8004b84 <xTaskPriorityDisinherit+0x34>
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	e7fe      	b.n	8004b82 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d109      	bne.n	8004ba0 <xTaskPriorityDisinherit+0x50>
 8004b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b90:	f383 8811 	msr	BASEPRI, r3
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	60bb      	str	r3, [r7, #8]
 8004b9e:	e7fe      	b.n	8004b9e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba4:	1e5a      	subs	r2, r3, #1
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d02c      	beq.n	8004c10 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d128      	bne.n	8004c10 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fd ff92 	bl	8002aec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be0:	4b0f      	ldr	r3, [pc, #60]	; (8004c20 <xTaskPriorityDisinherit+0xd0>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d903      	bls.n	8004bf0 <xTaskPriorityDisinherit+0xa0>
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bec:	4a0c      	ldr	r2, [pc, #48]	; (8004c20 <xTaskPriorityDisinherit+0xd0>)
 8004bee:	6013      	str	r3, [r2, #0]
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4a09      	ldr	r2, [pc, #36]	; (8004c24 <xTaskPriorityDisinherit+0xd4>)
 8004bfe:	441a      	add	r2, r3
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	3304      	adds	r3, #4
 8004c04:	4619      	mov	r1, r3
 8004c06:	4610      	mov	r0, r2
 8004c08:	f7fd ff13 	bl	8002a32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c10:	697b      	ldr	r3, [r7, #20]
	}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3718      	adds	r7, #24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20004308 	.word	0x20004308
 8004c20:	200047e4 	.word	0x200047e4
 8004c24:	2000430c 	.word	0x2000430c

08004c28 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c32:	4b21      	ldr	r3, [pc, #132]	; (8004cb8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c38:	4b20      	ldr	r3, [pc, #128]	; (8004cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fd ff54 	bl	8002aec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c4a:	d10a      	bne.n	8004c62 <prvAddCurrentTaskToDelayedList+0x3a>
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d007      	beq.n	8004c62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c52:	4b1a      	ldr	r3, [pc, #104]	; (8004cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3304      	adds	r3, #4
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4819      	ldr	r0, [pc, #100]	; (8004cc0 <prvAddCurrentTaskToDelayedList+0x98>)
 8004c5c:	f7fd fee9 	bl	8002a32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c60:	e026      	b.n	8004cb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4413      	add	r3, r2
 8004c68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c6a:	4b14      	ldr	r3, [pc, #80]	; (8004cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d209      	bcs.n	8004c8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c7a:	4b12      	ldr	r3, [pc, #72]	; (8004cc4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	4b0f      	ldr	r3, [pc, #60]	; (8004cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	3304      	adds	r3, #4
 8004c84:	4619      	mov	r1, r3
 8004c86:	4610      	mov	r0, r2
 8004c88:	f7fd fef7 	bl	8002a7a <vListInsert>
}
 8004c8c:	e010      	b.n	8004cb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c8e:	4b0e      	ldr	r3, [pc, #56]	; (8004cc8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	4b0a      	ldr	r3, [pc, #40]	; (8004cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3304      	adds	r3, #4
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	f7fd feed 	bl	8002a7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ca0:	4b0a      	ldr	r3, [pc, #40]	; (8004ccc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d202      	bcs.n	8004cb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004caa:	4a08      	ldr	r2, [pc, #32]	; (8004ccc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	6013      	str	r3, [r2, #0]
}
 8004cb0:	bf00      	nop
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	200047e0 	.word	0x200047e0
 8004cbc:	20004308 	.word	0x20004308
 8004cc0:	200047c8 	.word	0x200047c8
 8004cc4:	20004798 	.word	0x20004798
 8004cc8:	20004794 	.word	0x20004794
 8004ccc:	200047fc 	.word	0x200047fc

08004cd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08a      	sub	sp, #40	; 0x28
 8004cd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004cda:	f000 faff 	bl	80052dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004cde:	4b1c      	ldr	r3, [pc, #112]	; (8004d50 <xTimerCreateTimerTask+0x80>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d021      	beq.n	8004d2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004cee:	1d3a      	adds	r2, r7, #4
 8004cf0:	f107 0108 	add.w	r1, r7, #8
 8004cf4:	f107 030c 	add.w	r3, r7, #12
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7fd fe53 	bl	80029a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	9202      	str	r2, [sp, #8]
 8004d06:	9301      	str	r3, [sp, #4]
 8004d08:	2302      	movs	r3, #2
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	460a      	mov	r2, r1
 8004d10:	4910      	ldr	r1, [pc, #64]	; (8004d54 <xTimerCreateTimerTask+0x84>)
 8004d12:	4811      	ldr	r0, [pc, #68]	; (8004d58 <xTimerCreateTimerTask+0x88>)
 8004d14:	f7ff f8f6 	bl	8003f04 <xTaskCreateStatic>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	4b10      	ldr	r3, [pc, #64]	; (8004d5c <xTimerCreateTimerTask+0x8c>)
 8004d1c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004d1e:	4b0f      	ldr	r3, [pc, #60]	; (8004d5c <xTimerCreateTimerTask+0x8c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004d26:	2301      	movs	r3, #1
 8004d28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d109      	bne.n	8004d44 <xTimerCreateTimerTask+0x74>
 8004d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	613b      	str	r3, [r7, #16]
 8004d42:	e7fe      	b.n	8004d42 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004d44:	697b      	ldr	r3, [r7, #20]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20004838 	.word	0x20004838
 8004d54:	08006104 	.word	0x08006104
 8004d58:	08004e91 	.word	0x08004e91
 8004d5c:	2000483c 	.word	0x2000483c

08004d60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08a      	sub	sp, #40	; 0x28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
 8004d6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d109      	bne.n	8004d8c <xTimerGenericCommand+0x2c>
 8004d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7c:	f383 8811 	msr	BASEPRI, r3
 8004d80:	f3bf 8f6f 	isb	sy
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	623b      	str	r3, [r7, #32]
 8004d8a:	e7fe      	b.n	8004d8a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004d8c:	4b19      	ldr	r3, [pc, #100]	; (8004df4 <xTimerGenericCommand+0x94>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d02a      	beq.n	8004dea <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b05      	cmp	r3, #5
 8004da4:	dc18      	bgt.n	8004dd8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004da6:	f7ff feb5 	bl	8004b14 <xTaskGetSchedulerState>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d109      	bne.n	8004dc4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004db0:	4b10      	ldr	r3, [pc, #64]	; (8004df4 <xTimerGenericCommand+0x94>)
 8004db2:	6818      	ldr	r0, [r3, #0]
 8004db4:	f107 0110 	add.w	r1, r7, #16
 8004db8:	2300      	movs	r3, #0
 8004dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dbc:	f7fe fc14 	bl	80035e8 <xQueueGenericSend>
 8004dc0:	6278      	str	r0, [r7, #36]	; 0x24
 8004dc2:	e012      	b.n	8004dea <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004dc4:	4b0b      	ldr	r3, [pc, #44]	; (8004df4 <xTimerGenericCommand+0x94>)
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	f107 0110 	add.w	r1, r7, #16
 8004dcc:	2300      	movs	r3, #0
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f7fe fc0a 	bl	80035e8 <xQueueGenericSend>
 8004dd4:	6278      	str	r0, [r7, #36]	; 0x24
 8004dd6:	e008      	b.n	8004dea <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004dd8:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <xTimerGenericCommand+0x94>)
 8004dda:	6818      	ldr	r0, [r3, #0]
 8004ddc:	f107 0110 	add.w	r1, r7, #16
 8004de0:	2300      	movs	r3, #0
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	f7fe fcfa 	bl	80037dc <xQueueGenericSendFromISR>
 8004de8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3728      	adds	r7, #40	; 0x28
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	20004838 	.word	0x20004838

08004df8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b088      	sub	sp, #32
 8004dfc:	af02      	add	r7, sp, #8
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e02:	4b22      	ldr	r3, [pc, #136]	; (8004e8c <prvProcessExpiredTimer+0x94>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	3304      	adds	r3, #4
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fd fe6b 	bl	8002aec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d021      	beq.n	8004e68 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	699a      	ldr	r2, [r3, #24]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	18d1      	adds	r1, r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	6978      	ldr	r0, [r7, #20]
 8004e32:	f000 f8d1 	bl	8004fd8 <prvInsertTimerInActiveList>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d01e      	beq.n	8004e7a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	2300      	movs	r3, #0
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	2100      	movs	r1, #0
 8004e46:	6978      	ldr	r0, [r7, #20]
 8004e48:	f7ff ff8a 	bl	8004d60 <xTimerGenericCommand>
 8004e4c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d112      	bne.n	8004e7a <prvProcessExpiredTimer+0x82>
 8004e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	e7fe      	b.n	8004e66 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e6e:	f023 0301 	bic.w	r3, r3, #1
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	6978      	ldr	r0, [r7, #20]
 8004e80:	4798      	blx	r3
}
 8004e82:	bf00      	nop
 8004e84:	3718      	adds	r7, #24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20004830 	.word	0x20004830

08004e90 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e98:	f107 0308 	add.w	r3, r7, #8
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 f857 	bl	8004f50 <prvGetNextExpireTime>
 8004ea2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 f803 	bl	8004eb4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004eae:	f000 f8d5 	bl	800505c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004eb2:	e7f1      	b.n	8004e98 <prvTimerTask+0x8>

08004eb4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004ebe:	f7ff fa57 	bl	8004370 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ec2:	f107 0308 	add.w	r3, r7, #8
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 f866 	bl	8004f98 <prvSampleTimeNow>
 8004ecc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d130      	bne.n	8004f36 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10a      	bne.n	8004ef0 <prvProcessTimerOrBlockTask+0x3c>
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d806      	bhi.n	8004ef0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004ee2:	f7ff fa53 	bl	800438c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004ee6:	68f9      	ldr	r1, [r7, #12]
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7ff ff85 	bl	8004df8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004eee:	e024      	b.n	8004f3a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d008      	beq.n	8004f08 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004ef6:	4b13      	ldr	r3, [pc, #76]	; (8004f44 <prvProcessTimerOrBlockTask+0x90>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <prvProcessTimerOrBlockTask+0x50>
 8004f00:	2301      	movs	r3, #1
 8004f02:	e000      	b.n	8004f06 <prvProcessTimerOrBlockTask+0x52>
 8004f04:	2300      	movs	r3, #0
 8004f06:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f08:	4b0f      	ldr	r3, [pc, #60]	; (8004f48 <prvProcessTimerOrBlockTask+0x94>)
 8004f0a:	6818      	ldr	r0, [r3, #0]
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	4619      	mov	r1, r3
 8004f16:	f7fe ffc1 	bl	8003e9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f1a:	f7ff fa37 	bl	800438c <xTaskResumeAll>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10a      	bne.n	8004f3a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004f24:	4b09      	ldr	r3, [pc, #36]	; (8004f4c <prvProcessTimerOrBlockTask+0x98>)
 8004f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	f3bf 8f6f 	isb	sy
}
 8004f34:	e001      	b.n	8004f3a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004f36:	f7ff fa29 	bl	800438c <xTaskResumeAll>
}
 8004f3a:	bf00      	nop
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	20004834 	.word	0x20004834
 8004f48:	20004838 	.word	0x20004838
 8004f4c:	e000ed04 	.word	0xe000ed04

08004f50 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f58:	4b0e      	ldr	r3, [pc, #56]	; (8004f94 <prvGetNextExpireTime+0x44>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <prvGetNextExpireTime+0x16>
 8004f62:	2201      	movs	r2, #1
 8004f64:	e000      	b.n	8004f68 <prvGetNextExpireTime+0x18>
 8004f66:	2200      	movs	r2, #0
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d105      	bne.n	8004f80 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f74:	4b07      	ldr	r3, [pc, #28]	; (8004f94 <prvGetNextExpireTime+0x44>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	e001      	b.n	8004f84 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004f84:	68fb      	ldr	r3, [r7, #12]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	20004830 	.word	0x20004830

08004f98 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004fa0:	f7ff fa90 	bl	80044c4 <xTaskGetTickCount>
 8004fa4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004fa6:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <prvSampleTimeNow+0x3c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d205      	bcs.n	8004fbc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004fb0:	f000 f930 	bl	8005214 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	e002      	b.n	8004fc2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004fc2:	4a04      	ldr	r2, [pc, #16]	; (8004fd4 <prvSampleTimeNow+0x3c>)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	20004840 	.word	0x20004840

08004fd8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
 8004fe4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d812      	bhi.n	8005024 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	1ad2      	subs	r2, r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	429a      	cmp	r2, r3
 800500a:	d302      	bcc.n	8005012 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800500c:	2301      	movs	r3, #1
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	e01b      	b.n	800504a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005012:	4b10      	ldr	r3, [pc, #64]	; (8005054 <prvInsertTimerInActiveList+0x7c>)
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	3304      	adds	r3, #4
 800501a:	4619      	mov	r1, r3
 800501c:	4610      	mov	r0, r2
 800501e:	f7fd fd2c 	bl	8002a7a <vListInsert>
 8005022:	e012      	b.n	800504a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	429a      	cmp	r2, r3
 800502a:	d206      	bcs.n	800503a <prvInsertTimerInActiveList+0x62>
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	429a      	cmp	r2, r3
 8005032:	d302      	bcc.n	800503a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005034:	2301      	movs	r3, #1
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	e007      	b.n	800504a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800503a:	4b07      	ldr	r3, [pc, #28]	; (8005058 <prvInsertTimerInActiveList+0x80>)
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3304      	adds	r3, #4
 8005042:	4619      	mov	r1, r3
 8005044:	4610      	mov	r0, r2
 8005046:	f7fd fd18 	bl	8002a7a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800504a:	697b      	ldr	r3, [r7, #20]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3718      	adds	r7, #24
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	20004834 	.word	0x20004834
 8005058:	20004830 	.word	0x20004830

0800505c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08e      	sub	sp, #56	; 0x38
 8005060:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005062:	e0c6      	b.n	80051f2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	da17      	bge.n	800509a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800506a:	1d3b      	adds	r3, r7, #4
 800506c:	3304      	adds	r3, #4
 800506e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005072:	2b00      	cmp	r3, #0
 8005074:	d109      	bne.n	800508a <prvProcessReceivedCommands+0x2e>
 8005076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507a:	f383 8811 	msr	BASEPRI, r3
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	61fb      	str	r3, [r7, #28]
 8005088:	e7fe      	b.n	8005088 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800508a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005090:	6850      	ldr	r0, [r2, #4]
 8005092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005094:	6892      	ldr	r2, [r2, #8]
 8005096:	4611      	mov	r1, r2
 8005098:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	f2c0 80a8 	blt.w	80051f2 <prvProcessReceivedCommands+0x196>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80050a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d004      	beq.n	80050b8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b0:	3304      	adds	r3, #4
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fd fd1a 	bl	8002aec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050b8:	463b      	mov	r3, r7
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7ff ff6c 	bl	8004f98 <prvSampleTimeNow>
 80050c0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b09      	cmp	r3, #9
 80050c6:	f200 8093 	bhi.w	80051f0 <prvProcessReceivedCommands+0x194>
 80050ca:	a201      	add	r2, pc, #4	; (adr r2, 80050d0 <prvProcessReceivedCommands+0x74>)
 80050cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d0:	080050f9 	.word	0x080050f9
 80050d4:	080050f9 	.word	0x080050f9
 80050d8:	080050f9 	.word	0x080050f9
 80050dc:	0800516b 	.word	0x0800516b
 80050e0:	0800517f 	.word	0x0800517f
 80050e4:	080051c7 	.word	0x080051c7
 80050e8:	080050f9 	.word	0x080050f9
 80050ec:	080050f9 	.word	0x080050f9
 80050f0:	0800516b 	.word	0x0800516b
 80050f4:	0800517f 	.word	0x0800517f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80050f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050fe:	f043 0301 	orr.w	r3, r3, #1
 8005102:	b2da      	uxtb	r2, r3
 8005104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005106:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	18d1      	adds	r1, r2, r3
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005118:	f7ff ff5e 	bl	8004fd8 <prvInsertTimerInActiveList>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d067      	beq.n	80051f2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005128:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800512a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	2b00      	cmp	r3, #0
 8005136:	d05c      	beq.n	80051f2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	441a      	add	r2, r3
 8005140:	2300      	movs	r3, #0
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	2300      	movs	r3, #0
 8005146:	2100      	movs	r1, #0
 8005148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800514a:	f7ff fe09 	bl	8004d60 <xTimerGenericCommand>
 800514e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d14d      	bne.n	80051f2 <prvProcessReceivedCommands+0x196>
 8005156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	61bb      	str	r3, [r7, #24]
 8005168:	e7fe      	b.n	8005168 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800516a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005170:	f023 0301 	bic.w	r3, r3, #1
 8005174:	b2da      	uxtb	r2, r3
 8005176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005178:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800517c:	e039      	b.n	80051f2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800517e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005180:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005184:	f043 0301 	orr.w	r3, r3, #1
 8005188:	b2da      	uxtb	r2, r3
 800518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d109      	bne.n	80051b2 <prvProcessReceivedCommands+0x156>
 800519e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	617b      	str	r3, [r7, #20]
 80051b0:	e7fe      	b.n	80051b0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80051b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b4:	699a      	ldr	r2, [r3, #24]
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	18d1      	adds	r1, r2, r3
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051c0:	f7ff ff0a 	bl	8004fd8 <prvInsertTimerInActiveList>
					break;
 80051c4:	e015      	b.n	80051f2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80051c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d103      	bne.n	80051dc <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80051d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051d6:	f7fd ffb5 	bl	8003144 <vPortFree>
 80051da:	e00a      	b.n	80051f2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051e2:	f023 0301 	bic.w	r3, r3, #1
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80051ee:	e000      	b.n	80051f2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
 80051f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80051f2:	4b07      	ldr	r3, [pc, #28]	; (8005210 <prvProcessReceivedCommands+0x1b4>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	1d39      	adds	r1, r7, #4
 80051f8:	2200      	movs	r2, #0
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fe fb82 	bl	8003904 <xQueueReceive>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	f47f af2e 	bne.w	8005064 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005208:	bf00      	nop
 800520a:	3730      	adds	r7, #48	; 0x30
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	20004838 	.word	0x20004838

08005214 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b088      	sub	sp, #32
 8005218:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800521a:	e047      	b.n	80052ac <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800521c:	4b2d      	ldr	r3, [pc, #180]	; (80052d4 <prvSwitchTimerLists+0xc0>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005226:	4b2b      	ldr	r3, [pc, #172]	; (80052d4 <prvSwitchTimerLists+0xc0>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	3304      	adds	r3, #4
 8005234:	4618      	mov	r0, r3
 8005236:	f7fd fc59 	bl	8002aec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	6938      	ldr	r0, [r7, #16]
 8005240:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	d02d      	beq.n	80052ac <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	699a      	ldr	r2, [r3, #24]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	4413      	add	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	429a      	cmp	r2, r3
 8005260:	d90e      	bls.n	8005280 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800526e:	4b19      	ldr	r3, [pc, #100]	; (80052d4 <prvSwitchTimerLists+0xc0>)
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	3304      	adds	r3, #4
 8005276:	4619      	mov	r1, r3
 8005278:	4610      	mov	r0, r2
 800527a:	f7fd fbfe 	bl	8002a7a <vListInsert>
 800527e:	e015      	b.n	80052ac <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005280:	2300      	movs	r3, #0
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	2300      	movs	r3, #0
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	2100      	movs	r1, #0
 800528a:	6938      	ldr	r0, [r7, #16]
 800528c:	f7ff fd68 	bl	8004d60 <xTimerGenericCommand>
 8005290:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d109      	bne.n	80052ac <prvSwitchTimerLists+0x98>
 8005298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	603b      	str	r3, [r7, #0]
 80052aa:	e7fe      	b.n	80052aa <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052ac:	4b09      	ldr	r3, [pc, #36]	; (80052d4 <prvSwitchTimerLists+0xc0>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1b2      	bne.n	800521c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80052b6:	4b07      	ldr	r3, [pc, #28]	; (80052d4 <prvSwitchTimerLists+0xc0>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 80052bc:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <prvSwitchTimerLists+0xc4>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a04      	ldr	r2, [pc, #16]	; (80052d4 <prvSwitchTimerLists+0xc0>)
 80052c2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80052c4:	4a04      	ldr	r2, [pc, #16]	; (80052d8 <prvSwitchTimerLists+0xc4>)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6013      	str	r3, [r2, #0]
}
 80052ca:	bf00      	nop
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	20004830 	.word	0x20004830
 80052d8:	20004834 	.word	0x20004834

080052dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80052e2:	f7fd fd53 	bl	8002d8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80052e6:	4b15      	ldr	r3, [pc, #84]	; (800533c <prvCheckForValidListAndQueue+0x60>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d120      	bne.n	8005330 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80052ee:	4814      	ldr	r0, [pc, #80]	; (8005340 <prvCheckForValidListAndQueue+0x64>)
 80052f0:	f7fd fb72 	bl	80029d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80052f4:	4813      	ldr	r0, [pc, #76]	; (8005344 <prvCheckForValidListAndQueue+0x68>)
 80052f6:	f7fd fb6f 	bl	80029d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80052fa:	4b13      	ldr	r3, [pc, #76]	; (8005348 <prvCheckForValidListAndQueue+0x6c>)
 80052fc:	4a10      	ldr	r2, [pc, #64]	; (8005340 <prvCheckForValidListAndQueue+0x64>)
 80052fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005300:	4b12      	ldr	r3, [pc, #72]	; (800534c <prvCheckForValidListAndQueue+0x70>)
 8005302:	4a10      	ldr	r2, [pc, #64]	; (8005344 <prvCheckForValidListAndQueue+0x68>)
 8005304:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005306:	2300      	movs	r3, #0
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	4b11      	ldr	r3, [pc, #68]	; (8005350 <prvCheckForValidListAndQueue+0x74>)
 800530c:	4a11      	ldr	r2, [pc, #68]	; (8005354 <prvCheckForValidListAndQueue+0x78>)
 800530e:	2110      	movs	r1, #16
 8005310:	200a      	movs	r0, #10
 8005312:	f7fe f893 	bl	800343c <xQueueGenericCreateStatic>
 8005316:	4602      	mov	r2, r0
 8005318:	4b08      	ldr	r3, [pc, #32]	; (800533c <prvCheckForValidListAndQueue+0x60>)
 800531a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800531c:	4b07      	ldr	r3, [pc, #28]	; (800533c <prvCheckForValidListAndQueue+0x60>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d005      	beq.n	8005330 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005324:	4b05      	ldr	r3, [pc, #20]	; (800533c <prvCheckForValidListAndQueue+0x60>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	490b      	ldr	r1, [pc, #44]	; (8005358 <prvCheckForValidListAndQueue+0x7c>)
 800532a:	4618      	mov	r0, r3
 800532c:	f7fe fd8e 	bl	8003e4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005330:	f7fd fd5a 	bl	8002de8 <vPortExitCritical>
}
 8005334:	bf00      	nop
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	20004838 	.word	0x20004838
 8005340:	20004808 	.word	0x20004808
 8005344:	2000481c 	.word	0x2000481c
 8005348:	20004830 	.word	0x20004830
 800534c:	20004834 	.word	0x20004834
 8005350:	200048e4 	.word	0x200048e4
 8005354:	20004844 	.word	0x20004844
 8005358:	0800610c 	.word	0x0800610c

0800535c <ascii_to_int>:
void set_one_led (int x, int y, int color_value){
	int target = get_target_led(x, y);
	matrix_1D[target]=color_value;
}

uint8_t ascii_to_int(char charachter){
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	4603      	mov	r3, r0
 8005364:	71fb      	strb	r3, [r7, #7]
	uint8_t int_result;
	if (charachter == '0'){
 8005366:	79fb      	ldrb	r3, [r7, #7]
 8005368:	2b30      	cmp	r3, #48	; 0x30
 800536a:	d102      	bne.n	8005372 <ascii_to_int+0x16>
		int_result = 0;
 800536c:	2300      	movs	r3, #0
 800536e:	73fb      	strb	r3, [r7, #15]
 8005370:	e058      	b.n	8005424 <ascii_to_int+0xc8>
	}
	else if (charachter == '1'){
 8005372:	79fb      	ldrb	r3, [r7, #7]
 8005374:	2b31      	cmp	r3, #49	; 0x31
 8005376:	d102      	bne.n	800537e <ascii_to_int+0x22>
		int_result = 1;
 8005378:	2301      	movs	r3, #1
 800537a:	73fb      	strb	r3, [r7, #15]
 800537c:	e052      	b.n	8005424 <ascii_to_int+0xc8>
	}
	else if (charachter == '2'){
 800537e:	79fb      	ldrb	r3, [r7, #7]
 8005380:	2b32      	cmp	r3, #50	; 0x32
 8005382:	d102      	bne.n	800538a <ascii_to_int+0x2e>
		int_result = 2;
 8005384:	2302      	movs	r3, #2
 8005386:	73fb      	strb	r3, [r7, #15]
 8005388:	e04c      	b.n	8005424 <ascii_to_int+0xc8>
	}
	else if (charachter == '3'){
 800538a:	79fb      	ldrb	r3, [r7, #7]
 800538c:	2b33      	cmp	r3, #51	; 0x33
 800538e:	d102      	bne.n	8005396 <ascii_to_int+0x3a>
		int_result = 3;
 8005390:	2303      	movs	r3, #3
 8005392:	73fb      	strb	r3, [r7, #15]
 8005394:	e046      	b.n	8005424 <ascii_to_int+0xc8>
	}
	else if (charachter == '4'){
 8005396:	79fb      	ldrb	r3, [r7, #7]
 8005398:	2b34      	cmp	r3, #52	; 0x34
 800539a:	d102      	bne.n	80053a2 <ascii_to_int+0x46>
		int_result = 4;
 800539c:	2304      	movs	r3, #4
 800539e:	73fb      	strb	r3, [r7, #15]
 80053a0:	e040      	b.n	8005424 <ascii_to_int+0xc8>
	}
	else if (charachter == '5'){
 80053a2:	79fb      	ldrb	r3, [r7, #7]
 80053a4:	2b35      	cmp	r3, #53	; 0x35
 80053a6:	d102      	bne.n	80053ae <ascii_to_int+0x52>
		int_result = 5;
 80053a8:	2305      	movs	r3, #5
 80053aa:	73fb      	strb	r3, [r7, #15]
 80053ac:	e03a      	b.n	8005424 <ascii_to_int+0xc8>
	}
	else if (charachter == '6'){
 80053ae:	79fb      	ldrb	r3, [r7, #7]
 80053b0:	2b36      	cmp	r3, #54	; 0x36
 80053b2:	d102      	bne.n	80053ba <ascii_to_int+0x5e>
		int_result = 6;
 80053b4:	2306      	movs	r3, #6
 80053b6:	73fb      	strb	r3, [r7, #15]
 80053b8:	e034      	b.n	8005424 <ascii_to_int+0xc8>
	}
	else if (charachter == '7'){
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	2b37      	cmp	r3, #55	; 0x37
 80053be:	d102      	bne.n	80053c6 <ascii_to_int+0x6a>
		int_result = 7;
 80053c0:	2307      	movs	r3, #7
 80053c2:	73fb      	strb	r3, [r7, #15]
 80053c4:	e02e      	b.n	8005424 <ascii_to_int+0xc8>
	}
	else if (charachter == '8'){
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	2b38      	cmp	r3, #56	; 0x38
 80053ca:	d102      	bne.n	80053d2 <ascii_to_int+0x76>
		int_result = 8;
 80053cc:	2308      	movs	r3, #8
 80053ce:	73fb      	strb	r3, [r7, #15]
 80053d0:	e028      	b.n	8005424 <ascii_to_int+0xc8>
	}
	else if (charachter == '9'){
 80053d2:	79fb      	ldrb	r3, [r7, #7]
 80053d4:	2b39      	cmp	r3, #57	; 0x39
 80053d6:	d102      	bne.n	80053de <ascii_to_int+0x82>
		int_result = 9;
 80053d8:	2309      	movs	r3, #9
 80053da:	73fb      	strb	r3, [r7, #15]
 80053dc:	e022      	b.n	8005424 <ascii_to_int+0xc8>
	}
	else if (charachter == 'A'){
 80053de:	79fb      	ldrb	r3, [r7, #7]
 80053e0:	2b41      	cmp	r3, #65	; 0x41
 80053e2:	d102      	bne.n	80053ea <ascii_to_int+0x8e>
		int_result = 10;
 80053e4:	230a      	movs	r3, #10
 80053e6:	73fb      	strb	r3, [r7, #15]
 80053e8:	e01c      	b.n	8005424 <ascii_to_int+0xc8>
	}
	else if (charachter == 'B'){
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	2b42      	cmp	r3, #66	; 0x42
 80053ee:	d102      	bne.n	80053f6 <ascii_to_int+0x9a>
		int_result = 11;
 80053f0:	230b      	movs	r3, #11
 80053f2:	73fb      	strb	r3, [r7, #15]
 80053f4:	e016      	b.n	8005424 <ascii_to_int+0xc8>
	}
	else if (charachter == 'C'){
 80053f6:	79fb      	ldrb	r3, [r7, #7]
 80053f8:	2b43      	cmp	r3, #67	; 0x43
 80053fa:	d102      	bne.n	8005402 <ascii_to_int+0xa6>
		int_result = 12;
 80053fc:	230c      	movs	r3, #12
 80053fe:	73fb      	strb	r3, [r7, #15]
 8005400:	e010      	b.n	8005424 <ascii_to_int+0xc8>
	}
	else if (charachter == 'D'){
 8005402:	79fb      	ldrb	r3, [r7, #7]
 8005404:	2b44      	cmp	r3, #68	; 0x44
 8005406:	d102      	bne.n	800540e <ascii_to_int+0xb2>
		int_result = 13;
 8005408:	230d      	movs	r3, #13
 800540a:	73fb      	strb	r3, [r7, #15]
 800540c:	e00a      	b.n	8005424 <ascii_to_int+0xc8>
	}
	else if (charachter == 'E'){
 800540e:	79fb      	ldrb	r3, [r7, #7]
 8005410:	2b45      	cmp	r3, #69	; 0x45
 8005412:	d102      	bne.n	800541a <ascii_to_int+0xbe>
		int_result = 14;
 8005414:	230e      	movs	r3, #14
 8005416:	73fb      	strb	r3, [r7, #15]
 8005418:	e004      	b.n	8005424 <ascii_to_int+0xc8>
	}
	else if (charachter == 'F'){
 800541a:	79fb      	ldrb	r3, [r7, #7]
 800541c:	2b46      	cmp	r3, #70	; 0x46
 800541e:	d101      	bne.n	8005424 <ascii_to_int+0xc8>
		int_result = 15;
 8005420:	230f      	movs	r3, #15
 8005422:	73fb      	strb	r3, [r7, #15]
	}
	return int_result;
 8005424:	7bfb      	ldrb	r3, [r7, #15]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <assemble_2int>:

uint8_t assemble_2int(uint8_t int1, uint8_t int2){
 8005432:	b480      	push	{r7}
 8005434:	b085      	sub	sp, #20
 8005436:	af00      	add	r7, sp, #0
 8005438:	4603      	mov	r3, r0
 800543a:	460a      	mov	r2, r1
 800543c:	71fb      	strb	r3, [r7, #7]
 800543e:	4613      	mov	r3, r2
 8005440:	71bb      	strb	r3, [r7, #6]
	uint8_t int_result = (int1*16)+int2;
 8005442:	79fb      	ldrb	r3, [r7, #7]
 8005444:	011b      	lsls	r3, r3, #4
 8005446:	b2da      	uxtb	r2, r3
 8005448:	79bb      	ldrb	r3, [r7, #6]
 800544a:	4413      	add	r3, r2
 800544c:	73fb      	strb	r3, [r7, #15]
	return int_result;
 800544e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005450:	4618      	mov	r0, r3
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <assemble_couleur>:


int assemble_couleur(uint8_t red_value, uint8_t green_value, uint8_t blue_value){
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	4603      	mov	r3, r0
 8005464:	71fb      	strb	r3, [r7, #7]
 8005466:	460b      	mov	r3, r1
 8005468:	71bb      	strb	r3, [r7, #6]
 800546a:	4613      	mov	r3, r2
 800546c:	717b      	strb	r3, [r7, #5]
	int color_value = 0;
 800546e:	2300      	movs	r3, #0
 8005470:	60fb      	str	r3, [r7, #12]
	color_value = (green_value << 16 | red_value << 8 | blue_value);
 8005472:	79bb      	ldrb	r3, [r7, #6]
 8005474:	041a      	lsls	r2, r3, #16
 8005476:	79fb      	ldrb	r3, [r7, #7]
 8005478:	021b      	lsls	r3, r3, #8
 800547a:	431a      	orrs	r2, r3
 800547c:	797b      	ldrb	r3, [r7, #5]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]
	return color_value;
 8005482:	68fb      	ldr	r3, [r7, #12]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <send_frame_to_leds_1D>:


void send_frame_to_leds_1D(int target_led){
 8005490:	b580      	push	{r7, lr}
 8005492:	b08a      	sub	sp, #40	; 0x28
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
	vTaskSuspendAll();
 8005498:	f7fe ff6a 	bl	8004370 <vTaskSuspendAll>
	SysTick->CTRL &= ~1;
 800549c:	4a41      	ldr	r2, [pc, #260]	; (80055a4 <send_frame_to_leds_1D+0x114>)
 800549e:	4b41      	ldr	r3, [pc, #260]	; (80055a4 <send_frame_to_leds_1D+0x114>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f023 0301 	bic.w	r3, r3, #1
 80054a6:	6013      	str	r3, [r2, #0]
	TIM1->CR1 &= ~TIM_CR1_CEN;
 80054a8:	4a3f      	ldr	r2, [pc, #252]	; (80055a8 <send_frame_to_leds_1D+0x118>)
 80054aa:	4b3f      	ldr	r3, [pc, #252]	; (80055a8 <send_frame_to_leds_1D+0x118>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f023 0301 	bic.w	r3, r3, #1
 80054b2:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LEDS_MODULE_GPIO_Port, LEDS_MODULE_Pin, 0);
 80054b4:	2200      	movs	r2, #0
 80054b6:	2120      	movs	r1, #32
 80054b8:	483c      	ldr	r0, [pc, #240]	; (80055ac <send_frame_to_leds_1D+0x11c>)
 80054ba:	f7fb fb5d 	bl	8000b78 <HAL_GPIO_WritePin>
	for (int j = 0; j < target_led+1; j++){
 80054be:	2300      	movs	r3, #0
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24
 80054c2:	e058      	b.n	8005576 <send_frame_to_leds_1D+0xe6>
		int masque = 0x800000;
 80054c4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80054c8:	623b      	str	r3, [r7, #32]
		for (int i = 23; i >= 1 ; i --){
 80054ca:	2317      	movs	r3, #23
 80054cc:	61fb      	str	r3, [r7, #28]
 80054ce:	e042      	b.n	8005556 <send_frame_to_leds_1D+0xc6>
			int high1 = T1H;
 80054d0:	230a      	movs	r3, #10
 80054d2:	61bb      	str	r3, [r7, #24]
			int low1 = T1L;
 80054d4:	2302      	movs	r3, #2
 80054d6:	617b      	str	r3, [r7, #20]
			int high0 = T0H;
 80054d8:	2301      	movs	r3, #1
 80054da:	613b      	str	r3, [r7, #16]
			int low0 = T0L;
 80054dc:	2309      	movs	r3, #9
 80054de:	60fb      	str	r3, [r7, #12]
			if (matrix_1D[j] & masque){
 80054e0:	4a33      	ldr	r2, [pc, #204]	; (80055b0 <send_frame_to_leds_1D+0x120>)
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	4013      	ands	r3, r2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d016      	beq.n	800551e <send_frame_to_leds_1D+0x8e>
				HAL_GPIO_WritePin(LEDS_MODULE_GPIO_Port, LEDS_MODULE_Pin, 1);
 80054f0:	2201      	movs	r2, #1
 80054f2:	2120      	movs	r1, #32
 80054f4:	482d      	ldr	r0, [pc, #180]	; (80055ac <send_frame_to_leds_1D+0x11c>)
 80054f6:	f7fb fb3f 	bl	8000b78 <HAL_GPIO_WritePin>
				while(high1--);
 80054fa:	bf00      	nop
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	1e5a      	subs	r2, r3, #1
 8005500:	61ba      	str	r2, [r7, #24]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1fa      	bne.n	80054fc <send_frame_to_leds_1D+0x6c>
				HAL_GPIO_WritePin(LEDS_MODULE_GPIO_Port, LEDS_MODULE_Pin, 0);
 8005506:	2200      	movs	r2, #0
 8005508:	2120      	movs	r1, #32
 800550a:	4828      	ldr	r0, [pc, #160]	; (80055ac <send_frame_to_leds_1D+0x11c>)
 800550c:	f7fb fb34 	bl	8000b78 <HAL_GPIO_WritePin>
				while(low1--);
 8005510:	bf00      	nop
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	1e5a      	subs	r2, r3, #1
 8005516:	617a      	str	r2, [r7, #20]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1fa      	bne.n	8005512 <send_frame_to_leds_1D+0x82>
 800551c:	e015      	b.n	800554a <send_frame_to_leds_1D+0xba>
			}
			else{
				HAL_GPIO_WritePin(LEDS_MODULE_GPIO_Port, LEDS_MODULE_Pin, 1);
 800551e:	2201      	movs	r2, #1
 8005520:	2120      	movs	r1, #32
 8005522:	4822      	ldr	r0, [pc, #136]	; (80055ac <send_frame_to_leds_1D+0x11c>)
 8005524:	f7fb fb28 	bl	8000b78 <HAL_GPIO_WritePin>
				while(high0--);
 8005528:	bf00      	nop
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1e5a      	subs	r2, r3, #1
 800552e:	613a      	str	r2, [r7, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1fa      	bne.n	800552a <send_frame_to_leds_1D+0x9a>
				HAL_GPIO_WritePin(LEDS_MODULE_GPIO_Port, LEDS_MODULE_Pin, 0);
 8005534:	2200      	movs	r2, #0
 8005536:	2120      	movs	r1, #32
 8005538:	481c      	ldr	r0, [pc, #112]	; (80055ac <send_frame_to_leds_1D+0x11c>)
 800553a:	f7fb fb1d 	bl	8000b78 <HAL_GPIO_WritePin>
				while(low0--);
 800553e:	bf00      	nop
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	1e5a      	subs	r2, r3, #1
 8005544:	60fa      	str	r2, [r7, #12]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1fa      	bne.n	8005540 <send_frame_to_leds_1D+0xb0>
			}
			masque >>= 1;
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	105b      	asrs	r3, r3, #1
 800554e:	623b      	str	r3, [r7, #32]
		for (int i = 23; i >= 1 ; i --){
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	3b01      	subs	r3, #1
 8005554:	61fb      	str	r3, [r7, #28]
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	2b00      	cmp	r3, #0
 800555a:	dcb9      	bgt.n	80054d0 <send_frame_to_leds_1D+0x40>
		}
		HAL_GPIO_WritePin(LEDS_MODULE_GPIO_Port, LEDS_MODULE_Pin, 1);
 800555c:	2201      	movs	r2, #1
 800555e:	2120      	movs	r1, #32
 8005560:	4812      	ldr	r0, [pc, #72]	; (80055ac <send_frame_to_leds_1D+0x11c>)
 8005562:	f7fb fb09 	bl	8000b78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDS_MODULE_GPIO_Port, LEDS_MODULE_Pin, 0);
 8005566:	2200      	movs	r2, #0
 8005568:	2120      	movs	r1, #32
 800556a:	4810      	ldr	r0, [pc, #64]	; (80055ac <send_frame_to_leds_1D+0x11c>)
 800556c:	f7fb fb04 	bl	8000b78 <HAL_GPIO_WritePin>
	for (int j = 0; j < target_led+1; j++){
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	3301      	adds	r3, #1
 8005574:	627b      	str	r3, [r7, #36]	; 0x24
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	1c5a      	adds	r2, r3, #1
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	429a      	cmp	r2, r3
 800557e:	dca1      	bgt.n	80054c4 <send_frame_to_leds_1D+0x34>
	}
	TIM1->CR1 |= TIM_CR1_CEN;
 8005580:	4a09      	ldr	r2, [pc, #36]	; (80055a8 <send_frame_to_leds_1D+0x118>)
 8005582:	4b09      	ldr	r3, [pc, #36]	; (80055a8 <send_frame_to_leds_1D+0x118>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f043 0301 	orr.w	r3, r3, #1
 800558a:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= 1;
 800558c:	4a05      	ldr	r2, [pc, #20]	; (80055a4 <send_frame_to_leds_1D+0x114>)
 800558e:	4b05      	ldr	r3, [pc, #20]	; (80055a4 <send_frame_to_leds_1D+0x114>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f043 0301 	orr.w	r3, r3, #1
 8005596:	6013      	str	r3, [r2, #0]
	xTaskResumeAll();
 8005598:	f7fe fef8 	bl	800438c <xTaskResumeAll>

}
 800559c:	bf00      	nop
 800559e:	3728      	adds	r7, #40	; 0x28
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	e000e010 	.word	0xe000e010
 80055a8:	40010000 	.word	0x40010000
 80055ac:	40020000 	.word	0x40020000
 80055b0:	20004934 	.word	0x20004934

080055b4 <get_target_led>:
	matrix[x][y] = color_value;
	send_frame_to_leds_2D(x, y);

}

int get_target_led(int x, int y){
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
	// passage des coord en "base1"
	int target_led = (y*LINES_NBR)+(x+1);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	00da      	lsls	r2, r3, #3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	3301      	adds	r3, #1
 80055c6:	4413      	add	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]
	// retour en "base0"
	return target_led-1;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	3b01      	subs	r3, #1
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
	...

080055dc <execute_led_msg_1D>:


void execute_led_msg_1D (char *msg){
 80055dc:	b590      	push	{r4, r7, lr}
 80055de:	b089      	sub	sp, #36	; 0x24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
	//extraction des coord
	int x = ascii_to_int(msg[1]);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	3301      	adds	r3, #1
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff feb6 	bl	800535c <ascii_to_int>
 80055f0:	4603      	mov	r3, r0
 80055f2:	61fb      	str	r3, [r7, #28]
	int y = ascii_to_int(msg[2]);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	3302      	adds	r3, #2
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff feae 	bl	800535c <ascii_to_int>
 8005600:	4603      	mov	r3, r0
 8005602:	61bb      	str	r3, [r7, #24]
	int target = get_target_led(x, y);
 8005604:	69b9      	ldr	r1, [r7, #24]
 8005606:	69f8      	ldr	r0, [r7, #28]
 8005608:	f7ff ffd4 	bl	80055b4 <get_target_led>
 800560c:	6178      	str	r0, [r7, #20]
	// extraction des composants de la couleur
	uint8_t g_value;
	uint8_t r_value;
	uint8_t b_value;
	r_value = assemble_2int(ascii_to_int(msg[3]), ascii_to_int(msg[4]));
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	3303      	adds	r3, #3
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	4618      	mov	r0, r3
 8005616:	f7ff fea1 	bl	800535c <ascii_to_int>
 800561a:	4603      	mov	r3, r0
 800561c:	461c      	mov	r4, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	3304      	adds	r3, #4
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	4618      	mov	r0, r3
 8005626:	f7ff fe99 	bl	800535c <ascii_to_int>
 800562a:	4603      	mov	r3, r0
 800562c:	4619      	mov	r1, r3
 800562e:	4620      	mov	r0, r4
 8005630:	f7ff feff 	bl	8005432 <assemble_2int>
 8005634:	4603      	mov	r3, r0
 8005636:	74fb      	strb	r3, [r7, #19]
	g_value = assemble_2int(ascii_to_int(msg[5]), ascii_to_int(msg[6]));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	3305      	adds	r3, #5
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff fe8c 	bl	800535c <ascii_to_int>
 8005644:	4603      	mov	r3, r0
 8005646:	461c      	mov	r4, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3306      	adds	r3, #6
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	4618      	mov	r0, r3
 8005650:	f7ff fe84 	bl	800535c <ascii_to_int>
 8005654:	4603      	mov	r3, r0
 8005656:	4619      	mov	r1, r3
 8005658:	4620      	mov	r0, r4
 800565a:	f7ff feea 	bl	8005432 <assemble_2int>
 800565e:	4603      	mov	r3, r0
 8005660:	74bb      	strb	r3, [r7, #18]
	b_value = assemble_2int(ascii_to_int(msg[7]), ascii_to_int(msg[8]));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	3307      	adds	r3, #7
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	4618      	mov	r0, r3
 800566a:	f7ff fe77 	bl	800535c <ascii_to_int>
 800566e:	4603      	mov	r3, r0
 8005670:	461c      	mov	r4, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	3308      	adds	r3, #8
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	4618      	mov	r0, r3
 800567a:	f7ff fe6f 	bl	800535c <ascii_to_int>
 800567e:	4603      	mov	r3, r0
 8005680:	4619      	mov	r1, r3
 8005682:	4620      	mov	r0, r4
 8005684:	f7ff fed5 	bl	8005432 <assemble_2int>
 8005688:	4603      	mov	r3, r0
 800568a:	747b      	strb	r3, [r7, #17]
	//assemblage de la couleur
	int color_value = assemble_couleur(r_value, g_value, b_value);
 800568c:	7c7a      	ldrb	r2, [r7, #17]
 800568e:	7cb9      	ldrb	r1, [r7, #18]
 8005690:	7cfb      	ldrb	r3, [r7, #19]
 8005692:	4618      	mov	r0, r3
 8005694:	f7ff fee2 	bl	800545c <assemble_couleur>
 8005698:	60f8      	str	r0, [r7, #12]
	//MàJ du tableau
	matrix_1D[target] = color_value;
 800569a:	4906      	ldr	r1, [pc, #24]	; (80056b4 <execute_led_msg_1D+0xd8>)
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//envoi de la trame jusqu'à target led
	send_frame_to_leds_1D(target);
 80056a4:	6978      	ldr	r0, [r7, #20]
 80056a6:	f7ff fef3 	bl	8005490 <send_frame_to_leds_1D>

}
 80056aa:	bf00      	nop
 80056ac:	3724      	adds	r7, #36	; 0x24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd90      	pop	{r4, r7, pc}
 80056b2:	bf00      	nop
 80056b4:	20004934 	.word	0x20004934

080056b8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80056bc:	f7fa ff20 	bl	8000500 <HAL_Init>

	/* USER CODE BEGIN Init */

	left_arrow = FALSE;
 80056c0:	4b20      	ldr	r3, [pc, #128]	; (8005744 <main+0x8c>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]
	right_arrow = FALSE;
 80056c6:	4b20      	ldr	r3, [pc, #128]	; (8005748 <main+0x90>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]
	down_arrow = FALSE;
 80056cc:	4b1f      	ldr	r3, [pc, #124]	; (800574c <main+0x94>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]


	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80056d2:	f000 f857 	bl	8005784 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80056d6:	f000 f951 	bl	800597c <MX_GPIO_Init>
	//MX_ETH_Init();
	MX_USART3_UART_Init();
 80056da:	f000 f925 	bl	8005928 <MX_USART3_UART_Init>
	//MX_USB_OTG_FS_PCD_Init();
	MX_DAC_Init();
 80056de:	f000 f8cf 	bl	8005880 <MX_DAC_Init>
	MX_UART7_Init();
 80056e2:	f000 f8f7 	bl	80058d4 <MX_UART7_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 80056e6:	f000 f8b7 	bl	8005858 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80056ea:	f7fc fe65 	bl	80023b8 <osKernelInitialize>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of UARTSend */
	UARTSendHandle = osMessageQueueNew (16, 5, &UARTSend_attributes);
 80056ee:	4a18      	ldr	r2, [pc, #96]	; (8005750 <main+0x98>)
 80056f0:	2105      	movs	r1, #5
 80056f2:	2010      	movs	r0, #16
 80056f4:	f7fc ff9e 	bl	8002634 <osMessageQueueNew>
 80056f8:	4602      	mov	r2, r0
 80056fa:	4b16      	ldr	r3, [pc, #88]	; (8005754 <main+0x9c>)
 80056fc:	601a      	str	r2, [r3, #0]

	/* creation of UARTReception */
	UARTReceptionHandle = osMessageQueueNew (16, 10, &UARTReception_attributes);
 80056fe:	4a16      	ldr	r2, [pc, #88]	; (8005758 <main+0xa0>)
 8005700:	210a      	movs	r1, #10
 8005702:	2010      	movs	r0, #16
 8005704:	f7fc ff96 	bl	8002634 <osMessageQueueNew>
 8005708:	4602      	mov	r2, r0
 800570a:	4b14      	ldr	r3, [pc, #80]	; (800575c <main+0xa4>)
 800570c:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800570e:	4a14      	ldr	r2, [pc, #80]	; (8005760 <main+0xa8>)
 8005710:	2100      	movs	r1, #0
 8005712:	4814      	ldr	r0, [pc, #80]	; (8005764 <main+0xac>)
 8005714:	f7fc feba 	bl	800248c <osThreadNew>
 8005718:	4602      	mov	r2, r0
 800571a:	4b13      	ldr	r3, [pc, #76]	; (8005768 <main+0xb0>)
 800571c:	601a      	str	r2, [r3, #0]

	/* creation of myTask02 */
	myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 800571e:	4a13      	ldr	r2, [pc, #76]	; (800576c <main+0xb4>)
 8005720:	2100      	movs	r1, #0
 8005722:	4813      	ldr	r0, [pc, #76]	; (8005770 <main+0xb8>)
 8005724:	f7fc feb2 	bl	800248c <osThreadNew>
 8005728:	4602      	mov	r2, r0
 800572a:	4b12      	ldr	r3, [pc, #72]	; (8005774 <main+0xbc>)
 800572c:	601a      	str	r2, [r3, #0]

	/* creation of myTask03 */
	myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 800572e:	4a12      	ldr	r2, [pc, #72]	; (8005778 <main+0xc0>)
 8005730:	2100      	movs	r1, #0
 8005732:	4812      	ldr	r0, [pc, #72]	; (800577c <main+0xc4>)
 8005734:	f7fc feaa 	bl	800248c <osThreadNew>
 8005738:	4602      	mov	r2, r0
 800573a:	4b11      	ldr	r3, [pc, #68]	; (8005780 <main+0xc8>)
 800573c:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 800573e:	f7fc fe6f 	bl	8002420 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8005742:	e7fe      	b.n	8005742 <main+0x8a>
 8005744:	20004f30 	.word	0x20004f30
 8005748:	20004f34 	.word	0x20004f34
 800574c:	20004f10 	.word	0x20004f10
 8005750:	080061d4 	.word	0x080061d4
 8005754:	20004f08 	.word	0x20004f08
 8005758:	080061ec 	.word	0x080061ec
 800575c:	20004f04 	.word	0x20004f04
 8005760:	08006168 	.word	0x08006168
 8005764:	08005b89 	.word	0x08005b89
 8005768:	20004a78 	.word	0x20004a78
 800576c:	0800618c 	.word	0x0800618c
 8005770:	08005bfd 	.word	0x08005bfd
 8005774:	20004f28 	.word	0x20004f28
 8005778:	080061b0 	.word	0x080061b0
 800577c:	08005c8d 	.word	0x08005c8d
 8005780:	20004f2c 	.word	0x20004f2c

08005784 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b094      	sub	sp, #80	; 0x50
 8005788:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800578a:	f107 0320 	add.w	r3, r7, #32
 800578e:	2230      	movs	r2, #48	; 0x30
 8005790:	2100      	movs	r1, #0
 8005792:	4618      	mov	r0, r3
 8005794:	f000 fc9d 	bl	80060d2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005798:	f107 030c 	add.w	r3, r7, #12
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	605a      	str	r2, [r3, #4]
 80057a2:	609a      	str	r2, [r3, #8]
 80057a4:	60da      	str	r2, [r3, #12]
 80057a6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80057a8:	2300      	movs	r3, #0
 80057aa:	60bb      	str	r3, [r7, #8]
 80057ac:	4a28      	ldr	r2, [pc, #160]	; (8005850 <SystemClock_Config+0xcc>)
 80057ae:	4b28      	ldr	r3, [pc, #160]	; (8005850 <SystemClock_Config+0xcc>)
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b6:	6413      	str	r3, [r2, #64]	; 0x40
 80057b8:	4b25      	ldr	r3, [pc, #148]	; (8005850 <SystemClock_Config+0xcc>)
 80057ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c0:	60bb      	str	r3, [r7, #8]
 80057c2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80057c4:	2300      	movs	r3, #0
 80057c6:	607b      	str	r3, [r7, #4]
 80057c8:	4a22      	ldr	r2, [pc, #136]	; (8005854 <SystemClock_Config+0xd0>)
 80057ca:	4b22      	ldr	r3, [pc, #136]	; (8005854 <SystemClock_Config+0xd0>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057d2:	6013      	str	r3, [r2, #0]
 80057d4:	4b1f      	ldr	r3, [pc, #124]	; (8005854 <SystemClock_Config+0xd0>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80057dc:	607b      	str	r3, [r7, #4]
 80057de:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80057e0:	2301      	movs	r3, #1
 80057e2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80057e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80057ea:	2302      	movs	r3, #2
 80057ec:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80057ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80057f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80057f4:	2304      	movs	r3, #4
 80057f6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80057f8:	23a8      	movs	r3, #168	; 0xa8
 80057fa:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80057fc:	2302      	movs	r3, #2
 80057fe:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8005800:	2307      	movs	r3, #7
 8005802:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005804:	f107 0320 	add.w	r3, r7, #32
 8005808:	4618      	mov	r0, r3
 800580a:	f7fb f9e7 	bl	8000bdc <HAL_RCC_OscConfig>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8005814:	f000 fa64 	bl	8005ce0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005818:	230f      	movs	r3, #15
 800581a:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800581c:	2302      	movs	r3, #2
 800581e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005820:	2300      	movs	r3, #0
 8005822:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005824:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005828:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800582a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800582e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005830:	f107 030c 	add.w	r3, r7, #12
 8005834:	2105      	movs	r1, #5
 8005836:	4618      	mov	r0, r3
 8005838:	f7fb fc40 	bl	80010bc <HAL_RCC_ClockConfig>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8005842:	f000 fa4d 	bl	8005ce0 <Error_Handler>
	}
}
 8005846:	bf00      	nop
 8005848:	3750      	adds	r7, #80	; 0x50
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	40023800 	.word	0x40023800
 8005854:	40007000 	.word	0x40007000

08005858 <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	af00      	add	r7, sp, #0
	/* EXTI9_5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800585c:	2200      	movs	r2, #0
 800585e:	2105      	movs	r1, #5
 8005860:	2017      	movs	r0, #23
 8005862:	f7fa ff45 	bl	80006f0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005866:	2017      	movs	r0, #23
 8005868:	f7fa ff5e 	bl	8000728 <HAL_NVIC_EnableIRQ>
	/* EXTI4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800586c:	2200      	movs	r2, #0
 800586e:	2105      	movs	r1, #5
 8005870:	200a      	movs	r0, #10
 8005872:	f7fa ff3d 	bl	80006f0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8005876:	200a      	movs	r0, #10
 8005878:	f7fa ff56 	bl	8000728 <HAL_NVIC_EnableIRQ>
}
 800587c:	bf00      	nop
 800587e:	bd80      	pop	{r7, pc}

08005880 <MX_DAC_Init>:
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = {0};
 8005886:	463b      	mov	r3, r7
 8005888:	2200      	movs	r2, #0
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	605a      	str	r2, [r3, #4]
	/* USER CODE BEGIN DAC_Init 1 */

	/* USER CODE END DAC_Init 1 */
	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 800588e:	4b0f      	ldr	r3, [pc, #60]	; (80058cc <MX_DAC_Init+0x4c>)
 8005890:	4a0f      	ldr	r2, [pc, #60]	; (80058d0 <MX_DAC_Init+0x50>)
 8005892:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK)
 8005894:	480d      	ldr	r0, [pc, #52]	; (80058cc <MX_DAC_Init+0x4c>)
 8005896:	f7fa ff55 	bl	8000744 <HAL_DAC_Init>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <MX_DAC_Init+0x24>
	{
		Error_Handler();
 80058a0:	f000 fa1e 	bl	8005ce0 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80058a4:	2300      	movs	r3, #0
 80058a6:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80058a8:	2300      	movs	r3, #0
 80058aa:	607b      	str	r3, [r7, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80058ac:	463b      	mov	r3, r7
 80058ae:	2200      	movs	r2, #0
 80058b0:	4619      	mov	r1, r3
 80058b2:	4806      	ldr	r0, [pc, #24]	; (80058cc <MX_DAC_Init+0x4c>)
 80058b4:	f7fa ff68 	bl	8000788 <HAL_DAC_ConfigChannel>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <MX_DAC_Init+0x42>
	{
		Error_Handler();
 80058be:	f000 fa0f 	bl	8005ce0 <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 80058c2:	bf00      	nop
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	20004f14 	.word	0x20004f14
 80058d0:	40007400 	.word	0x40007400

080058d4 <MX_UART7_Init>:
 * @brief UART7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART7_Init(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
	/* USER CODE END UART7_Init 0 */

	/* USER CODE BEGIN UART7_Init 1 */

	/* USER CODE END UART7_Init 1 */
	huart7.Instance = UART7;
 80058d8:	4b11      	ldr	r3, [pc, #68]	; (8005920 <MX_UART7_Init+0x4c>)
 80058da:	4a12      	ldr	r2, [pc, #72]	; (8005924 <MX_UART7_Init+0x50>)
 80058dc:	601a      	str	r2, [r3, #0]
	huart7.Init.BaudRate = 115200;
 80058de:	4b10      	ldr	r3, [pc, #64]	; (8005920 <MX_UART7_Init+0x4c>)
 80058e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80058e4:	605a      	str	r2, [r3, #4]
	huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80058e6:	4b0e      	ldr	r3, [pc, #56]	; (8005920 <MX_UART7_Init+0x4c>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	609a      	str	r2, [r3, #8]
	huart7.Init.StopBits = UART_STOPBITS_1;
 80058ec:	4b0c      	ldr	r3, [pc, #48]	; (8005920 <MX_UART7_Init+0x4c>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	60da      	str	r2, [r3, #12]
	huart7.Init.Parity = UART_PARITY_NONE;
 80058f2:	4b0b      	ldr	r3, [pc, #44]	; (8005920 <MX_UART7_Init+0x4c>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	611a      	str	r2, [r3, #16]
	huart7.Init.Mode = UART_MODE_TX_RX;
 80058f8:	4b09      	ldr	r3, [pc, #36]	; (8005920 <MX_UART7_Init+0x4c>)
 80058fa:	220c      	movs	r2, #12
 80058fc:	615a      	str	r2, [r3, #20]
	huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058fe:	4b08      	ldr	r3, [pc, #32]	; (8005920 <MX_UART7_Init+0x4c>)
 8005900:	2200      	movs	r2, #0
 8005902:	619a      	str	r2, [r3, #24]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8005904:	4b06      	ldr	r3, [pc, #24]	; (8005920 <MX_UART7_Init+0x4c>)
 8005906:	2200      	movs	r2, #0
 8005908:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart7) != HAL_OK)
 800590a:	4805      	ldr	r0, [pc, #20]	; (8005920 <MX_UART7_Init+0x4c>)
 800590c:	f7fc f838 	bl	8001980 <HAL_UART_Init>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <MX_UART7_Init+0x46>
	{
		Error_Handler();
 8005916:	f000 f9e3 	bl	8005ce0 <Error_Handler>
	}
	/* USER CODE BEGIN UART7_Init 2 */

	/* USER CODE END UART7_Init 2 */

}
 800591a:	bf00      	nop
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	20004a7c 	.word	0x20004a7c
 8005924:	40007800 	.word	0x40007800

08005928 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800592c:	4b11      	ldr	r3, [pc, #68]	; (8005974 <MX_USART3_UART_Init+0x4c>)
 800592e:	4a12      	ldr	r2, [pc, #72]	; (8005978 <MX_USART3_UART_Init+0x50>)
 8005930:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8005932:	4b10      	ldr	r3, [pc, #64]	; (8005974 <MX_USART3_UART_Init+0x4c>)
 8005934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005938:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800593a:	4b0e      	ldr	r3, [pc, #56]	; (8005974 <MX_USART3_UART_Init+0x4c>)
 800593c:	2200      	movs	r2, #0
 800593e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8005940:	4b0c      	ldr	r3, [pc, #48]	; (8005974 <MX_USART3_UART_Init+0x4c>)
 8005942:	2200      	movs	r2, #0
 8005944:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8005946:	4b0b      	ldr	r3, [pc, #44]	; (8005974 <MX_USART3_UART_Init+0x4c>)
 8005948:	2200      	movs	r2, #0
 800594a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800594c:	4b09      	ldr	r3, [pc, #36]	; (8005974 <MX_USART3_UART_Init+0x4c>)
 800594e:	220c      	movs	r2, #12
 8005950:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005952:	4b08      	ldr	r3, [pc, #32]	; (8005974 <MX_USART3_UART_Init+0x4c>)
 8005954:	2200      	movs	r2, #0
 8005956:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005958:	4b06      	ldr	r3, [pc, #24]	; (8005974 <MX_USART3_UART_Init+0x4c>)
 800595a:	2200      	movs	r2, #0
 800595c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800595e:	4805      	ldr	r0, [pc, #20]	; (8005974 <MX_USART3_UART_Init+0x4c>)
 8005960:	f7fc f80e 	bl	8001980 <HAL_UART_Init>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 800596a:	f000 f9b9 	bl	8005ce0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800596e:	bf00      	nop
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	20004abc 	.word	0x20004abc
 8005978:	40004800 	.word	0x40004800

0800597c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b08c      	sub	sp, #48	; 0x30
 8005980:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005982:	f107 031c 	add.w	r3, r7, #28
 8005986:	2200      	movs	r2, #0
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	605a      	str	r2, [r3, #4]
 800598c:	609a      	str	r2, [r3, #8]
 800598e:	60da      	str	r2, [r3, #12]
 8005990:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8005992:	2300      	movs	r3, #0
 8005994:	61bb      	str	r3, [r7, #24]
 8005996:	4a62      	ldr	r2, [pc, #392]	; (8005b20 <MX_GPIO_Init+0x1a4>)
 8005998:	4b61      	ldr	r3, [pc, #388]	; (8005b20 <MX_GPIO_Init+0x1a4>)
 800599a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599c:	f043 0304 	orr.w	r3, r3, #4
 80059a0:	6313      	str	r3, [r2, #48]	; 0x30
 80059a2:	4b5f      	ldr	r3, [pc, #380]	; (8005b20 <MX_GPIO_Init+0x1a4>)
 80059a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a6:	f003 0304 	and.w	r3, r3, #4
 80059aa:	61bb      	str	r3, [r7, #24]
 80059ac:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80059ae:	2300      	movs	r3, #0
 80059b0:	617b      	str	r3, [r7, #20]
 80059b2:	4a5b      	ldr	r2, [pc, #364]	; (8005b20 <MX_GPIO_Init+0x1a4>)
 80059b4:	4b5a      	ldr	r3, [pc, #360]	; (8005b20 <MX_GPIO_Init+0x1a4>)
 80059b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059bc:	6313      	str	r3, [r2, #48]	; 0x30
 80059be:	4b58      	ldr	r3, [pc, #352]	; (8005b20 <MX_GPIO_Init+0x1a4>)
 80059c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80059ca:	2300      	movs	r3, #0
 80059cc:	613b      	str	r3, [r7, #16]
 80059ce:	4a54      	ldr	r2, [pc, #336]	; (8005b20 <MX_GPIO_Init+0x1a4>)
 80059d0:	4b53      	ldr	r3, [pc, #332]	; (8005b20 <MX_GPIO_Init+0x1a4>)
 80059d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d4:	f043 0301 	orr.w	r3, r3, #1
 80059d8:	6313      	str	r3, [r2, #48]	; 0x30
 80059da:	4b51      	ldr	r3, [pc, #324]	; (8005b20 <MX_GPIO_Init+0x1a4>)
 80059dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	613b      	str	r3, [r7, #16]
 80059e4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80059e6:	2300      	movs	r3, #0
 80059e8:	60fb      	str	r3, [r7, #12]
 80059ea:	4a4d      	ldr	r2, [pc, #308]	; (8005b20 <MX_GPIO_Init+0x1a4>)
 80059ec:	4b4c      	ldr	r3, [pc, #304]	; (8005b20 <MX_GPIO_Init+0x1a4>)
 80059ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f0:	f043 0302 	orr.w	r3, r3, #2
 80059f4:	6313      	str	r3, [r2, #48]	; 0x30
 80059f6:	4b4a      	ldr	r3, [pc, #296]	; (8005b20 <MX_GPIO_Init+0x1a4>)
 80059f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8005a02:	2300      	movs	r3, #0
 8005a04:	60bb      	str	r3, [r7, #8]
 8005a06:	4a46      	ldr	r2, [pc, #280]	; (8005b20 <MX_GPIO_Init+0x1a4>)
 8005a08:	4b45      	ldr	r3, [pc, #276]	; (8005b20 <MX_GPIO_Init+0x1a4>)
 8005a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0c:	f043 0310 	orr.w	r3, r3, #16
 8005a10:	6313      	str	r3, [r2, #48]	; 0x30
 8005a12:	4b43      	ldr	r3, [pc, #268]	; (8005b20 <MX_GPIO_Init+0x1a4>)
 8005a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a16:	f003 0310 	and.w	r3, r3, #16
 8005a1a:	60bb      	str	r3, [r7, #8]
 8005a1c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8005a1e:	2300      	movs	r3, #0
 8005a20:	607b      	str	r3, [r7, #4]
 8005a22:	4a3f      	ldr	r2, [pc, #252]	; (8005b20 <MX_GPIO_Init+0x1a4>)
 8005a24:	4b3e      	ldr	r3, [pc, #248]	; (8005b20 <MX_GPIO_Init+0x1a4>)
 8005a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a28:	f043 0308 	orr.w	r3, r3, #8
 8005a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a2e:	4b3c      	ldr	r3, [pc, #240]	; (8005b20 <MX_GPIO_Init+0x1a4>)
 8005a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a32:	f003 0308 	and.w	r3, r3, #8
 8005a36:	607b      	str	r3, [r7, #4]
 8005a38:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	603b      	str	r3, [r7, #0]
 8005a3e:	4a38      	ldr	r2, [pc, #224]	; (8005b20 <MX_GPIO_Init+0x1a4>)
 8005a40:	4b37      	ldr	r3, [pc, #220]	; (8005b20 <MX_GPIO_Init+0x1a4>)
 8005a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a48:	6313      	str	r3, [r2, #48]	; 0x30
 8005a4a:	4b35      	ldr	r3, [pc, #212]	; (8005b20 <MX_GPIO_Init+0x1a4>)
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a52:	603b      	str	r3, [r7, #0]
 8005a54:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LEDS_MODULE_GPIO_Port, LEDS_MODULE_Pin, GPIO_PIN_RESET);
 8005a56:	2200      	movs	r2, #0
 8005a58:	2120      	movs	r1, #32
 8005a5a:	4832      	ldr	r0, [pc, #200]	; (8005b24 <MX_GPIO_Init+0x1a8>)
 8005a5c:	f7fb f88c 	bl	8000b78 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005a60:	2200      	movs	r2, #0
 8005a62:	f244 0181 	movw	r1, #16513	; 0x4081
 8005a66:	4830      	ldr	r0, [pc, #192]	; (8005b28 <MX_GPIO_Init+0x1ac>)
 8005a68:	f7fb f886 	bl	8000b78 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	2140      	movs	r1, #64	; 0x40
 8005a70:	482e      	ldr	r0, [pc, #184]	; (8005b2c <MX_GPIO_Init+0x1b0>)
 8005a72:	f7fb f881 	bl	8000b78 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8005a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a7a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005a7c:	4b2c      	ldr	r3, [pc, #176]	; (8005b30 <MX_GPIO_Init+0x1b4>)
 8005a7e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a80:	2300      	movs	r3, #0
 8005a82:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8005a84:	f107 031c 	add.w	r3, r7, #28
 8005a88:	4619      	mov	r1, r3
 8005a8a:	482a      	ldr	r0, [pc, #168]	; (8005b34 <MX_GPIO_Init+0x1b8>)
 8005a8c:	f7fa feca 	bl	8000824 <HAL_GPIO_Init>

	/*Configure GPIO pin : LEDS_MODULE_Pin */
	GPIO_InitStruct.Pin = LEDS_MODULE_Pin;
 8005a90:	2320      	movs	r3, #32
 8005a92:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a94:	2301      	movs	r3, #1
 8005a96:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(LEDS_MODULE_GPIO_Port, &GPIO_InitStruct);
 8005aa0:	f107 031c 	add.w	r3, r7, #28
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	481f      	ldr	r0, [pc, #124]	; (8005b24 <MX_GPIO_Init+0x1a8>)
 8005aa8:	f7fa febc 	bl	8000824 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8005aac:	f244 0381 	movw	r3, #16513	; 0x4081
 8005ab0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005aba:	2300      	movs	r3, #0
 8005abc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005abe:	f107 031c 	add.w	r3, r7, #28
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	4818      	ldr	r0, [pc, #96]	; (8005b28 <MX_GPIO_Init+0x1ac>)
 8005ac6:	f7fa fead 	bl	8000824 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8005aca:	2340      	movs	r3, #64	; 0x40
 8005acc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005ada:	f107 031c 	add.w	r3, r7, #28
 8005ade:	4619      	mov	r1, r3
 8005ae0:	4812      	ldr	r0, [pc, #72]	; (8005b2c <MX_GPIO_Init+0x1b0>)
 8005ae2:	f7fa fe9f 	bl	8000824 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8005ae6:	2380      	movs	r3, #128	; 0x80
 8005ae8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005aea:	2300      	movs	r3, #0
 8005aec:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8005af2:	f107 031c 	add.w	r3, r7, #28
 8005af6:	4619      	mov	r1, r3
 8005af8:	480c      	ldr	r0, [pc, #48]	; (8005b2c <MX_GPIO_Init+0x1b0>)
 8005afa:	f7fa fe93 	bl	8000824 <HAL_GPIO_Init>

	/*Configure GPIO pins : EXT_Btn1_Pin EXT_Btn2_Pin EXT_Btn3_Pin EXT_Btn4_Pin */
	GPIO_InitStruct.Pin = EXT_Btn1_Pin|EXT_Btn2_Pin|EXT_Btn3_Pin|EXT_Btn4_Pin;
 8005afe:	23f0      	movs	r3, #240	; 0xf0
 8005b00:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005b02:	4b0b      	ldr	r3, [pc, #44]	; (8005b30 <MX_GPIO_Init+0x1b4>)
 8005b04:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005b0a:	f107 031c 	add.w	r3, r7, #28
 8005b0e:	4619      	mov	r1, r3
 8005b10:	4809      	ldr	r0, [pc, #36]	; (8005b38 <MX_GPIO_Init+0x1bc>)
 8005b12:	f7fa fe87 	bl	8000824 <HAL_GPIO_Init>

}
 8005b16:	bf00      	nop
 8005b18:	3730      	adds	r7, #48	; 0x30
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	40023800 	.word	0x40023800
 8005b24:	40020000 	.word	0x40020000
 8005b28:	40020400 	.word	0x40020400
 8005b2c:	40021800 	.word	0x40021800
 8005b30:	10110000 	.word	0x10110000
 8005b34:	40020800 	.word	0x40020800
 8005b38:	40020c00 	.word	0x40020c00

08005b3c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){ // INTERRUPTION !
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	4603      	mov	r3, r0
 8005b44:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EXT_Btn1_Pin){
 8005b46:	88fb      	ldrh	r3, [r7, #6]
 8005b48:	2b10      	cmp	r3, #16
 8005b4a:	d102      	bne.n	8005b52 <HAL_GPIO_EXTI_Callback+0x16>
		left_arrow = TRUE;
 8005b4c:	4b0b      	ldr	r3, [pc, #44]	; (8005b7c <HAL_GPIO_EXTI_Callback+0x40>)
 8005b4e:	2201      	movs	r2, #1
 8005b50:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == EXT_Btn2_Pin || GPIO_Pin == EXT_Btn3_Pin){
 8005b52:	88fb      	ldrh	r3, [r7, #6]
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	d002      	beq.n	8005b5e <HAL_GPIO_EXTI_Callback+0x22>
 8005b58:	88fb      	ldrh	r3, [r7, #6]
 8005b5a:	2b40      	cmp	r3, #64	; 0x40
 8005b5c:	d102      	bne.n	8005b64 <HAL_GPIO_EXTI_Callback+0x28>
		down_arrow = TRUE;
 8005b5e:	4b08      	ldr	r3, [pc, #32]	; (8005b80 <HAL_GPIO_EXTI_Callback+0x44>)
 8005b60:	2201      	movs	r2, #1
 8005b62:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == EXT_Btn4_Pin){
 8005b64:	88fb      	ldrh	r3, [r7, #6]
 8005b66:	2b80      	cmp	r3, #128	; 0x80
 8005b68:	d102      	bne.n	8005b70 <HAL_GPIO_EXTI_Callback+0x34>
		right_arrow = TRUE;
 8005b6a:	4b06      	ldr	r3, [pc, #24]	; (8005b84 <HAL_GPIO_EXTI_Callback+0x48>)
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]
	}
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	20004f30 	.word	0x20004f30
 8005b80:	20004f10 	.word	0x20004f10
 8005b84:	20004f34 	.word	0x20004f34

08005b88 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b088      	sub	sp, #32
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	unsigned char UARTmessageToSend[5];
	unsigned char UARTmessageReceived[10];
	for(;;)
	{
		if (osMessageQueueGetCount(UARTSendHandle)){
 8005b90:	4b17      	ldr	r3, [pc, #92]	; (8005bf0 <StartDefaultTask+0x68>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fc feb9 	bl	800290c <osMessageQueueGetCount>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d014      	beq.n	8005bca <StartDefaultTask+0x42>
			if(osMessageQueueGet(UARTSendHandle, UARTmessageToSend, 0, 10)==osOK){
 8005ba0:	4b13      	ldr	r3, [pc, #76]	; (8005bf0 <StartDefaultTask+0x68>)
 8005ba2:	6818      	ldr	r0, [r3, #0]
 8005ba4:	f107 0118 	add.w	r1, r7, #24
 8005ba8:	230a      	movs	r3, #10
 8005baa:	2200      	movs	r2, #0
 8005bac:	f7fc fe3c 	bl	8002828 <osMessageQueueGet>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d109      	bne.n	8005bca <StartDefaultTask+0x42>
				HAL_UART_Transmit(&huart7, UARTmessageToSend, 5, 10);
 8005bb6:	f107 0118 	add.w	r1, r7, #24
 8005bba:	230a      	movs	r3, #10
 8005bbc:	2205      	movs	r2, #5
 8005bbe:	480d      	ldr	r0, [pc, #52]	; (8005bf4 <StartDefaultTask+0x6c>)
 8005bc0:	f7fb ff2b 	bl	8001a1a <HAL_UART_Transmit>
				osDelay(3);
 8005bc4:	2003      	movs	r0, #3
 8005bc6:	f7fc fd07 	bl	80025d8 <osDelay>
			}
		}
		if(HAL_UART_Receive(&huart7, UARTmessageReceived,10, 10)==HAL_OK){
 8005bca:	f107 010c 	add.w	r1, r7, #12
 8005bce:	230a      	movs	r3, #10
 8005bd0:	220a      	movs	r2, #10
 8005bd2:	4808      	ldr	r0, [pc, #32]	; (8005bf4 <StartDefaultTask+0x6c>)
 8005bd4:	f7fb ffb9 	bl	8001b4a <HAL_UART_Receive>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1d8      	bne.n	8005b90 <StartDefaultTask+0x8>
			osMessageQueuePut(UARTReceptionHandle, UARTmessageReceived, 1, 10);
 8005bde:	4b06      	ldr	r3, [pc, #24]	; (8005bf8 <StartDefaultTask+0x70>)
 8005be0:	6818      	ldr	r0, [r3, #0]
 8005be2:	f107 010c 	add.w	r1, r7, #12
 8005be6:	230a      	movs	r3, #10
 8005be8:	2201      	movs	r2, #1
 8005bea:	f7fc fda9 	bl	8002740 <osMessageQueuePut>
		if (osMessageQueueGetCount(UARTSendHandle)){
 8005bee:	e7cf      	b.n	8005b90 <StartDefaultTask+0x8>
 8005bf0:	20004f08 	.word	0x20004f08
 8005bf4:	20004a7c 	.word	0x20004a7c
 8005bf8:	20004f04 	.word	0x20004f04

08005bfc <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
	//-----------------------------------------------------------------

	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */

	char button_message[5] = "p3xd\n";
 8005c04:	4a1c      	ldr	r2, [pc, #112]	; (8005c78 <StartTask02+0x7c>)
 8005c06:	f107 0308 	add.w	r3, r7, #8
 8005c0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c0e:	6018      	str	r0, [r3, #0]
 8005c10:	3304      	adds	r3, #4
 8005c12:	7019      	strb	r1, [r3, #0]
	for(;;)
	{
		if (left_arrow == TRUE || down_arrow == TRUE || right_arrow == TRUE){
 8005c14:	4b19      	ldr	r3, [pc, #100]	; (8005c7c <StartTask02+0x80>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d007      	beq.n	8005c2c <StartTask02+0x30>
 8005c1c:	4b18      	ldr	r3, [pc, #96]	; (8005c80 <StartTask02+0x84>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d003      	beq.n	8005c2c <StartTask02+0x30>
 8005c24:	4b17      	ldr	r3, [pc, #92]	; (8005c84 <StartTask02+0x88>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d1f3      	bne.n	8005c14 <StartTask02+0x18>
			if(left_arrow == TRUE){
 8005c2c:	4b13      	ldr	r3, [pc, #76]	; (8005c7c <StartTask02+0x80>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d105      	bne.n	8005c40 <StartTask02+0x44>
				button_message[2] ='l';
 8005c34:	236c      	movs	r3, #108	; 0x6c
 8005c36:	72bb      	strb	r3, [r7, #10]
				left_arrow = FALSE;
 8005c38:	4b10      	ldr	r3, [pc, #64]	; (8005c7c <StartTask02+0x80>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	e012      	b.n	8005c66 <StartTask02+0x6a>
			}
			else if (down_arrow == TRUE){
 8005c40:	4b0f      	ldr	r3, [pc, #60]	; (8005c80 <StartTask02+0x84>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d105      	bne.n	8005c54 <StartTask02+0x58>
				button_message[2] ='d';
 8005c48:	2364      	movs	r3, #100	; 0x64
 8005c4a:	72bb      	strb	r3, [r7, #10]
				down_arrow = FALSE;
 8005c4c:	4b0c      	ldr	r3, [pc, #48]	; (8005c80 <StartTask02+0x84>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	e008      	b.n	8005c66 <StartTask02+0x6a>
			}
			else if(right_arrow == TRUE){
 8005c54:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <StartTask02+0x88>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d104      	bne.n	8005c66 <StartTask02+0x6a>
				button_message[2] ='r';
 8005c5c:	2372      	movs	r3, #114	; 0x72
 8005c5e:	72bb      	strb	r3, [r7, #10]
				right_arrow = FALSE;
 8005c60:	4b08      	ldr	r3, [pc, #32]	; (8005c84 <StartTask02+0x88>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	601a      	str	r2, [r3, #0]
			}
			osMessageQueuePut(UARTSendHandle, button_message, 1, 10);
 8005c66:	4b08      	ldr	r3, [pc, #32]	; (8005c88 <StartTask02+0x8c>)
 8005c68:	6818      	ldr	r0, [r3, #0]
 8005c6a:	f107 0108 	add.w	r1, r7, #8
 8005c6e:	230a      	movs	r3, #10
 8005c70:	2201      	movs	r2, #1
 8005c72:	f7fc fd65 	bl	8002740 <osMessageQueuePut>
		if (left_arrow == TRUE || down_arrow == TRUE || right_arrow == TRUE){
 8005c76:	e7cd      	b.n	8005c14 <StartTask02+0x18>
 8005c78:	08006160 	.word	0x08006160
 8005c7c:	20004f30 	.word	0x20004f30
 8005c80:	20004f10 	.word	0x20004f10
 8005c84:	20004f34 	.word	0x20004f34
 8005c88:	20004f08 	.word	0x20004f08

08005c8c <StartTask03>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
	/* Infinite loop */

	for(;;)
	{

		osMessageQueueGet(UARTReceptionHandle, received_frame, NULL, osWaitForever);
 8005c94:	4b08      	ldr	r3, [pc, #32]	; (8005cb8 <StartTask03+0x2c>)
 8005c96:	6818      	ldr	r0, [r3, #0]
 8005c98:	f107 010c 	add.w	r1, r7, #12
 8005c9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f7fc fdc1 	bl	8002828 <osMessageQueueGet>
		execute_led_msg_1D(received_frame);
 8005ca6:	f107 030c 	add.w	r3, r7, #12
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff fc96 	bl	80055dc <execute_led_msg_1D>
		osDelay(3);
 8005cb0:	2003      	movs	r0, #3
 8005cb2:	f7fc fc91 	bl	80025d8 <osDelay>
		osMessageQueueGet(UARTReceptionHandle, received_frame, NULL, osWaitForever);
 8005cb6:	e7ed      	b.n	8005c94 <StartTask03+0x8>
 8005cb8:	20004f04 	.word	0x20004f04

08005cbc <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a04      	ldr	r2, [pc, #16]	; (8005cdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d101      	bne.n	8005cd2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8005cce:	f7fa fc39 	bl	8000544 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8005cd2:	bf00      	nop
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	40010000 	.word	0x40010000

08005ce0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8005ce4:	bf00      	nop
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
	...

08005cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	607b      	str	r3, [r7, #4]
 8005cfa:	4a12      	ldr	r2, [pc, #72]	; (8005d44 <HAL_MspInit+0x54>)
 8005cfc:	4b11      	ldr	r3, [pc, #68]	; (8005d44 <HAL_MspInit+0x54>)
 8005cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d04:	6453      	str	r3, [r2, #68]	; 0x44
 8005d06:	4b0f      	ldr	r3, [pc, #60]	; (8005d44 <HAL_MspInit+0x54>)
 8005d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d0e:	607b      	str	r3, [r7, #4]
 8005d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d12:	2300      	movs	r3, #0
 8005d14:	603b      	str	r3, [r7, #0]
 8005d16:	4a0b      	ldr	r2, [pc, #44]	; (8005d44 <HAL_MspInit+0x54>)
 8005d18:	4b0a      	ldr	r3, [pc, #40]	; (8005d44 <HAL_MspInit+0x54>)
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d20:	6413      	str	r3, [r2, #64]	; 0x40
 8005d22:	4b08      	ldr	r3, [pc, #32]	; (8005d44 <HAL_MspInit+0x54>)
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d2a:	603b      	str	r3, [r7, #0]
 8005d2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005d2e:	2200      	movs	r2, #0
 8005d30:	210f      	movs	r1, #15
 8005d32:	f06f 0001 	mvn.w	r0, #1
 8005d36:	f7fa fcdb 	bl	80006f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d3a:	bf00      	nop
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	40023800 	.word	0x40023800

08005d48 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08a      	sub	sp, #40	; 0x28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d50:	f107 0314 	add.w	r3, r7, #20
 8005d54:	2200      	movs	r2, #0
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	605a      	str	r2, [r3, #4]
 8005d5a:	609a      	str	r2, [r3, #8]
 8005d5c:	60da      	str	r2, [r3, #12]
 8005d5e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a17      	ldr	r2, [pc, #92]	; (8005dc4 <HAL_DAC_MspInit+0x7c>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d127      	bne.n	8005dba <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	613b      	str	r3, [r7, #16]
 8005d6e:	4a16      	ldr	r2, [pc, #88]	; (8005dc8 <HAL_DAC_MspInit+0x80>)
 8005d70:	4b15      	ldr	r3, [pc, #84]	; (8005dc8 <HAL_DAC_MspInit+0x80>)
 8005d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d78:	6413      	str	r3, [r2, #64]	; 0x40
 8005d7a:	4b13      	ldr	r3, [pc, #76]	; (8005dc8 <HAL_DAC_MspInit+0x80>)
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d82:	613b      	str	r3, [r7, #16]
 8005d84:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d86:	2300      	movs	r3, #0
 8005d88:	60fb      	str	r3, [r7, #12]
 8005d8a:	4a0f      	ldr	r2, [pc, #60]	; (8005dc8 <HAL_DAC_MspInit+0x80>)
 8005d8c:	4b0e      	ldr	r3, [pc, #56]	; (8005dc8 <HAL_DAC_MspInit+0x80>)
 8005d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d90:	f043 0301 	orr.w	r3, r3, #1
 8005d94:	6313      	str	r3, [r2, #48]	; 0x30
 8005d96:	4b0c      	ldr	r3, [pc, #48]	; (8005dc8 <HAL_DAC_MspInit+0x80>)
 8005d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = DAC_OUT_Pin;
 8005da2:	2310      	movs	r3, #16
 8005da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005da6:	2303      	movs	r3, #3
 8005da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005daa:	2300      	movs	r3, #0
 8005dac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC_OUT_GPIO_Port, &GPIO_InitStruct);
 8005dae:	f107 0314 	add.w	r3, r7, #20
 8005db2:	4619      	mov	r1, r3
 8005db4:	4805      	ldr	r0, [pc, #20]	; (8005dcc <HAL_DAC_MspInit+0x84>)
 8005db6:	f7fa fd35 	bl	8000824 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8005dba:	bf00      	nop
 8005dbc:	3728      	adds	r7, #40	; 0x28
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	40007400 	.word	0x40007400
 8005dc8:	40023800 	.word	0x40023800
 8005dcc:	40020000 	.word	0x40020000

08005dd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08c      	sub	sp, #48	; 0x30
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dd8:	f107 031c 	add.w	r3, r7, #28
 8005ddc:	2200      	movs	r2, #0
 8005dde:	601a      	str	r2, [r3, #0]
 8005de0:	605a      	str	r2, [r3, #4]
 8005de2:	609a      	str	r2, [r3, #8]
 8005de4:	60da      	str	r2, [r3, #12]
 8005de6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a33      	ldr	r2, [pc, #204]	; (8005ebc <HAL_UART_MspInit+0xec>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d12d      	bne.n	8005e4e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8005df2:	2300      	movs	r3, #0
 8005df4:	61bb      	str	r3, [r7, #24]
 8005df6:	4a32      	ldr	r2, [pc, #200]	; (8005ec0 <HAL_UART_MspInit+0xf0>)
 8005df8:	4b31      	ldr	r3, [pc, #196]	; (8005ec0 <HAL_UART_MspInit+0xf0>)
 8005dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e00:	6413      	str	r3, [r2, #64]	; 0x40
 8005e02:	4b2f      	ldr	r3, [pc, #188]	; (8005ec0 <HAL_UART_MspInit+0xf0>)
 8005e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e06:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e0a:	61bb      	str	r3, [r7, #24]
 8005e0c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005e0e:	2300      	movs	r3, #0
 8005e10:	617b      	str	r3, [r7, #20]
 8005e12:	4a2b      	ldr	r2, [pc, #172]	; (8005ec0 <HAL_UART_MspInit+0xf0>)
 8005e14:	4b2a      	ldr	r3, [pc, #168]	; (8005ec0 <HAL_UART_MspInit+0xf0>)
 8005e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e18:	f043 0310 	orr.w	r3, r3, #16
 8005e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e1e:	4b28      	ldr	r3, [pc, #160]	; (8005ec0 <HAL_UART_MspInit+0xf0>)
 8005e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e22:	f003 0310 	and.w	r3, r3, #16
 8005e26:	617b      	str	r3, [r7, #20]
 8005e28:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration    
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8005e2a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e30:	2302      	movs	r3, #2
 8005e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e34:	2301      	movs	r3, #1
 8005e36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005e3c:	2308      	movs	r3, #8
 8005e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005e40:	f107 031c 	add.w	r3, r7, #28
 8005e44:	4619      	mov	r1, r3
 8005e46:	481f      	ldr	r0, [pc, #124]	; (8005ec4 <HAL_UART_MspInit+0xf4>)
 8005e48:	f7fa fcec 	bl	8000824 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005e4c:	e031      	b.n	8005eb2 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a1d      	ldr	r2, [pc, #116]	; (8005ec8 <HAL_UART_MspInit+0xf8>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d12c      	bne.n	8005eb2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005e58:	2300      	movs	r3, #0
 8005e5a:	613b      	str	r3, [r7, #16]
 8005e5c:	4a18      	ldr	r2, [pc, #96]	; (8005ec0 <HAL_UART_MspInit+0xf0>)
 8005e5e:	4b18      	ldr	r3, [pc, #96]	; (8005ec0 <HAL_UART_MspInit+0xf0>)
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e66:	6413      	str	r3, [r2, #64]	; 0x40
 8005e68:	4b15      	ldr	r3, [pc, #84]	; (8005ec0 <HAL_UART_MspInit+0xf0>)
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e70:	613b      	str	r3, [r7, #16]
 8005e72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e74:	2300      	movs	r3, #0
 8005e76:	60fb      	str	r3, [r7, #12]
 8005e78:	4a11      	ldr	r2, [pc, #68]	; (8005ec0 <HAL_UART_MspInit+0xf0>)
 8005e7a:	4b11      	ldr	r3, [pc, #68]	; (8005ec0 <HAL_UART_MspInit+0xf0>)
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7e:	f043 0308 	orr.w	r3, r3, #8
 8005e82:	6313      	str	r3, [r2, #48]	; 0x30
 8005e84:	4b0e      	ldr	r3, [pc, #56]	; (8005ec0 <HAL_UART_MspInit+0xf0>)
 8005e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e88:	f003 0308 	and.w	r3, r3, #8
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005e90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e96:	2302      	movs	r3, #2
 8005e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005ea2:	2307      	movs	r3, #7
 8005ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ea6:	f107 031c 	add.w	r3, r7, #28
 8005eaa:	4619      	mov	r1, r3
 8005eac:	4807      	ldr	r0, [pc, #28]	; (8005ecc <HAL_UART_MspInit+0xfc>)
 8005eae:	f7fa fcb9 	bl	8000824 <HAL_GPIO_Init>
}
 8005eb2:	bf00      	nop
 8005eb4:	3730      	adds	r7, #48	; 0x30
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	40007800 	.word	0x40007800
 8005ec0:	40023800 	.word	0x40023800
 8005ec4:	40021000 	.word	0x40021000
 8005ec8:	40004800 	.word	0x40004800
 8005ecc:	40020c00 	.word	0x40020c00

08005ed0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b08c      	sub	sp, #48	; 0x30
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005edc:	2300      	movs	r3, #0
 8005ede:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	6879      	ldr	r1, [r7, #4]
 8005ee4:	2019      	movs	r0, #25
 8005ee6:	f7fa fc03 	bl	80006f0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8005eea:	2019      	movs	r0, #25
 8005eec:	f7fa fc1c 	bl	8000728 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	4a1f      	ldr	r2, [pc, #124]	; (8005f74 <HAL_InitTick+0xa4>)
 8005ef6:	4b1f      	ldr	r3, [pc, #124]	; (8005f74 <HAL_InitTick+0xa4>)
 8005ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efa:	f043 0301 	orr.w	r3, r3, #1
 8005efe:	6453      	str	r3, [r2, #68]	; 0x44
 8005f00:	4b1c      	ldr	r3, [pc, #112]	; (8005f74 <HAL_InitTick+0xa4>)
 8005f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	60fb      	str	r3, [r7, #12]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005f0c:	f107 0210 	add.w	r2, r7, #16
 8005f10:	f107 0314 	add.w	r3, r7, #20
 8005f14:	4611      	mov	r1, r2
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7fb fac2 	bl	80014a0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8005f1c:	f7fb faac 	bl	8001478 <HAL_RCC_GetPCLK2Freq>
 8005f20:	4603      	mov	r3, r0
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f28:	4a13      	ldr	r2, [pc, #76]	; (8005f78 <HAL_InitTick+0xa8>)
 8005f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2e:	0c9b      	lsrs	r3, r3, #18
 8005f30:	3b01      	subs	r3, #1
 8005f32:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005f34:	4b11      	ldr	r3, [pc, #68]	; (8005f7c <HAL_InitTick+0xac>)
 8005f36:	4a12      	ldr	r2, [pc, #72]	; (8005f80 <HAL_InitTick+0xb0>)
 8005f38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8005f3a:	4b10      	ldr	r3, [pc, #64]	; (8005f7c <HAL_InitTick+0xac>)
 8005f3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005f40:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005f42:	4a0e      	ldr	r2, [pc, #56]	; (8005f7c <HAL_InitTick+0xac>)
 8005f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f46:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005f48:	4b0c      	ldr	r3, [pc, #48]	; (8005f7c <HAL_InitTick+0xac>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f4e:	4b0b      	ldr	r3, [pc, #44]	; (8005f7c <HAL_InitTick+0xac>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005f54:	4809      	ldr	r0, [pc, #36]	; (8005f7c <HAL_InitTick+0xac>)
 8005f56:	f7fb fad5 	bl	8001504 <HAL_TIM_Base_Init>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d104      	bne.n	8005f6a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005f60:	4806      	ldr	r0, [pc, #24]	; (8005f7c <HAL_InitTick+0xac>)
 8005f62:	f7fb fb04 	bl	800156e <HAL_TIM_Base_Start_IT>
 8005f66:	4603      	mov	r3, r0
 8005f68:	e000      	b.n	8005f6c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3730      	adds	r7, #48	; 0x30
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	40023800 	.word	0x40023800
 8005f78:	431bde83 	.word	0x431bde83
 8005f7c:	20004f80 	.word	0x20004f80
 8005f80:	40010000 	.word	0x40010000

08005f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005f84:	b480      	push	{r7}
 8005f86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005f88:	bf00      	nop
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005f92:	b480      	push	{r7}
 8005f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005f96:	e7fe      	b.n	8005f96 <HardFault_Handler+0x4>

08005f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005f9c:	e7fe      	b.n	8005f9c <MemManage_Handler+0x4>

08005f9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005fa2:	e7fe      	b.n	8005fa2 <BusFault_Handler+0x4>

08005fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005fa8:	e7fe      	b.n	8005fa8 <UsageFault_Handler+0x4>

08005faa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005faa:	b480      	push	{r7}
 8005fac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005fae:	bf00      	nop
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005fbc:	2010      	movs	r0, #16
 8005fbe:	f7fa fdf5 	bl	8000bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005fc2:	bf00      	nop
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005fca:	2020      	movs	r0, #32
 8005fcc:	f7fa fdee 	bl	8000bac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8005fd0:	2040      	movs	r0, #64	; 0x40
 8005fd2:	f7fa fdeb 	bl	8000bac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8005fd6:	2080      	movs	r0, #128	; 0x80
 8005fd8:	f7fa fde8 	bl	8000bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005fdc:	bf00      	nop
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005fe4:	4802      	ldr	r0, [pc, #8]	; (8005ff0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005fe6:	f7fb fae6 	bl	80015b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005fea:	bf00      	nop
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	20004f80 	.word	0x20004f80

08005ff4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ff8:	4a08      	ldr	r2, [pc, #32]	; (800601c <SystemInit+0x28>)
 8005ffa:	4b08      	ldr	r3, [pc, #32]	; (800601c <SystemInit+0x28>)
 8005ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006000:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006004:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006008:	4b04      	ldr	r3, [pc, #16]	; (800601c <SystemInit+0x28>)
 800600a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800600e:	609a      	str	r2, [r3, #8]
#endif
}
 8006010:	bf00      	nop
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	e000ed00 	.word	0xe000ed00

08006020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8006020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006058 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006024:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006026:	e003      	b.n	8006030 <LoopCopyDataInit>

08006028 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006028:	4b0c      	ldr	r3, [pc, #48]	; (800605c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800602a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800602c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800602e:	3104      	adds	r1, #4

08006030 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006030:	480b      	ldr	r0, [pc, #44]	; (8006060 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006032:	4b0c      	ldr	r3, [pc, #48]	; (8006064 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006034:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006036:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006038:	d3f6      	bcc.n	8006028 <CopyDataInit>
  ldr  r2, =_sbss
 800603a:	4a0b      	ldr	r2, [pc, #44]	; (8006068 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800603c:	e002      	b.n	8006044 <LoopFillZerobss>

0800603e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800603e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006040:	f842 3b04 	str.w	r3, [r2], #4

08006044 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006044:	4b09      	ldr	r3, [pc, #36]	; (800606c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006046:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006048:	d3f9      	bcc.n	800603e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800604a:	f7ff ffd3 	bl	8005ff4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800604e:	f000 f811 	bl	8006074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006052:	f7ff fb31 	bl	80056b8 <main>
  bx  lr    
 8006056:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8006058:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800605c:	0800622c 	.word	0x0800622c
  ldr  r0, =_sdata
 8006060:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006064:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8006068:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 800606c:	20004fc0 	.word	0x20004fc0

08006070 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006070:	e7fe      	b.n	8006070 <ADC_IRQHandler>
	...

08006074 <__libc_init_array>:
 8006074:	b570      	push	{r4, r5, r6, lr}
 8006076:	4e0d      	ldr	r6, [pc, #52]	; (80060ac <__libc_init_array+0x38>)
 8006078:	4c0d      	ldr	r4, [pc, #52]	; (80060b0 <__libc_init_array+0x3c>)
 800607a:	1ba4      	subs	r4, r4, r6
 800607c:	10a4      	asrs	r4, r4, #2
 800607e:	2500      	movs	r5, #0
 8006080:	42a5      	cmp	r5, r4
 8006082:	d109      	bne.n	8006098 <__libc_init_array+0x24>
 8006084:	4e0b      	ldr	r6, [pc, #44]	; (80060b4 <__libc_init_array+0x40>)
 8006086:	4c0c      	ldr	r4, [pc, #48]	; (80060b8 <__libc_init_array+0x44>)
 8006088:	f000 f82c 	bl	80060e4 <_init>
 800608c:	1ba4      	subs	r4, r4, r6
 800608e:	10a4      	asrs	r4, r4, #2
 8006090:	2500      	movs	r5, #0
 8006092:	42a5      	cmp	r5, r4
 8006094:	d105      	bne.n	80060a2 <__libc_init_array+0x2e>
 8006096:	bd70      	pop	{r4, r5, r6, pc}
 8006098:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800609c:	4798      	blx	r3
 800609e:	3501      	adds	r5, #1
 80060a0:	e7ee      	b.n	8006080 <__libc_init_array+0xc>
 80060a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060a6:	4798      	blx	r3
 80060a8:	3501      	adds	r5, #1
 80060aa:	e7f2      	b.n	8006092 <__libc_init_array+0x1e>
 80060ac:	08006224 	.word	0x08006224
 80060b0:	08006224 	.word	0x08006224
 80060b4:	08006224 	.word	0x08006224
 80060b8:	08006228 	.word	0x08006228

080060bc <memcpy>:
 80060bc:	b510      	push	{r4, lr}
 80060be:	1e43      	subs	r3, r0, #1
 80060c0:	440a      	add	r2, r1
 80060c2:	4291      	cmp	r1, r2
 80060c4:	d100      	bne.n	80060c8 <memcpy+0xc>
 80060c6:	bd10      	pop	{r4, pc}
 80060c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060d0:	e7f7      	b.n	80060c2 <memcpy+0x6>

080060d2 <memset>:
 80060d2:	4402      	add	r2, r0
 80060d4:	4603      	mov	r3, r0
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d100      	bne.n	80060dc <memset+0xa>
 80060da:	4770      	bx	lr
 80060dc:	f803 1b01 	strb.w	r1, [r3], #1
 80060e0:	e7f9      	b.n	80060d6 <memset+0x4>
	...

080060e4 <_init>:
 80060e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e6:	bf00      	nop
 80060e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ea:	bc08      	pop	{r3}
 80060ec:	469e      	mov	lr, r3
 80060ee:	4770      	bx	lr

080060f0 <_fini>:
 80060f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f2:	bf00      	nop
 80060f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060f6:	bc08      	pop	{r3}
 80060f8:	469e      	mov	lr, r3
 80060fa:	4770      	bx	lr
